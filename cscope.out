cscope 15 $HOME/code/parser/cparse               0000477940
	@builtin-features.cpp

6 
	#STATIC_CPARSE_STARTUP


	)

7 
	~"buûtö-„©uªs.öc
"

	@catch.cpp

1 
	#CATCH_CONFIG_RUNNER


	)

2 
	~"ˇtch.hµ
"

5 
PREPARE_ENVIRONMENT
();

7 
	$maö
(
¨gc
, ** 
¨gv
) {

8 
	`PREPARE_ENVIRONMENT
();

9  
C©ch
::
	`Sessi⁄
().
	`run
(
¨gc
, 
¨gv
);

10 
	}
}

	@catch.hpp

11 #i‚de‡
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED


12 
	#TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED


	)

14 
	#TWOBLUECUBES_CATCH_HPP_INCLUDED


	)

16 #ifde‡
__˛™g__


17 #¥agm®
˛™g
 
sy°em_hódî


18 #ñi‡
deföed
 
__GNUC__


19 #¥agm®
GCC
 
sy°em_hódî


24 #ifde‡
__˛™g__


25 #ifde‡
__ICC


26 #¥agm®
w¨nög
(
push
)

27 #¥agm®
w¨nög
(
dißbÀ
: 161 1682)

29 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wglobal-constructors"

30 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wvariadic-macros"

31 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wc99-extensions"

32 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wunused-variable"

33 #¥agm®
˛™g
 
dügno°ic
 
push


34 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

35 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wc++98-compat"

36 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wc++98-compat-pedantic"

37 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wswitch-enum"

38 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wcovered-switch-default"

40 #ñi‡
deföed
 
__GNUC__


41 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wvariadic-macros"

42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-variable"

43 #¥agm®
GCC
 
dügno°ic
 
push


44 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpadded"

46 #i‡
deföed
(
CATCH_CONFIG_MAIN
Ë|| deföed(
CATCH_CONFIG_RUNNER
)

47 
	#CATCH_IMPL


	)

50 #ifde‡
CATCH_IMPL


51 #i‚de‡
CLARA_CONFIG_MAIN


52 
	#CLARA_CONFIG_MAIN_NOT_DEFINED


	)

53 
	#CLARA_CONFIG_MAIN


	)

58 
	#TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED


	)

61 
	#TWOBLUECUBES_CATCH_COMMON_H_INCLUDED


	)

63 
	#INTERNAL_CATCH_UNIQUE_NAME_LINE2
–
«me
, 
löe
 )Çame##
	)
line

64 
	#INTERNAL_CATCH_UNIQUE_NAME_LINE
–
«me
, 
löe
 ) 
	`INTERNAL_CATCH_UNIQUE_NAME_LINE2
–«me,Üöê)

	)

65 #ifde‡
CATCH_CONFIG_COUNTER


66 
	#INTERNAL_CATCH_UNIQUE_NAME
–
«me
 ) 
	`INTERNAL_CATCH_UNIQUE_NAME_LINE
–«me, 
__COUNTER__
 )

	)

68 
	#INTERNAL_CATCH_UNIQUE_NAME
–
«me
 ) 
	`INTERNAL_CATCH_UNIQUE_NAME_LINE
–«me, 
__LINE__
 )

	)

71 
	#INTERNAL_CATCH_STRINGIFY2
–
ex¥
 ) #ex¥

	)

72 
	#INTERNAL_CATCH_STRINGIFY
–
ex¥
 ) 
	`INTERNAL_CATCH_STRINGIFY2
–ex¥ )

	)

74 
	~<s°ªam
>

75 
	~<°dex˚±
>

76 
	~<Æg‹ôhm
>

79 
	#TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED


	)

109 #ifde‡
__˝lu•lus


111 #i‡
__˝lu•lus
 >= 201103L

112 
	#CATCH_CPP11_OR_GREATER


	)

115 #i‡
__˝lu•lus
 >= 201402L

116 
	#CATCH_CPP14_OR_GREATER


	)

121 #ifde‡
__˛™g__


123 #i‡
__has_„©uª
(
cxx_nuŒ±r
)

124 
	#CATCH_INTERNAL_CONFIG_CPP11_NULLPTR


	)

127 #i‡
__has_„©uª
(
cxx_n€x˚±
)

128 
	#CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT


	)

131 #i‡
deföed
(
CATCH_CPP11_OR_GREATER
)

132 
	#CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
 
	`_Pøgma
–"˛™g dügno°i¯ign‹ed \"-W∑ª¡he£s\"" )

	)

139 #ifde‡
__BORLANDC__


145 #ifde‡
__EDG_VERSION__


151 #ifde‡
__DMC__


157 #ifde‡
__GNUC__


159 #i‡
__GNUC__
 =4 && 
__GNUC_MINOR__
 >6 && 
deföed
(
__GXX_EXPERIMENTAL_CXX0X__
)

160 
	#CATCH_INTERNAL_CONFIG_CPP11_NULLPTR


	)

163 #i‡!
deföed
(
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
Ë&& deföed(
CATCH_CPP11_OR_GREATER
)

164 
	#CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
 
	`_Pøgma
–"GCC dügno°i¯ign‹ed \"-W∑ª¡he£s\"" )

	)

174 #ifde‡
_MSC_VER


176 #i‡(
_MSC_VER
 >= 1600)

177 
	#CATCH_INTERNAL_CONFIG_CPP11_NULLPTR


	)

178 
	#CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR


	)

181 #i‡(
_MSC_VER
 >= 1900 )

182 
	#CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT


	)

183 
	#CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS


	)

191 #i‡–
deföed
 
_MSC_VER
 && _MSC_VER > 1400 && !deföed 
__EDGE__
) || \

192 –
deföed
 
	g__WAVE__
 && 
	g__WAVE_HAS_VARIADICS
 ) || \

193 –
deföed
 
	g__GNUC__
 && __GNUC__ >= 3 ) || \

194 –!
deföed
 
__˝lu•lus
 && 
__STDC_VERSION__
 >= 199901L || __cplusplus >= 201103L )

196 
	#CATCH_INTERNAL_CONFIG_VARIADIC_MACROS


	)

201 #i‡–
deföed
 
_MSC_VER
 && _MSC_VER >= 1300 ) || \

202 –
deföed
 
__GNUC__
 && __GNUC__ >4 && 
__GNUC_MINOR__
 >= 3 ) || \

203 –
deföed
 
__˛™g__
 && 
__˛™g_maj‹__
 >= 3 )

205 
	#CATCH_INTERNAL_CONFIG_COUNTER


	)

213 #i‡
deföed
(
CATCH_CPP11_OR_GREATER
)

215 #i‡!
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR
)

216 
	#CATCH_INTERNAL_CONFIG_CPP11_NULLPTR


	)

219 #i‚de‡
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT


220 
	#CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT


	)

223 #i‚de‡
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS


224 
	#CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS


	)

227 #i‚de‡
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM


228 
	#CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM


	)

231 #i‚de‡
CATCH_INTERNAL_CONFIG_CPP11_TUPLE


232 
	#CATCH_INTERNAL_CONFIG_CPP11_TUPLE


	)

235 #i‚de‡
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS


236 
	#CATCH_INTERNAL_CONFIG_VARIADIC_MACROS


	)

239 #i‡!
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG
)

240 
	#CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG


	)

243 #i‡!
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE
)

244 
	#CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE


	)

246 #i‡!
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR
)

247 
	#CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR


	)

253 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR
Ë&& !deföed(
CATCH_CONFIG_CPP11_NO_NULLPTR
Ë&& !deföed(
CATCH_CONFIG_CPP11_NULLPTR
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

254 
	#CATCH_CONFIG_CPP11_NULLPTR


	)

256 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT
Ë&& !deföed(
CATCH_CONFIG_CPP11_NO_NOEXCEPT
Ë&& !deföed(
CATCH_CONFIG_CPP11_NOEXCEPT
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

257 
	#CATCH_CONFIG_CPP11_NOEXCEPT


	)

259 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS
Ë&& !deföed(
CATCH_CONFIG_CPP11_NO_GENERATED_METHODS
Ë&& !deföed(
CATCH_CONFIG_CPP11_GENERATED_METHODS
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

260 
	#CATCH_CONFIG_CPP11_GENERATED_METHODS


	)

262 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM
Ë&& !deföed(
CATCH_CONFIG_CPP11_NO_IS_ENUM
Ë&& !deföed(
CATCH_CONFIG_CPP11_IS_ENUM
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

263 
	#CATCH_CONFIG_CPP11_IS_ENUM


	)

265 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_TUPLE
Ë&& !deföed(
CATCH_CONFIG_CPP11_NO_TUPLE
Ë&& !deföed(
CATCH_CONFIG_CPP11_TUPLE
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

266 
	#CATCH_CONFIG_CPP11_TUPLE


	)

268 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS
Ë&& !deföed(
CATCH_CONFIG_NO_VARIADIC_MACROS
Ë&& !deföed(
CATCH_CONFIG_VARIADIC_MACROS
)

269 
	#CATCH_CONFIG_VARIADIC_MACROS


	)

271 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG
Ë&& !deföed(
CATCH_CONFIG_NO_LONG_LONG
Ë&& !deföed(
CATCH_CONFIG_CPP11_LONG_LONG
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

272 
	#CATCH_CONFIG_CPP11_LONG_LONG


	)

274 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE
Ë&& !deföed(
CATCH_CONFIG_NO_OVERRIDE
Ë&& !deföed(
CATCH_CONFIG_CPP11_OVERRIDE
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

275 
	#CATCH_CONFIG_CPP11_OVERRIDE


	)

277 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR
Ë&& !deföed(
CATCH_CONFIG_NO_UNIQUE_PTR
Ë&& !deföed(
CATCH_CONFIG_CPP11_UNIQUE_PTR
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11
)

278 
	#CATCH_CONFIG_CPP11_UNIQUE_PTR


	)

280 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_COUNTER
Ë&& !deföed(
CATCH_CONFIG_NO_COUNTER
Ë&& !deföed(
CATCH_CONFIG_COUNTER
)

281 
	#CATCH_CONFIG_COUNTER


	)

284 #i‡!
deföed
(
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
)

285 
	#CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS


	)

289 #i‡
deföed
(
CATCH_CONFIG_CPP11_NOEXCEPT
Ë&& !deföed(
CATCH_NOEXCEPT
)

290 
	#CATCH_NOEXCEPT
 
n€x˚±


	)

291 
	#CATCH_NOEXCEPT_IS
(
x
Ë
	`n€x˚±
(x)

	)

293 
	#CATCH_NOEXCEPT
 
	`throw
()

	)

294 
	#CATCH_NOEXCEPT_IS
(
x
)

	)

298 #ifde‡
CATCH_CONFIG_CPP11_NULLPTR


299 
	#CATCH_NULL
 
nuŒ±r


	)

301 
	#CATCH_NULL
 
NULL


	)

305 #ifde‡
CATCH_CONFIG_CPP11_OVERRIDE


306 
	#CATCH_OVERRIDE
 
ovîride


	)

308 
	#CATCH_OVERRIDE


	)

312 #ifde‡
CATCH_CONFIG_CPP11_UNIQUE_PTR


313 
	#CATCH_AUTO_PTR
–
T
 ) 
°d
::
unique_±r
<T>

	)

315 
	#CATCH_AUTO_PTR
–
T
 ) 
°d
::
auto_±r
<T>

	)

318 
«me•a˚
 
C©ch
 {

320 
IC⁄fig
;

322 
	sCa£Sísôive
 { 
	eChoi˚
 {

323 
	gYes
,

324 
	gNo


327 ˛as†
	cN⁄C›yabÀ
 {

328 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


329 
N⁄C›yabÀ
–N⁄C›yabÀ c⁄°& ) = 
dñëe
;

330 
N⁄C›yabÀ
–N⁄C›yabÀ && ) = 
dñëe
;

331 
	gN⁄C›yabÀ
& 
	g›î©‹
 = ( 
N⁄C›yabÀ
 c⁄°& ) = 
dñëe
;

332 
	gN⁄C›yabÀ
& 
	g›î©‹
 = ( 
N⁄C›yabÀ
 && ) = 
dñëe
;

334 
N⁄C›yabÀ
–N⁄C›yabÀ c⁄°& 
öfo
 );

335 
	gN⁄C›yabÀ
& 
	g›î©‹
 = ( 
N⁄C›yabÀ
 const& );

338 
	g¥Ÿe˘ed
:

339 
N⁄C›yabÀ
() {}

340 
vútuÆ
 ~
N⁄C›yabÀ
();

343 ˛as†
	cSa„Boﬁ
 {

344 
	gpublic
:

345 (
Sa„Boﬁ
::*
	tty≥
)() const;

347 
ty≥
 
makeSa„
–
boﬁ
 
vÆue
 ) {

348  
	gvÆue
 ? &
	gSa„Boﬁ
::
åueVÆue
 : 0;

350 
	g¥iv©e
:

351 
åueVÆue
() const {}

354 
	gãm∂©e
<
ty≥«me
 
	gC⁄èöîT
>

355 
ölöe
 
	$dñëeAŒ
–
C⁄èöîT
& 
c⁄èöî
 ) {

356 
ty≥«me
 
C⁄èöîT
::
c⁄°_ôî©‹
 
ô
 = 
c⁄èöî
.
	`begö
();

357 
ty≥«me
 
C⁄èöîT
::
c⁄°_ôî©‹
 
ôEnd
 = 
c⁄èöî
.
	`íd
();

358 ; 
ô
 !
ôEnd
; ++it )

359 
dñëe
 *
ô
;

360 
	}
}

361 
	gãm∂©e
<
ty≥«me
 
	gAssocütiveC⁄èöîT
>

362 
ölöe
 
	$dñëeAŒVÆues
–
AssocütiveC⁄èöîT
& 
c⁄èöî
 ) {

363 
ty≥«me
 
AssocütiveC⁄èöîT
::
c⁄°_ôî©‹
 
ô
 = 
c⁄èöî
.
	`begö
();

364 
ty≥«me
 
AssocütiveC⁄èöîT
::
c⁄°_ôî©‹
 
ôEnd
 = 
c⁄èöî
.
	`íd
();

365 ; 
ô
 !
ôEnd
; ++it )

366 
dñëe
 
ô
->
£c⁄d
;

367 
	}
}

369 
boﬁ
 
°¨tsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
¥efix
 );

370 
boﬁ
 
ídsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
suffix
 );

371 
boﬁ
 
c⁄èös
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
öfix
 );

372 
toLowîInPœ˚
–
°d
::
°rög
& 
s
 );

373 
	g°d
::
°rög
 
toLowî
–
°d
::°rög c⁄°& 
s
 );

374 
	g°d
::
°rög
 
åim
–
°d
::°rög c⁄°& 
°r
 );

375 
boﬁ
 
ª∂a˚InPœ˚
–
°d
::
°rög
& 
°r
, std::°rög c⁄°& 
ª∂a˚This
, std::°rög c⁄°& 
wôhThis
 );

377 
	s∂uøli£
 {

378 
∂uøli£
–
°d
::
size_t
 
cou¡
, std::
°rög
 c⁄°& 
œbñ
 );

380 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
∂uøli£
 c⁄°& 
	g∂uøli£r
 );

382 
	g°d
::
size_t
 
m_cou¡
;

383 
	g°d
::
°rög
 
m_œbñ
;

386 
	sSour˚LöeInfo
 {

388 
Sour˚LöeInfo
();

389 
Sour˚LöeInfo
–c⁄°* 
_fûe
, 
°d
::
size_t
 
_löe
 );

390 
Sour˚LöeInfo
–Sour˚LöeInfÿc⁄°& 
Ÿhî
 );

391 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


392 
Sour˚LöeInfo
( SourceLineInfo && ) = ;

393 
	gSour˚LöeInfo
& 
	g›î©‹
 = ( 
Sour˚LöeInfo
 const& ) = ;

394 
	gSour˚LöeInfo
& 
	g›î©‹
 = ( 
Sour˚LöeInfo
 && ) = ;

396 
boﬁ
 
em±y
() const;

397 
boﬁ
 
	g›î©‹
 =–
Sour˚LöeInfo
 c⁄°& 
Ÿhî
 ) const;

398 
boﬁ
 
	g›î©‹
 < ( 
Sour˚LöeInfo
 c⁄°& 
	gŸhî
 ) const;

400 
	g°d
::
°rög
 
fûe
;

401 
	g°d
::
size_t
 
löe
;

404 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Sour˚LöeInfo
 c⁄°& 
	göfo
 );

407 
ölöe
 
boﬁ
 
	$isTrue
–
boﬁ
 
vÆue
 ){  vÆue; 
	}
}

408 
ölöe
 
boﬁ
 
	$ÆwaysTrue
(Ë{  
åue
; 
	}
}

409 
ölöe
 
boﬁ
 
	$ÆwaysFÆ£
(Ë{  
Ál£
; 
	}
}

411 
throwLogicEº‹
–
°d
::
°rög
 c⁄°& 
mesßge
, 
Sour˚LöeInfo
 c⁄°& 
loˇti⁄Info
 );

413 
£edRng
–
IC⁄fig
 c⁄°& 
c⁄fig
 );

414 
∫gSìd
();

420 
	sSåómEndSt›
 {

421 
	g°d
::
°rög
 
›î©‹
+() {

422  
°d
::
°rög
();

425 
	gãm∂©e
<
ty≥«me
 
	gT
>

426 
T
 c⁄°& 
	g›î©‹
 + ( T c⁄°& 
	gvÆue
, 
	gSåómEndSt›
 ) {

427  
	gvÆue
;

431 
	#CATCH_INTERNAL_LINEINFO
 ::
C©ch
::
	`Sour˚LöeInfo
–
__FILE__
, 
°©ic_ˇ°
<
°d
::
size_t
>–
__LINE__
 ) )

	)

432 
	#CATCH_INTERNAL_ERROR
–
msg
 ) ::
C©ch
::
	`throwLogicEº‹
–msg, 
CATCH_INTERNAL_LINEINFO
 );

	)

434 
	~<o°ªam
>

436 
«me•a˚
 
	gC©ch
 {

438 ˛as†
	cNŸIm∂emíãdEx˚±i⁄
 : 
public
 
°d
::
ex˚±i⁄


440 
public
:

441 
NŸIm∂emíãdEx˚±i⁄
–
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

442 
NŸIm∂emíãdEx˚±i⁄
( NotImplementedException const& ) {}

444 
	gvútuÆ
 ~
NŸIm∂emíãdEx˚±i⁄
(Ë
	gCATCH_NOEXCEPT
 {}

446 
vútuÆ
 c⁄° * 
wh©
(Ëc⁄° 
	gCATCH_NOEXCEPT
;

448 
	g¥iv©e
:

449 
°d
::
°rög
 
m_wh©
;

450 
Sour˚LöeInfo
 
	gm_löeInfo
;

456 
	#CATCH_NOT_IMPLEMENTED
 
throw
 
C©ch
::
	`NŸIm∂emíãdEx˚±i⁄
–
CATCH_INTERNAL_LINEINFO
 )

	)

459 
	#TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED


	)

462 
	#TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED


	)

464 
	~<°rög
>

466 
«me•a˚
 
	gC©ch
 {

468 
	sIGíî©‹Info
 {

469 
	gvútuÆ
 ~
IGíî©‹Info
();

470 
vútuÆ
 
boﬁ
 
moveNext
() = 0;

471 
vútuÆ
 
	g°d
::
size_t
 
gëCuºítIndex
() const = 0;

474 
	sIGíî©‹sF‹Te°
 {

475 
	gvútuÆ
 ~
IGíî©‹sF‹Te°
();

477 
vútuÆ
 
	gIGíî©‹Info
& 
gëGíî©‹Info
–
°d
::
°rög
 c⁄°& 
fûeInfo
, std::
size_t
 
size
 ) = 0;

478 
vútuÆ
 
boﬁ
 
moveNext
() = 0;

481 
IGíî©‹sF‹Te°
* 
¸óãGíî©‹sF‹Te°
();

486 
	#TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED


	)

488 #ifde‡
__˛™g__


489 #¥agm®
˛™g
 
dügno°ic
 
push


490 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

493 
«me•a˚
 
	gC©ch
 {

498 
	gãm∂©e
<
ty≥«me
 
	gT
>

499 ˛as†
	cPå
 {

500 
	gpublic
:

501 
På
(Ë: 
m_p
–
CATCH_NULL
 ){}

502 
På
–
T
* 
p
 ) : 
m_p
(Ö ){

503 if–
m_p
 )

504 
m_p
->
addRef
();

506 
På
–På c⁄°& 
Ÿhî
 ) : 
m_p
( other.m_p ){

507 if–
m_p
 )

508 
m_p
->
addRef
();

510 ~
På
(){

511 if–
	gm_p
 )

512 
	gm_p
->
ªÀa£
();

514 
ª£t
() {

515 if–
	gm_p
 )

516 
	gm_p
->
ªÀa£
();

517 
	gm_p
 = 
CATCH_NULL
;

519 
	gPå
& 
	g›î©‹
 = ( 
T
* 
p
 ){

520 
På
 
ãmp
–
p
 );

521 
sw≠
–
ãmp
 );

522  *
	gthis
;

524 
	gPå
& 
	g›î©‹
 = ( 
På
 c⁄°& 
Ÿhî
 ){

525 
På
 
ãmp
–
Ÿhî
 );

526 
sw≠
–
ãmp
 );

527  *
	gthis
;

529 
sw≠
–
På
& 
Ÿhî
 ) { 
	g°d
::sw≠–
m_p
, other.m_p ); }

530 
T
* 
gë
(Ëc⁄°{  
	gm_p
; }

531 
	gT
& 
	g›î©‹
*(Ëc⁄° {  *
	gm_p
; }

532 
T
* 
	g›î©‹
->(Ëc⁄° {  
	gm_p
; }

533 
boﬁ
 
	g›î©‹
 !(Ëc⁄° {  
	gm_p
 =
CATCH_NULL
; }

534 
›î©‹
 
	gSa„Boﬁ
::
ty≥
(Ëc⁄° {  
Sa„Boﬁ
::
makeSa„
–
m_p
 !
CATCH_NULL
 ); }

536 
	g¥iv©e
:

537 
T
* 
m_p
;

540 
	gISh¨ed
 : 
N⁄C›yabÀ
 {

541 
vútuÆ
 ~
ISh¨ed
();

542 
vútuÆ
 
addRef
() const = 0;

543 
vútuÆ
 
ªÀa£
() const = 0;

546 
	gãm∂©e
<
ty≥«me
 
	gT
 = 
ISh¨ed
>

547 
Sh¨edIm∂
 : 
T
 {

549 
Sh¨edIm∂
(Ë: 
m_rc
( 0 ){}

551 
vútuÆ
 
addRef
() const {

552 ++
m_rc
;

554 
vútuÆ
 
ªÀa£
() const {

555 if–--
	gm_rc
 == 0 )

556 
dñëe
 
this
;

559 
muèbÀ
 
	gm_rc
;

564 #ifde‡
__˛™g__


565 #¥agm®
˛™g
 
dügno°ic
 
p›


568 
	~<mem‹y
>

569 
	~<ve˘‹
>

570 
	~<°dlib.h
>

572 
«me•a˚
 
	gC©ch
 {

574 
˛ass
 
	gTe°Ca£
;

575 
˛ass
 
	gSåóm
;

576 
	gIResu…C≠tuª
;

577 
	gIRu¬î
;

578 
	gIGíî©‹sF‹Te°
;

579 
	gIC⁄fig
;

581 
	sIC⁄ãxt


583 
	gvútuÆ
 ~
IC⁄ãxt
();

585 
vútuÆ
 
IResu…C≠tuª
* 
gëResu…C≠tuª
() = 0;

586 
vútuÆ
 
IRu¬î
* 
gëRu¬î
() = 0;

587 
vútuÆ
 
size_t
 
gëGíî©‹Index
–
°d
::
°rög
 c⁄°& 
fûeInfo
, size_à
tŸÆSize
 ) = 0;

588 
vútuÆ
 
boﬁ
 
adv™˚Gíî©‹sF‹CuºítTe°
() = 0;

589 
vútuÆ
 
	gPå
<
IC⁄fig
 c⁄°> 
gëC⁄fig
() const = 0;

592 
	gIMuèbÀC⁄ãxt
 : 
IC⁄ãxt


594 
vútuÆ
 ~
IMuèbÀC⁄ãxt
();

595 
vútuÆ
 
£tResu…C≠tuª
–
IResu…C≠tuª
* 
ªsu…C≠tuª
 ) = 0;

596 
vútuÆ
 
£tRu¬î
–
IRu¬î
* 
ru¬î
 ) = 0;

597 
vútuÆ
 
£tC⁄fig
–
På
<
IC⁄fig
 c⁄°> c⁄°& 
c⁄fig
 ) = 0;

600 
	gIC⁄ãxt
& 
gëCuºítC⁄ãxt
();

601 
	gIMuèbÀC⁄ãxt
& 
gëCuºítMuèbÀC⁄ãxt
();

602 
˛ónUpC⁄ãxt
();

603 
Såóm
 
¸óãSåóm
–
°d
::
°rög
 c⁄°& 
°ªamName
 );

608 
	#TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED


	)

611 
	#TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED


	)

613 
	~<ve˘‹
>

615 
«me•a˚
 
	gC©ch
 {

617 
˛ass
 
	gTe°S≥c
;

619 
	gITe°Ca£
 : 
ISh¨ed
 {

620 
vútuÆ
 
övoke
 () const = 0;

621 
	g¥Ÿe˘ed
:

622 
vútuÆ
 ~
ITe°Ca£
();

625 
˛ass
 
	gTe°Ca£
;

626 
	gIC⁄fig
;

628 
	sITe°Ca£Regi°ry
 {

629 
	gvútuÆ
 ~
ITe°Ca£Regi°ry
();

630 
vútuÆ
 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°s
() const = 0;

631 
vútuÆ
 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) const = 0;

634 
boﬁ
 
m©chTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 );

635 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãrTe°s
–
°d
::ve˘‹<Te°Ca£> c⁄°& 
ã°Ca£s
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 );

636 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°Ca£sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 );

640 
«me•a˚
 
	gC©ch
 {

642 
	gãm∂©e
<
ty≥«me
 
	gC
>

643 
˛ass
 
	gMëhodTe°Ca£
 : 
public
 
Sh¨edIm∂
<
ITe°Ca£
> {

645 
public
:

646 
MëhodTe°Ca£
–(
C
::*
mëhod
)(ËË: 
m_mëhod
( method ) {}

648 
vútuÆ
 
övoke
() const {

649 
C
 
obj
;

650 (
	gobj
.*
	gm_mëhod
)();

653 
	g¥iv©e
:

654 
vútuÆ
 ~
MëhodTe°Ca£
() {}

656 (
C
::*
m_mëhod
)();

659 (*
	gTe°Fun˘i⁄
)();

661 
	sNameAndDesc
 {

662 
NameAndDesc
–c⁄° * 
_«me
 = "", c⁄° * 
_des¸ùti⁄
= "" )

663 : 
«me
–
_«me
 ), 
des¸ùti⁄
–
_des¸ùti⁄
 )

666 c⁄° * 
	g«me
;

667 c⁄° * 
	gdes¸ùti⁄
;

670 
	gªgi°îTe°Ca£


671 –
ITe°Ca£
* 
	gã°Ca£
,

672 c⁄°* 
	g˛assName
,

673 
NameAndDesc
 c⁄°& 
	g«meAndDesc
,

674 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
 );

676 
	sAutoReg
 {

678 
	gAutoReg


679 –
Te°Fun˘i⁄
 
	gfun˘i⁄
,

680 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
,

681 
NameAndDesc
 c⁄°& 
	g«meAndDesc
 );

683 
	gãm∂©e
<
ty≥«me
 
	gC
>

684 
	gAutoReg


685 –(
	gC
::*
mëhod
)(),

686 c⁄°* 
	g˛assName
,

687 
NameAndDesc
 c⁄°& 
	g«meAndDesc
,

688 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
 ) {

690 
	gªgi°îTe°Ca£


691 –
√w
 
	gMëhodTe°Ca£
<
	gC
>–
	gmëhod
 ),

692 
	g˛assName
,

693 
	g«meAndDesc
,

694 
	glöeInfo
 );

697 ~
AutoReg
();

699 
	g¥iv©e
:

700 
AutoReg
( AutoReg const& );

701 
	g›î©‹
–
AutoReg
 const& );

704 
	gªgi°îTe°Ca£Fun˘i⁄


705 –
Te°Fun˘i⁄
 
	gfun˘i⁄
,

706 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
,

707 
NameAndDesc
 c⁄°& 
	g«meAndDesc
 );

711 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


713 
	#INTERNAL_CATCH_TESTCASE2
–
Te°Name
, ... ) \

714 
	`Te°Name
(); \

715 
«me•a˚
{ 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–&
Te°Name
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`NameAndDesc
–
__VA_ARGS__
 ) ); }\

716 
	`Te°Name
()

	)

717 
	#INTERNAL_CATCH_TESTCASE
( ... ) \

718 
	`INTERNAL_CATCH_TESTCASE2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), 
__VA_ARGS__
 )

	)

721 
	#INTERNAL_CATCH_METHOD_AS_TEST_CASE
–
QuÆifõdMëhod
, ... ) \

722 
«me•a˚
{ 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–&
QuÆifõdMëhod
, "&" #QuÆifõdMëhod, C©ch::
	`NameAndDesc
–
__VA_ARGS__
 ), 
CATCH_INTERNAL_LINEINFO
 ); }

	)

725 
	#INTERNAL_CATCH_TEST_CASE_METHOD2
–
Te°Name
, 
CœssName
, ... )\

726 
«me•a˚
{ \

727 
Te°Name
 : 
CœssName
{ \

728 
	`ã°
(); \

730 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 ) ( &
Te°Name
::
ã°
, #CœssName, C©ch::
	`NameAndDesc
–
__VA_ARGS__
 ), 
CATCH_INTERNAL_LINEINFO
 ); \

732 
Te°Name
::
	`ã°
()

	)

733 
	#INTERNAL_CATCH_TEST_CASE_METHOD
–
CœssName
, ... ) \

734 
	`INTERNAL_CATCH_TEST_CASE_METHOD2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), 
CœssName
, 
__VA_ARGS__
 )

	)

737 
	#INTERNAL_CATCH_REGISTER_TESTCASE
–
Fun˘i⁄
, ... ) \

738 
C©ch
::
	`AutoReg
–
Fun˘i⁄
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`NameAndDesc
–
__VA_ARGS__
 ) );

	)

742 
	#INTERNAL_CATCH_TESTCASE2
–
Te°Name
, 
Name
, 
Desc
 ) \

743 
	`Te°Name
(); \

744 
«me•a˚
{ 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–&
Te°Name
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`NameAndDesc
–
Name
, 
Desc
 ) ); }\

745 
	`Te°Name
()

	)

746 
	#INTERNAL_CATCH_TESTCASE
–
Name
, 
Desc
 ) \

747 
	`INTERNAL_CATCH_TESTCASE2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), 
Name
, 
Desc
 )

	)

750 
	#INTERNAL_CATCH_METHOD_AS_TEST_CASE
–
QuÆifõdMëhod
, 
Name
, 
Desc
 ) \

751 
«me•a˚
{ 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–&
QuÆifõdMëhod
, "&" #QuÆifõdMëhod, C©ch::
	`NameAndDesc
–
Name
, 
Desc
 ), 
CATCH_INTERNAL_LINEINFO
 ); }

	)

754 
	#INTERNAL_CATCH_TEST_CASE_METHOD2
–
Te°Ca£Name
, 
CœssName
, 
Te°Name
, 
Desc
 )\

755 
«me•a˚
{ \

756 
Te°Ca£Name
 : 
CœssName
{ \

757 
	`ã°
(); \

759 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 ) ( &
Te°Ca£Name
::
ã°
, #CœssName, C©ch::
	`NameAndDesc
–
Te°Name
, 
Desc
 ), 
CATCH_INTERNAL_LINEINFO
 ); \

761 
Te°Ca£Name
::
	`ã°
()

	)

762 
	#INTERNAL_CATCH_TEST_CASE_METHOD
–
CœssName
, 
Te°Name
, 
Desc
 )\

763 
	`INTERNAL_CATCH_TEST_CASE_METHOD2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), 
CœssName
, 
Te°Name
, 
Desc
 )

	)

766 
	#INTERNAL_CATCH_REGISTER_TESTCASE
–
Fun˘i⁄
, 
Name
, 
Desc
 ) \

767 
C©ch
::
	`AutoReg
–
Fun˘i⁄
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`NameAndDesc
–
Name
, 
Desc
 ) );

	)

771 
	#TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED


	)

774 
	#TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED


	)

777 
	#TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED


	)

779 
«me•a˚
 
	gC©ch
 {

782 
	sResu…Was
 { 
	eOfTy≥
 {

783 
	gUnknown
 = -1,

784 
	gOk
 = 0,

785 
	gInfo
 = 1,

786 
	gW¨nög
 = 2,

788 
	gFaûuªBô
 = 0x10,

790 
	gEx¥essi⁄Faûed
 = 
FaûuªBô
 | 1,

791 
	gEx∂icôFaûuª
 = 
FaûuªBô
 | 2,

793 
	gEx˚±i⁄
 = 0x100 | 
FaûuªBô
,

795 
	gThªwEx˚±i⁄
 = 
Ex˚±i⁄
 | 1,

796 
	gDid¡ThrowEx˚±i⁄
 = 
Ex˚±i⁄
 | 2,

798 
	gF©ÆEº‹C⁄dôi⁄
 = 0x200 | 
FaûuªBô


802 
ölöe
 
boﬁ
 
isOk
–
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
 ) {

803  ( 
ªsu…Ty≥
 & 
Resu…Was
::
FaûuªBô
 ) == 0;

805 
ölöe
 
boﬁ
 
isJu°Info
–
Êags
 ) {

806  
	gÊags
 =
Resu…Was
::
Info
;

810 
	sResu…Di•osôi⁄
 { 
	eFœgs
 {

811 
	gN‹mÆ
 = 0x01,

813 
	gC⁄töueOnFaûuª
 = 0x02,

814 
	gFÆ£Te°
 = 0x04,

815 
	gSuµªssFaû
 = 0x08

818 
ölöe
 
	gResu…Di•osôi⁄
::
Fœgs
 
›î©‹
 | ( 
Resu…Di•osôi⁄
::Fœg†
lhs
, Resu…Di•osôi⁄::Fœg†
rhs
 ) {

819  
°©ic_ˇ°
<
Resu…Di•osôi⁄
::
Fœgs
>–°©ic_ˇ°<>–
lhs
 ) | sètic_ˇ°<>–
rhs
 ) );

822 
ölöe
 
boﬁ
 
shouldC⁄töueOnFaûuª
–
Êags
 ) {  ( 
	gÊags
 & 
	gResu…Di•osôi⁄
::
C⁄töueOnFaûuª
 ) != 0; }

823 
ölöe
 
boﬁ
 
isFÆ£Te°
–
Êags
 ) {  ( 
	gÊags
 & 
	gResu…Di•osôi⁄
::
FÆ£Te°
 ) != 0; }

824 
ölöe
 
boﬁ
 
shouldSuµªssFaûuª
–
Êags
 ) {  ( 
	gÊags
 & 
	gResu…Di•osôi⁄
::
SuµªssFaû
 ) != 0; }

829 
	#TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED


	)

831 
	~<°rög
>

833 
«me•a˚
 
	gC©ch
 {

835 
	sAs£πi⁄Info


837 
As£πi⁄Info
() {}

838 
As£πi⁄Info
–
°d
::
°rög
 c⁄°& 
_ma¸oName
,

839 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

840 
°d
::
°rög
 c⁄°& 
_ˇ±uªdEx¥essi⁄
,

841 
Resu…Di•osôi⁄
::
Fœgs
 
_ªsu…Di•osôi⁄
 );

843 
	g°d
::
°rög
 
ma¸oName
;

844 
Sour˚LöeInfo
 
	glöeInfo
;

845 
	g°d
::
°rög
 
ˇ±uªdEx¥essi⁄
;

846 
	gResu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
;

849 
	sAs£πi⁄Resu…D©a


851 
As£πi⁄Resu…D©a
(Ë: 
ªsu…Ty≥
–
Resu…Was
::
Unknown
 ) {}

853 
°d
::
°rög
 
ªc⁄°ru˘edEx¥essi⁄
;

854 
	g°d
::
°rög
 
mesßge
;

855 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
;

858 ˛as†
	cAs£πi⁄Resu…
 {

859 
	gpublic
:

860 
As£πi⁄Resu…
();

861 
As£πi⁄Resu…
–
As£πi⁄Info
 c⁄°& 
öfo
, 
As£πi⁄Resu…D©a
 c⁄°& 
d©a
 );

862 ~
As£πi⁄Resu…
();

863 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


864 
As£πi⁄Resu…
( AssertionResult const& ) = ;

865 
As£πi⁄Resu…
( AssertionResult && ) = ;

866 
	gAs£πi⁄Resu…
& 
	g›î©‹
 = ( 
As£πi⁄Resu…
 const& ) = ;

867 
	gAs£πi⁄Resu…
& 
	g›î©‹
 = ( 
As£πi⁄Resu…
 && ) = ;

870 
boﬁ
 
isOk
() const;

871 
boﬁ
 
suc˚eded
() const;

872 
	gResu…Was
::
OfTy≥
 
gëResu…Ty≥
() const;

873 
boﬁ
 
hasEx¥essi⁄
() const;

874 
boﬁ
 
hasMesßge
() const;

875 
	g°d
::
°rög
 
gëEx¥essi⁄
() const;

876 
	g°d
::
°rög
 
gëEx¥essi⁄InMa¸o
() const;

877 
boﬁ
 
hasEx∑ndedEx¥essi⁄
() const;

878 
	g°d
::
°rög
 
gëEx∑ndedEx¥essi⁄
() const;

879 
	g°d
::
°rög
 
gëMesßge
() const;

880 
Sour˚LöeInfo
 
gëSour˚Info
() const;

881 
	g°d
::
°rög
 
gëTe°Ma¸oName
() const;

883 
	g¥Ÿe˘ed
:

884 
As£πi⁄Info
 
m_öfo
;

885 
As£πi⁄Resu…D©a
 
	gm_ªsu…D©a
;

891 
	#TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED


	)

893 
«me•a˚
 
	gC©ch
 {

894 
«me•a˚
 
	gM©chîs
 {

895 
«me•a˚
 
	gIm∂
 {

897 
«me•a˚
 
	gGíîic
 {

898 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
> 
˛ass
 
	gAŒOf
;

899 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
> 
˛ass
 
	gAnyOf
;

900 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
> 
˛ass
 
	gNŸ
;

903 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

904 
	gM©chî
 : 
Sh¨edIm∂
<
ISh¨ed
>

906 
Ex¥essi⁄T
 
	tEx¥essi⁄Ty≥
;

908 
	gvútuÆ
 ~
M©chî
() {}

909 
vútuÆ
 
	gPå
<
	gM©chî
> 
˛⁄e
() const = 0;

910 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄T
 c⁄°& 
ex¥
 ) const = 0;

911 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const = 0;

913 
	gGíîic
::
AŒOf
<
Ex¥essi⁄T
> 
›î©‹
 && ( 
M©chî
<Ex¥essi⁄T> c⁄°& 
Ÿhî
 ) const;

914 
	gGíîic
::
AnyOf
<
Ex¥essi⁄T
> 
›î©‹
 || ( 
M©chî
<Ex¥essi⁄T> c⁄°& 
Ÿhî
 ) const;

915 
	gGíîic
::
NŸ
<
Ex¥essi⁄T
> 
›î©‹
 ! () const;

918 
	gãm∂©e
<
ty≥«me
 
	gDîivedT
,Åy≥«mê
	gEx¥essi⁄T
>

919 
	gM©chîIm∂
 : 
M©chî
<
Ex¥essi⁄T
> {

921 
vútuÆ
 
På
<
M©chî
<
Ex¥essi⁄T
> > 
˛⁄e
() const {

922  
På
<
M©chî
<
Ex¥essi⁄T
> >–
√w
 
DîivedT
–
°©ic_ˇ°
<DîivedT c⁄°&>–*
this
 ) ) );

926 
«me•a˚
 
	gGíîic
 {

927 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

928 
˛ass
 
	gNŸ
 : 
public
 
M©chîIm∂
<
NŸ
<
Ex¥essi⁄T
>, 
	gEx¥essi⁄T
> {

929 
	gpublic
:

930 
ex∂icô
 
NŸ
–
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m©chî
 ) : 
m_m©chî
(m©chî.
˛⁄e
()) {}

931 
NŸ
–NŸ c⁄°& 
Ÿhî
 ) : 
m_m©chî
( other.m_matcher ) {}

933 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄T
 c⁄°& 
ex¥
 ) c⁄° 
CATCH_OVERRIDE
 {

934  !
m_m©chî
->
m©ch
–
ex¥
 );

937 
vútuÆ
 
	g°d
::
°rög
 
toSåög
(Ëc⁄° 
CATCH_OVERRIDE
 {

938  "nŸ " + 
m_m©chî
->
toSåög
();

940 
	g¥iv©e
:

941 
På
< 
M©chî
<
Ex¥essi⁄T
> > 
m_m©chî
;

944 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

945 
˛ass
 
	gAŒOf
 : 
public
 
M©chîIm∂
<
AŒOf
<
Ex¥essi⁄T
>, 
	gEx¥essi⁄T
> {

946 
	gpublic
:

948 
AŒOf
() {}

949 
AŒOf
–AŒO‡c⁄°& 
Ÿhî
 ) : 
m_m©chîs
( other.m_matchers ) {}

951 
AŒOf
& 
add
–
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m©chî
 ) {

952 
m_m©chîs
.
push_back
–
m©chî
.
˛⁄e
() );

953  *
	gthis
;

955 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄T
 c⁄°& 
ex¥
 ) const

957  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gm_m©chîs
.
size
(); ++i )

958 if–!
	gm_m©chîs
[
i
]->
m©ch
–
ex¥
 ) )

959  
	gÁl£
;

960  
	gåue
;

962 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

963 
°d
::
o°rög°ªam
 
oss
;

964 
	goss
 << "( ";

965  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gm_m©chîs
.
size
(); ++i ) {

966 if–
	gi
 != 0 )

967 
oss
 << "ánd ";

968 
	goss
 << 
	gm_m©chîs
[
i
]->
toSåög
();

970 
	goss
 << " )";

971  
	goss
.
°r
();

974 
AŒOf
 
	g›î©‹
 && ( 
	gM©chî
<
	gEx¥essi⁄T
> c⁄°& 
	gŸhî
 ) const {

975 
AŒOf
 
ÆlOfEx¥
–*
this
 );

976 
	gÆlOfEx¥
.
add
–
Ÿhî
 );

977  
	gÆlOfEx¥
;

980 
	g¥iv©e
:

981 
°d
::
ve˘‹
<
På
<
M©chî
<
Ex¥essi⁄T
> > > 
m_m©chîs
;

984 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

985 
˛ass
 
	gAnyOf
 : 
public
 
M©chîIm∂
<
AnyOf
<
Ex¥essi⁄T
>, 
	gEx¥essi⁄T
> {

986 
	gpublic
:

988 
AnyOf
() {}

989 
AnyOf
–AnyO‡c⁄°& 
Ÿhî
 ) : 
m_m©chîs
( other.m_matchers ) {}

991 
AnyOf
& 
add
–
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m©chî
 ) {

992 
m_m©chîs
.
push_back
–
m©chî
.
˛⁄e
() );

993  *
	gthis
;

995 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄T
 c⁄°& 
ex¥
 ) const

997  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gm_m©chîs
.
size
(); ++i )

998 if–
	gm_m©chîs
[
i
]->
m©ch
–
ex¥
 ) )

999  
	gåue
;

1000  
	gÁl£
;

1002 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

1003 
°d
::
o°rög°ªam
 
oss
;

1004 
	goss
 << "( ";

1005  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gm_m©chîs
.
size
(); ++i ) {

1006 if–
	gi
 != 0 )

1007 
oss
 << " or ";

1008 
	goss
 << 
	gm_m©chîs
[
i
]->
toSåög
();

1010 
	goss
 << " )";

1011  
	goss
.
°r
();

1014 
AnyOf
 
	g›î©‹
 || ( 
	gM©chî
<
	gEx¥essi⁄T
> c⁄°& 
	gŸhî
 ) const {

1015 
AnyOf
 
™yOfEx¥
–*
this
 );

1016 
	g™yOfEx¥
.
add
–
Ÿhî
 );

1017  
	g™yOfEx¥
;

1020 
	g¥iv©e
:

1021 
°d
::
ve˘‹
<
På
<
M©chî
<
Ex¥essi⁄T
> > > 
m_m©chîs
;

1026 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1027 
	gGíîic
::
AŒOf
<
Ex¥essi⁄T
> 
M©chî
<Ex¥essi⁄T>::
›î©‹
 && ( M©chî<Ex¥essi⁄T> c⁄°& 
Ÿhî
 ) const {

1028 
Gíîic
::
AŒOf
<
Ex¥essi⁄T
> 
ÆlOfEx¥
;

1029 
	gÆlOfEx¥
.
add
–*
this
 );

1030 
	gÆlOfEx¥
.
add
–
Ÿhî
 );

1031  
	gÆlOfEx¥
;

1034 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1035 
	gGíîic
::
AnyOf
<
Ex¥essi⁄T
> 
M©chî
<Ex¥essi⁄T>::
›î©‹
 || ( M©chî<Ex¥essi⁄T> c⁄°& 
Ÿhî
 ) const {

1036 
Gíîic
::
AnyOf
<
Ex¥essi⁄T
> 
™yOfEx¥
;

1037 
	g™yOfEx¥
.
add
–*
this
 );

1038 
	g™yOfEx¥
.
add
–
Ÿhî
 );

1039  
	g™yOfEx¥
;

1042 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1043 
	gGíîic
::
NŸ
<
Ex¥essi⁄T
> 
M©chî
<Ex¥essi⁄T>::
›î©‹
 ! () const {

1044  
Gíîic
::
NŸ
<
Ex¥essi⁄T
>–*
this
 );

1047 
«me•a˚
 
	gStdSåög
 {

1049 
ölöe
 
	g°d
::
°rög
 
makeSåög
–
°d
::°rög c⁄°& 
°r
 ) {  str; }

1050 
ölöe
 
	g°d
::
°rög
 
makeSåög
–c⁄° * 
°r
 ) {  så ? 
°d
::string( str ) : std::string(); }

1052 
	sCa£dSåög


1054 
Ca£dSåög
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 )

1055 : 
m_ˇ£Sísôivôy
–
ˇ£Sísôivôy
 ),

1056 
m_°r
–
adju°Såög
–
°r
 ) )

1058 
	g°d
::
°rög
 
adju°Såög
–
°d
::°rög c⁄°& 
°r
 ) const {

1059  
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
No


1060 ? 
toLowî
–
°r
 )

1061 : 
°r
;

1064 
	g°d
::
°rög
 
toSåögSuffix
() const

1066  
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
No


1070 
	gCa£Sísôive
::
Choi˚
 
m_ˇ£Sísôivôy
;

1071 
	g°d
::
°rög
 
m_°r
;

1074 
	gEquÆs
 : 
M©chîIm∂
<
EquÆs
, 
	g°d
::
°rög
> {

1075 
EquÆs
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 )

1076 : 
m_d©a
–
°r
, 
ˇ£Sísôivôy
 )

1078 
EquÆs
–EquÆ†c⁄°& 
Ÿhî
 ) : 
m_d©a
( other.m_data ){}

1080 
vútuÆ
 ~
EquÆs
();

1082 
vútuÆ
 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
ex¥
 ) const {

1083  
m_d©a
.
m_°r
 =m_d©a.
adju°Såög
–
ex¥
 );;

1085 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

1086  "equÆs: \"" + 
m_d©a
.
m_°r
 + "\"" + m_d©a.
toSåögSuffix
();

1089 
Ca£dSåög
 
	gm_d©a
;

1092 
	gC⁄èös
 : 
M©chîIm∂
<
C⁄èös
, 
	g°d
::
°rög
> {

1093 
C⁄èös
–
°d
::
°rög
 c⁄°& 
sub°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 )

1094 : 
m_d©a
–
sub°r
, 
ˇ£Sísôivôy
 ){}

1095 
C⁄èös
–C⁄èö†c⁄°& 
Ÿhî
 ) : 
m_d©a
( other.m_data ){}

1097 
vútuÆ
 ~
C⁄èös
();

1099 
vútuÆ
 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
ex¥
 ) const {

1100  
m_d©a
.
adju°Såög
–
ex¥
 ).
föd
–m_d©a.
m_°r
 ) !
°d
::
°rög
::
≈os
;

1102 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

1103  "c⁄èös: \"" + 
m_d©a
.
m_°r
 + "\"" + m_d©a.
toSåögSuffix
();

1106 
Ca£dSåög
 
	gm_d©a
;

1109 
	gSèπsWôh
 : 
M©chîIm∂
<
SèπsWôh
, 
	g°d
::
°rög
> {

1110 
SèπsWôh
–
°d
::
°rög
 c⁄°& 
sub°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 )

1111 : 
m_d©a
–
sub°r
, 
ˇ£Sísôivôy
 ){}

1113 
SèπsWôh
–SèπsWôh c⁄°& 
Ÿhî
 ) : 
m_d©a
( other.m_data ){}

1115 
vútuÆ
 ~
SèπsWôh
();

1117 
vútuÆ
 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
ex¥
 ) const {

1118  
°¨tsWôh
–
m_d©a
.
adju°Såög
–
ex¥
 ), m_d©a.
m_°r
 );

1120 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

1121  "°¨t†wôh: \"" + 
m_d©a
.
m_°r
 + "\"" + m_d©a.
toSåögSuffix
();

1124 
Ca£dSåög
 
	gm_d©a
;

1127 
	gEndsWôh
 : 
M©chîIm∂
<
EndsWôh
, 
	g°d
::
°rög
> {

1128 
EndsWôh
–
°d
::
°rög
 c⁄°& 
sub°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 )

1129 : 
m_d©a
–
sub°r
, 
ˇ£Sísôivôy
 ){}

1130 
EndsWôh
–EndsWôh c⁄°& 
Ÿhî
 ) : 
m_d©a
( other.m_data ){}

1132 
vútuÆ
 ~
EndsWôh
();

1134 
vútuÆ
 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
ex¥
 ) const {

1135  
ídsWôh
–
m_d©a
.
adju°Såög
–
ex¥
 ), m_d©a.
m_°r
 );

1137 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

1138  "íd†wôh: \"" + 
m_d©a
.
m_°r
 + "\"" + m_d©a.
toSåögSuffix
();

1141 
Ca£dSåög
 
	gm_d©a
;

1148 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1149 
ölöe
 
	gIm∂
::
Gíîic
::
NŸ
<
Ex¥essi⁄T
> NŸ–
Im∂
::
M©chî
<Ex¥essi⁄T> c⁄°& 
m
 ) {

1150  
Im∂
::
Gíîic
::
NŸ
<
Ex¥essi⁄T
>–
m
 );

1153 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1154 
ölöe
 
	gIm∂
::
Gíîic
::
AŒOf
<
Ex¥essi⁄T
> AŒOf–
Im∂
::
M©chî
<Ex¥essi⁄T> c⁄°& 
m1
,

1155 
Im∂
::
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m2
 ) {

1156  
Im∂
::
Gíîic
::
AŒOf
<
Ex¥essi⁄T
>().
add
–
m1
 ).add–
m2
 );

1158 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1159 
ölöe
 
	gIm∂
::
Gíîic
::
AŒOf
<
Ex¥essi⁄T
> AŒOf–
Im∂
::
M©chî
<Ex¥essi⁄T> c⁄°& 
m1
,

1160 
Im∂
::
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m2
,

1161 
Im∂
::
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m3
 ) {

1162  
Im∂
::
Gíîic
::
AŒOf
<
Ex¥essi⁄T
>().
add
–
m1
 ).add–
m2
 ).add–
m3
 );

1164 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1165 
ölöe
 
	gIm∂
::
Gíîic
::
AnyOf
<
Ex¥essi⁄T
> AnyOf–
Im∂
::
M©chî
<Ex¥essi⁄T> c⁄°& 
m1
,

1166 
Im∂
::
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m2
 ) {

1167  
Im∂
::
Gíîic
::
AnyOf
<
Ex¥essi⁄T
>().
add
–
m1
 ).add–
m2
 );

1169 
	gãm∂©e
<
ty≥«me
 
	gEx¥essi⁄T
>

1170 
ölöe
 
	gIm∂
::
Gíîic
::
AnyOf
<
Ex¥essi⁄T
> AnyOf–
Im∂
::
M©chî
<Ex¥essi⁄T> c⁄°& 
m1
,

1171 
Im∂
::
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m2
,

1172 
Im∂
::
M©chî
<
Ex¥essi⁄T
> c⁄°& 
m3
 ) {

1173  
Im∂
::
Gíîic
::
AnyOf
<
Ex¥essi⁄T
>().
add
–
m1
 ).add–
m2
 ).add–
m3
 );

1176 
ölöe
 
	gIm∂
::
StdSåög
::
EquÆs
 EquÆs–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 ) {

1177  
Im∂
::
StdSåög
::
EquÆs
–
°r
, 
ˇ£Sísôivôy
 );

1179 
ölöe
 
	gIm∂
::
StdSåög
::
EquÆs
 EquÆs–c⁄° * 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 ) {

1180  
Im∂
::
StdSåög
::
EquÆs
–Im∂::StdSåög::
makeSåög
–
°r
 ), 
ˇ£Sísôivôy
 );

1182 
ölöe
 
	gIm∂
::
StdSåög
::
C⁄èös
 C⁄èös–
°d
::
°rög
 c⁄°& 
sub°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 ) {

1183  
Im∂
::
StdSåög
::
C⁄èös
–
sub°r
, 
ˇ£Sísôivôy
 );

1185 
ölöe
 
	gIm∂
::
StdSåög
::
C⁄èös
 C⁄èös–c⁄° * 
sub°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 ) {

1186  
Im∂
::
StdSåög
::
C⁄èös
–Im∂::StdSåög::
makeSåög
–
sub°r
 ), 
ˇ£Sísôivôy
 );

1188 
ölöe
 
	gIm∂
::
StdSåög
::
SèπsWôh
 SèπsWôh–
°d
::
°rög
 c⁄°& 
sub°r
 ) {

1189  
Im∂
::
StdSåög
::
SèπsWôh
–
sub°r
 );

1191 
ölöe
 
	gIm∂
::
StdSåög
::
SèπsWôh
 SèπsWôh–c⁄° * 
sub°r
 ) {

1192  
Im∂
::
StdSåög
::
SèπsWôh
–Im∂::StdSåög::
makeSåög
–
sub°r
 ) );

1194 
ölöe
 
	gIm∂
::
StdSåög
::
EndsWôh
 EndsWôh–
°d
::
°rög
 c⁄°& 
sub°r
 ) {

1195  
Im∂
::
StdSåög
::
EndsWôh
–
sub°r
 );

1197 
ölöe
 
	gIm∂
::
StdSåög
::
EndsWôh
 EndsWôh–c⁄° * 
sub°r
 ) {

1198  
Im∂
::
StdSåög
::
EndsWôh
–Im∂::StdSåög::
makeSåög
–
sub°r
 ) );

1203 
usög
 
«me•a˚
 
	gM©chîs
;

1207 
«me•a˚
 
	gC©ch
 {

1209 
	sTe°FaûuªEx˚±i⁄
{};

1211 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gEx¥essi⁄Lhs
;

1213 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
;

1215 
	sC›yabÀSåóm
 {

1216 
C›yabÀSåóm
() {}

1217 
C›yabÀSåóm
–C›yabÀSåóm c⁄°& 
Ÿhî
 ) {

1218 
	goss
 << 
	gŸhî
.oss.
°r
();

1220 
	gC›yabÀSåóm
& 
	g›î©‹
=–
C›yabÀSåóm
 c⁄°& 
Ÿhî
 ) {

1221 
oss
.
°r
("");

1222 
	goss
 << 
	gŸhî
.oss.
°r
();

1223  *
	gthis
;

1225 
	g°d
::
o°rög°ªam
 
oss
;

1228 ˛as†
	cResu…Buûdî
 {

1229 
	gpublic
:

1230 
Resu…Buûdî
–c⁄°* 
ma¸oName
,

1231 
Sour˚LöeInfo
 c⁄°& 
löeInfo
,

1232 c⁄°* 
ˇ±uªdEx¥essi⁄
,

1233 
Resu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
,

1234 c⁄°* 
£c⁄dArg
 = "" );

1236 
	gãm∂©e
<
ty≥«me
 
	gT
>

1237 
	gEx¥essi⁄Lhs
<
T
 c⁄°&> 
	g›î©‹
 <–T c⁄°& 
›î™d
 );

1238 
	gEx¥essi⁄Lhs
<
	gboﬁ
> 
	g›î©‹
 <–
boﬁ
 
vÆue
 );

1240 
	gãm∂©e
<
ty≥«me
 
	gT
>

1241 
	gResu…Buûdî
& 
	g›î©‹
 << ( 
T
 c⁄°& 
	gvÆue
 ) {

1242 
	gm_°ªam
.
	goss
 << 
	gvÆue
;

1243  *
	gthis
;

1246 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 && ( 
RhsT
 const& );

1247 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 || ( 
RhsT
 const& );

1249 
	gResu…Buûdî
& 
£tResu…Ty≥
–
Resu…Was
::
OfTy≥
 
ªsu…
 );

1250 
	gResu…Buûdî
& 
£tResu…Ty≥
–
boﬁ
 
ªsu…
 );

1251 
	gResu…Buûdî
& 
£tLhs
–
°d
::
°rög
 c⁄°& 
lhs
 );

1252 
	gResu…Buûdî
& 
£tRhs
–
°d
::
°rög
 c⁄°& 
rhs
 );

1253 
	gResu…Buûdî
& 
£tOp
–
°d
::
°rög
 c⁄°& 
›
 );

1255 
ídEx¥essi⁄
();

1257 
	g°d
::
°rög
 
ªc⁄°ru˘Ex¥essi⁄
() const;

1258 
As£πi⁄Resu…
 
buûd
() const;

1260 
u£A˘iveEx˚±i⁄
–
Resu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
 = Resu…Di•osôi⁄::
N‹mÆ
 );

1261 
ˇ±uªResu…
–
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
 );

1262 
ˇ±uªEx¥essi⁄
();

1263 
ˇ±uªEx≥˘edEx˚±i⁄
–
°d
::
°rög
 c⁄°& 
ex≥˘edMesßge
 );

1264 
ˇ±uªEx≥˘edEx˚±i⁄
–
M©chîs
::
Im∂
::
M©chî
<
°d
::
°rög
> c⁄°& 
m©chî
 );

1265 
h™dÀResu…
–
As£πi⁄Resu…
 c⁄°& 
ªsu…
 );

1266 
ªa˘
();

1267 
boﬁ
 
shouldDebugBªak
() const;

1268 
boﬁ
 
ÆlowThrows
() const;

1270 
	g¥iv©e
:

1271 
As£πi⁄Info
 
m_as£πi⁄Info
;

1272 
As£πi⁄Resu…D©a
 
	gm_d©a
;

1273 
	sEx¥Comp⁄íts
 {

1274 
Ex¥Comp⁄íts
(Ë: 
ã°FÆ£
–
Ál£
 ) {}

1275 
boﬁ
 
ã°FÆ£
;

1276 
	g°d
::
°rög
 
lhs
, 
	grhs
, 
	g›
;

1277 } 
	gm_ex¥Comp⁄íts
;

1278 
C›yabÀSåóm
 
	gm_°ªam
;

1280 
boﬁ
 
	gm_shouldDebugBªak
;

1281 
boﬁ
 
	gm_shouldThrow
;

1288 
	#TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED


	)

1291 
	#TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED


	)

1293 #ifde‡
_MSC_VER


1294 #¥agm®
w¨nög
(
push
)

1295 #¥agm®
w¨nög
(
dißbÀ
:4389)

1298 
	~<c°ddef
>

1300 
«me•a˚
 
	gC©ch
 {

1301 
«me•a˚
 
	gI¡î«l
 {

1303 
	eO≥øt‹
 {

1304 
	gIsEquÆTo
,

1305 
	gIsNŸEquÆTo
,

1306 
	gIsLessTh™
,

1307 
	gIsGª©îTh™
,

1308 
	gIsLessTh™OrEquÆTo
,

1309 
	gIsGª©îTh™OrEquÆTo


1312 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
	sO≥øt‹Tøôs
 { c⁄° * 
gëName
(){  "*error*"; } };

1313 
	gãm∂©e
<> 
	gO≥øt‹Tøôs
<
	gIsEquÆTo
> { c⁄° * 
gëName
(){  "=="; } };

1314 
	gãm∂©e
<> 
	gO≥øt‹Tøôs
<
	gIsNŸEquÆTo
> { c⁄° * 
gëName
(){  "!="; } };

1315 
	gãm∂©e
<> 
	gO≥øt‹Tøôs
<
	gIsLessTh™
> { c⁄° * 
gëName
(){  "<"; } };

1316 
	gãm∂©e
<> 
	gO≥øt‹Tøôs
<
	gIsGª©îTh™
> { c⁄° * 
gëName
(){  ">"; } };

1317 
	gãm∂©e
<> 
	gO≥øt‹Tøôs
<
	gIsLessTh™OrEquÆTo
> { c⁄° * 
gëName
(){  "<="; } };

1318 
	gãm∂©e
<> 
	gO≥øt‹Tøôs
<
	gIsGª©îTh™OrEquÆTo
>{ c⁄° * 
gëName
(){  ">="; } };

1320 
	gãm∂©e
<
ty≥«me
 
	gT
>

1321 
ölöe
 
	gT
& 
›Ca°
(
T
 c⁄°& 
t
Ë{  
	gc⁄°_ˇ°
<T&>(
	gt
); }

1324 #ifde‡
CATCH_CONFIG_CPP11_NULLPTR


1325 
ölöe
 
	g°d
::
nuŒ±r_t
 
›Ca°
(
°d
::nuŒ±r_tË{  
nuŒ±r
; }

1330 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
, 
O≥øt‹
 
	gOp
>

1331 ˛as†
	cEvÆu©‹
{};

1333 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1334 
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gIsEquÆTo
> {

1335 
boﬁ
 
evÆu©e
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
) {

1336  
boﬁ
–
›Ca°
–
lhs
 ) =›Ca°–
rhs
 ) );

1339 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1340 
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gIsNŸEquÆTo
> {

1341 
boﬁ
 
evÆu©e
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1342  
boﬁ
–
›Ca°
–
lhs
 ) !›Ca°–
rhs
 ) );

1345 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1346 
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gIsLessTh™
> {

1347 
boﬁ
 
evÆu©e
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1348  
boﬁ
–
›Ca°
–
lhs
 ) < opCa°–
rhs
 ) );

1351 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1352 
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gIsGª©îTh™
> {

1353 
boﬁ
 
evÆu©e
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1354  
boﬁ
–
›Ca°
–
lhs
 ) > opCa°–
rhs
 ) );

1357 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1358 
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gIsGª©îTh™OrEquÆTo
> {

1359 
boﬁ
 
evÆu©e
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1360  
boﬁ
–
›Ca°
–
lhs
 ) >›Ca°–
rhs
 ) );

1363 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1364 
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gIsLessTh™OrEquÆTo
> {

1365 
boﬁ
 
evÆu©e
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1366  
boﬁ
–
›Ca°
–
lhs
 ) <›Ca°–
rhs
 ) );

1370 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1371 
boﬁ
 
≠∂yEvÆu©‹
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1372  
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gOp
>::
evÆu©e
–
lhs
, 
rhs
 );

1379 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1380 
boﬁ
 
com∑ª
–
T1
 c⁄°& 
lhs
, 
T2
 c⁄°& 
rhs
 ) {

1381  
	gEvÆu©‹
<
	gT1
, 
	gT2
, 
	gOp
>::
evÆu©e
–
lhs
, 
rhs
 );

1385 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1386  
	g≠∂yEvÆu©‹
<
	gOp
>–
	glhs
, 
	g°©ic_ˇ°
<>–
	grhs
 ) );

1388 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1389  
	g≠∂yEvÆu©‹
<
	gOp
>–
	glhs
, 
	g°©ic_ˇ°
<>–
	grhs
 ) );

1391 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1392  
	g≠∂yEvÆu©‹
<
	gOp
>–
	glhs
, 
	g°©ic_ˇ°
<>–
	grhs
 ) );

1396 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1397  
	g≠∂yEvÆu©‹
<
	gOp
>–
	glhs
, 
	g°©ic_ˇ°
<>–
	grhs
 ) );

1399 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1400  
	g≠∂yEvÆu©‹
<
	gOp
>–
	glhs
, 
	g°©ic_ˇ°
<>–
	grhs
 ) );

1402 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1403  
	g≠∂yEvÆu©‹
<
	gOp
>–
	glhs
, 
	g°©ic_ˇ°
<>–
	grhs
 ) );

1407 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1408  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1410 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1411  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1413 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1414  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1418 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1419  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1421 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1422  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1424 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1425  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1429 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
lhs
, 
T
* 
rhs
 ) {

1430  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
ªöãΩªt_ˇ°
<
T
*>–
lhs
 ), 
rhs
 );

1432 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
T
* 
lhs
, 
rhs
 ) {

1433  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
lhs
, 
ªöãΩªt_ˇ°
<
T
*>–
rhs
 ) );

1437 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
lhs
, 
T
* 
rhs
 ) {

1438  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
ªöãΩªt_ˇ°
<
T
*>–
lhs
 ), 
rhs
 );

1440 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
T
* 
lhs
, 
rhs
 ) {

1441  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
lhs
, 
ªöãΩªt_ˇ°
<
T
*>–
rhs
 ) );

1444 #ifde‡
CATCH_CONFIG_CPP11_LONG_LONG


1446 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1447  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1449 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1450  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1452 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1453  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1455 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1456  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1460 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1461  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1463 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1464  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1466 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1467  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1469 
	gãm∂©e
<
O≥øt‹
 
	gOp
> 
boﬁ
 
com∑ª
–
lhs
, 
rhs
 ) {

1470  
	g≠∂yEvÆu©‹
<
	gOp
>–
	g°©ic_ˇ°
<>–
	glhs
 ), 
	grhs
 );

1474 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
lhs
, 
T
* 
rhs
 ) {

1475  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
ªöãΩªt_ˇ°
<
T
*>–
lhs
 ), 
rhs
 );

1477 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
T
* 
lhs
, 
rhs
 ) {

1478  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
lhs
, 
ªöãΩªt_ˇ°
<
T
*>–
rhs
 ) );

1482 #ifde‡
CATCH_CONFIG_CPP11_NULLPTR


1484 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
°d
::
nuŒ±r_t
, 
T
* 
rhs
 ) {

1485  
	gEvÆu©‹
<
	gT
*, T*, 
	gOp
>::
evÆu©e
–
nuŒ±r
, 
rhs
 );

1487 
	gãm∂©e
<
O≥øt‹
 
	gOp
, 
ty≥«me
 
	gT
> 
boﬁ
 
com∑ª
–
T
* 
lhs
, 
°d
::
nuŒ±r_t
 ) {

1488  
EvÆu©‹
<
T
*, 
	gT
*, 
	gOp
>::
evÆu©e
–
lhs
, 
nuŒ±r
 );

1495 #ifde‡
_MSC_VER


1496 #¥agm®
w¨nög
(
p›
)

1500 
	#TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED


	)

1502 
	~<s°ªam
>

1503 
	~<iom™ù
>

1504 
	~<limôs
>

1505 
	~<ve˘‹
>

1506 
	~<c°ddef
>

1508 #ifde‡
__OBJC__


1510 
	#TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED


	)

1512 #imp‹à<
Found©i⁄
/Found©i⁄.
h
>

1514 #ifde‡
__has_„©uª


1515 
	#CATCH_ARC_ENABLED
 
	`__has_„©uª
(
objc_¨c
)

	)

1517 
	#CATCH_ARC_ENABLED
 0

	)

1520 
¨cSa„Rñó£
–
NSObje˘
* 
obj
 );

1521 
id
 
≥rf‹mO±i⁄ÆSñe˘‹
–id 
obj
, 
SEL
 
£l
 );

1523 #i‡!
CATCH_ARC_ENABLED


1524 
ölöe
 
	$¨cSa„Rñó£
–
NSObje˘
* 
obj
 ) {

1525 [
obj
 
ªÀa£
];

1526 
	}
}

1527 
ölöe
 
id
 
	$≥rf‹mO±i⁄ÆSñe˘‹
–
id
 
obj
, 
SEL
 
£l
 ) {

1528 if–[
obj
 
ª•⁄dsToSñe˘‹
: 
£l
] )

1529  [
obj
 
≥rf‹mSñe˘‹
: 
£l
];

1530  
nû
;

1531 
	}
}

1532 
	#CATCH_UNSAFE_UNRETAINED


	)

1533 
	#CATCH_ARC_STRONG


	)

1535 
ölöe
 
	$¨cSa„Rñó£
–
NSObje˘
* ){
	}
}

1536 
ölöe
 
id
 
	$≥rf‹mO±i⁄ÆSñe˘‹
–
id
 
obj
, 
SEL
 
£l
 ) {

1537 #ifde‡
__˛™g__


1538 #¥agm®
˛™g
 
dügno°ic
 
push


1539 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Warc-performSelector-leaks"

1541 if–[
obj
 
ª•⁄dsToSñe˘‹
: 
£l
] )

1542  [
obj
 
≥rf‹mSñe˘‹
: 
£l
];

1543 #ifde‡
__˛™g__


1544 #¥agm®
˛™g
 
dügno°ic
 
p›


1546  
nû
;

1547 
	}
}

1548 
	#CATCH_UNSAFE_UNRETAINED
 
__unß„_uƒëaöed


	)

1549 
	#CATCH_ARC_STRONG
 
__°r⁄g


	)

1554 #ifde‡
CATCH_CONFIG_CPP11_TUPLE


1555 
	~<tu∂e
>

1558 #ifde‡
CATCH_CONFIG_CPP11_IS_ENUM


1559 
	~<ty≥_åaôs
>

1562 
«me•a˚
 
	gC©ch
 {

1565 
	gãm∂©e
<
ty≥«me
 
	gT
>

1566 
	g°d
::
°rög
 
toSåög
–
T
 c⁄°& 
vÆue
 );

1570 
	g°d
::
°rög
 
toSåög
–
°d
::°rög c⁄°& 
vÆue
 );

1571 
	g°d
::
°rög
 
toSåög
–
°d
::
w°rög
 c⁄°& 
vÆue
 );

1572 
	g°d
::
°rög
 
toSåög
–c⁄° * c⁄° 
vÆue
 );

1573 
	g°d
::
°rög
 
toSåög
–* c⁄° 
vÆue
 );

1574 
	g°d
::
°rög
 
toSåög
–c⁄° 
wch¨_t
* c⁄° 
vÆue
 );

1575 
	g°d
::
°rög
 
toSåög
–
wch¨_t
* c⁄° 
vÆue
 );

1576 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1577 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1578 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1579 
	g°d
::
°rög
 
toSåög
–c⁄° 
vÆue
 );

1580 
	g°d
::
°rög
 
toSåög
–c⁄° 
vÆue
 );

1581 
	g°d
::
°rög
 
toSåög
–
boﬁ
 
vÆue
 );

1582 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1583 
	g°d
::
°rög
 
toSåög
–sig√d 
vÆue
 );

1584 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1586 #ifde‡
CATCH_CONFIG_CPP11_LONG_LONG


1587 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1588 
	g°d
::
°rög
 
toSåög
–
vÆue
 );

1591 #ifde‡
CATCH_CONFIG_CPP11_NULLPTR


1592 
	g°d
::
°rög
 
toSåög
–
°d
::
nuŒ±r_t
 );

1595 #ifde‡
__OBJC__


1596 
	g°d
::
°rög
 
toSåög
–
NSSåög
 c⁄° * c⁄°& 
ns°rög
 );

1597 
	g°d
::
°rög
 
toSåög
–
NSSåög
 * 
CATCH_ARC_STRONG
 c⁄°& 
ns°rög
 );

1598 
	g°d
::
°rög
 
toSåög
–
NSObje˘
* c⁄°& 
nsObje˘
 );

1601 
«me•a˚
 
	gDëaû
 {

1603 c⁄° 
°d
::
°rög
 
u≈röèbÀSåög
;

1605 
	sB‹gTy≥
 {

1606 
	gãm∂©e
<
ty≥«me
 
	gT
> 
B‹gTy≥
–
T
 const& );

1609 
	sTrueTy≥
 { 
	gsizî
[1]; };

1610 
	sFÆ£Ty≥
 { 
	gsizî
[2]; };

1612 
	gTrueTy≥
& 
ã°SåómabÀ
–
°d
::
o°ªam
& );

1613 
FÆ£Ty≥
 
ã°SåómabÀ
( FalseType );

1615 
FÆ£Ty≥
 
	g›î©‹
<<–
	g°d
::
o°ªam
 c⁄°&, 
B‹gTy≥
 const& );

1617 
	gãm∂©e
<
ty≥«me
 
	gT
>

1618 
	sIsSåómIn£πabÀ
 {

1619 
	g°d
::
o°ªam
 &
s
;

1620 
T
 c⁄°&
	gt
;

1621 íum { 
	gvÆue
 = –
ã°SåómabÀ
(
s
 << 
t
ËË=–
TrueTy≥
 ) };

1624 #i‡
deföed
(
CATCH_CONFIG_CPP11_IS_ENUM
)

1625 
	gãm∂©e
<
ty≥«me
 
	gT
,

1626 
boﬁ
 
	gIsEnum
 = 
°d
::
is_íum
<
T
>::
vÆue


1628 
	sEnumSåögMakî


1630 
°d
::
°rög
 
c⁄vît
–
T
 c⁄°& ) {  
u≈röèbÀSåög
; }

1633 
	gãm∂©e
<
ty≥«me
 
	gT
>

1634 
	gEnumSåögMakî
<
	gT
,
	gåue
>

1636 
	g°d
::
°rög
 
c⁄vît
–
T
 c⁄°& 
v
 )

1638  ::
C©ch
::
toSåög
(

1639 
°©ic_ˇ°
<
ty≥«me
 
°d
::
undîlyög_ty≥
<
T
>::
ty≥
>(
v
)

1644 
	gãm∂©e
<
boﬁ
 
	gC
>

1645 
	sSåögMakîBa£
 {

1646 #i‡
deföed
(
CATCH_CONFIG_CPP11_IS_ENUM
)

1647 
	gãm∂©e
<
ty≥«me
 
	gT
>

1648 
	g°d
::
°rög
 
c⁄vît
–
T
 c⁄°& 
v
 )

1650  
EnumSåögMakî
<
T
>::
c⁄vît
–
v
 );

1653 
	gãm∂©e
<
ty≥«me
 
	gT
>

1654 
	g°d
::
°rög
 
c⁄vît
–
T
 c⁄°& ) {  
u≈röèbÀSåög
; }

1658 
	gãm∂©e
<>

1659 
	gSåögMakîBa£
<
	gåue
> {

1660 
	gãm∂©e
<
ty≥«me
 
	gT
>

1661 
	g°d
::
°rög
 
c⁄vît
–
T
 c⁄°& 
_vÆue
 ) {

1662 
°d
::
o°rög°ªam
 
oss
;

1663 
	goss
 << 
	g_vÆue
;

1664  
	goss
.
°r
();

1668 
	g°d
::
°rög
 
øwMem‹yToSåög
–c⁄° *
obje˘
, 
°d
::
size_t
 
size
 );

1670 
	gãm∂©e
<
ty≥«me
 
	gT
>

1671 
ölöe
 
	g°d
::
°rög
 
øwMem‹yToSåög
–c⁄° 
T
& 
obje˘
 ) {

1672  
øwMem‹yToSåög
–&
obje˘
, (object) );

1677 
	gãm∂©e
<
ty≥«me
 
	gT
>

1678 
	gSåögMakî
 :

1679 
Dëaû
::
SåögMakîBa£
<Dëaû::
IsSåómIn£πabÀ
<
T
>::
vÆue
> {};

1681 
	gãm∂©e
<
ty≥«me
 
	gT
>

1682 
	gSåögMakî
<
	gT
*> {

1683 
	gãm∂©e
<
ty≥«me
 
	gU
>

1684 
	g°d
::
°rög
 
c⁄vît
–
U
* 
p
 ) {

1685 if–!
p
 )

1688  
	gDëaû
::
øwMem‹yToSåög
–
p
 );

1692 
	gãm∂©e
<
ty≥«me
 
	gR
,Åy≥«mê
	gC
>

1693 
	gSåögMakî
<
R
 
	gC
::*> {

1694 
°d
::
°rög
 
c⁄vît
–
R
 
C
::* 
p
 ) {

1695 if–!
p
 )

1698  
	gDëaû
::
øwMem‹yToSåög
–
p
 );

1702 
«me•a˚
 
	gDëaû
 {

1703 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

1704 
	g°d
::
°rög
 
øngeToSåög
–
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
 );

1714 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gAŒoˇt‹
>

1715 
	g°d
::
°rög
 
toSåög
–
°d
::
ve˘‹
<
T
,
AŒoˇt‹
> c⁄°& 
v
 ) {

1716  
	gDëaû
::
øngeToSåög
–
v
.
begö
(), v.
íd
() );

1719 #ifde‡
CATCH_CONFIG_CPP11_TUPLE


1722 
«me•a˚
 
	gTu∂eDëaû
 {

1723 
	gãm∂©e
<

1724 
ty≥«me
 
	gTu∂e
,

1725 
	g°d
::
size_t
 
N
 = 0,

1726 
	gboﬁ
 = (
N
 < 
°d
::
tu∂e_size
<
Tu∂e
>::
vÆue
)

1728 
	sEÀmítPröãr
 {

1729 
¥öt
–c⁄° 
Tu∂e
& 
tu∂e
, 
°d
::
o°ªam
& 
os
 )

1731 
os
 << ( 
N
 ? ", " : " " )

1732 << 
C©ch
::
toSåög
(
°d
::
gë
<
N
>(
tu∂e
));

1733 
	gEÀmítPröãr
<
	gTu∂e
,
	gN
+1>::
¥öt
(
tu∂e
,
os
);

1737 
	gãm∂©e
<

1738 
ty≥«me
 
	gTu∂e
,

1739 
	g°d
::
size_t
 
N


1741 
EÀmítPröãr
<
Tu∂e
,
	gN
,
	gÁl£
> {

1742 
¥öt
–c⁄° 
Tu∂e
&, 
°d
::
o°ªam
& ) {}

1747 
	gãm∂©e
<
	gty≥«me
 ...
	gTy≥s
>

1748 
	gSåögMakî
<
	g°d
::
tu∂e
<
Ty≥s
...>> {

1750 
°d
::
°rög
 
c⁄vît
–c⁄° std::
tu∂e
<
Ty≥s
...>&Åuple )

1752 
°d
::
o°rög°ªam
 
os
;

1753 
	gos
 << '{';

1754 
	gTu∂eDëaû
::
EÀmítPröãr
<
°d
::
tu∂e
<
Ty≥s
...>>::
¥öt
–tu∂e, 
os
 );

1755 
	gos
 << " }";

1756  
	gos
.
°r
();

1761 
«me•a˚
 
	gDëaû
 {

1762 
	gãm∂©e
<
ty≥«me
 
	gT
>

1763 
	g°d
::
°rög
 
makeSåög
–
T
 c⁄°& 
vÆue
 ) {

1764  
SåögMakî
<
T
>::
c⁄vît
–
vÆue
 );

1775 
	gãm∂©e
<
ty≥«me
 
	gT
>

1776 
	g°d
::
°rög
 
toSåög
–
T
 c⁄°& 
vÆue
 ) {

1777  
SåögMakî
<
T
>::
c⁄vît
–
vÆue
 );

1780 
«me•a˚
 
	gDëaû
 {

1781 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

1782 
	g°d
::
°rög
 
øngeToSåög
–
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
 ) {

1783 
	g°d
::
o°rög°ªam
 
oss
;

1784 
	goss
 << "{ ";

1785 if–
	gfú°
 !
œ°
 ) {

1786 
oss
 << 
C©ch
::
toSåög
–*
fú°
 );

1787  ++
	gfú°
 ; fú° !
œ°
 ; ++first )

1788 
	goss
 << ", " << 
	gC©ch
::
toSåög
–*
fú°
 );

1790 
	goss
 << " }";

1791  
	goss
.
°r
();

1797 
«me•a˚
 
	gC©ch
 {

1801 
	gãm∂©e
<
ty≥«me
 
	gT
>

1802 ˛as†
	cEx¥essi⁄Lhs
 {

1803 
	gEx¥essi⁄Lhs
& 
	g›î©‹
 = ( 
Ex¥essi⁄Lhs
 const& );

1804 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


1805 
	gEx¥essi⁄Lhs
& 
	g›î©‹
 = ( 
Ex¥essi⁄Lhs
 && ) = 
dñëe
;

1808 
	gpublic
:

1809 
Ex¥essi⁄Lhs
–
Resu…Buûdî
& 
rb
, 
T
 
lhs
 ) : 
m_rb
–rb ), 
m_lhs
(Ühs ) {}

1810 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


1811 
Ex¥essi⁄Lhs
( ExpressionLhs const& ) = ;

1812 
Ex¥essi⁄Lhs
( ExpressionLhs && ) = ;

1815 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1816 
	gResu…Buûdî
& 
	g›î©‹
 =–
RhsT
 c⁄°& 
rhs
 ) {

1817  
ˇ±uªEx¥essi⁄
<
I¡î«l
::
IsEquÆTo
>–
rhs
 );

1820 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1821 
	gResu…Buûdî
& 
	g›î©‹
 !–
RhsT
 c⁄°& 
rhs
 ) {

1822  
ˇ±uªEx¥essi⁄
<
I¡î«l
::
IsNŸEquÆTo
>–
rhs
 );

1825 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1826 
	gResu…Buûdî
& 
	g›î©‹
 < ( 
RhsT
 c⁄°& 
	grhs
 ) {

1827  
	gˇ±uªEx¥essi⁄
<
	gI¡î«l
::
IsLessTh™
>–
rhs
 );

1830 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1831 
	gResu…Buûdî
& 
	g›î©‹
 > ( 
RhsT
 c⁄°& 
	grhs
 ) {

1832  
	gˇ±uªEx¥essi⁄
<
	gI¡î«l
::
IsGª©îTh™
>–
rhs
 );

1835 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1836 
	gResu…Buûdî
& 
	g›î©‹
 <–
RhsT
 c⁄°& 
rhs
 ) {

1837  
ˇ±uªEx¥essi⁄
<
I¡î«l
::
IsLessTh™OrEquÆTo
>–
rhs
 );

1840 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1841 
	gResu…Buûdî
& 
	g›î©‹
 >–
RhsT
 c⁄°& 
rhs
 ) {

1842  
ˇ±uªEx¥essi⁄
<
I¡î«l
::
IsGª©îTh™OrEquÆTo
>–
rhs
 );

1845 
	gResu…Buûdî
& 
	g›î©‹
 =–
boﬁ
 
rhs
 ) {

1846  
ˇ±uªEx¥essi⁄
<
I¡î«l
::
IsEquÆTo
>–
rhs
 );

1849 
	gResu…Buûdî
& 
	g›î©‹
 !–
boﬁ
 
rhs
 ) {

1850  
ˇ±uªEx¥essi⁄
<
I¡î«l
::
IsNŸEquÆTo
>–
rhs
 );

1853 
ídEx¥essi⁄
() {

1854 
boﬁ
 
	gvÆue
 = 
m_lhs
 ? 
åue
 : 
Ál£
;

1855 
	gm_rb


1856 .
£tLhs
–
C©ch
::
toSåög
–
vÆue
 ) )

1857 .
£tResu…Ty≥
–
vÆue
 )

1858 .
ídEx¥essi⁄
();

1863 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 + ( 
RhsT
 const& );

1864 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 - ( 
RhsT
 const& );

1865 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 / ( 
RhsT
 const& );

1866 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 * ( 
RhsT
 const& );

1867 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 && ( 
RhsT
 const& );

1868 
	gãm∂©e
<
ty≥«me
 
	gRhsT
> 
	gSTATIC_ASSERT_Ex¥essi⁄_Too_Com∂ex_PÀa£_Rewrôe_As_Bö¨y_Com∑ris⁄
& 
	g›î©‹
 || ( 
RhsT
 const& );

1870 
	g¥iv©e
:

1871 
ãm∂©e
<
I¡î«l
::
O≥øt‹
 
Op
, 
ty≥«me
 
	gRhsT
>

1872 
	gResu…Buûdî
& 
ˇ±uªEx¥essi⁄
–
RhsT
 c⁄°& 
rhs
 ) {

1873  
	gm_rb


1874 .
£tResu…Ty≥
–
I¡î«l
::
com∑ª
<
Op
>–
m_lhs
, 
rhs
 ) )

1875 .
£tLhs
–
C©ch
::
toSåög
–
m_lhs
 ) )

1876 .
£tRhs
–
C©ch
::
toSåög
–
rhs
 ) )

1877 .
£tOp
–
I¡î«l
::
O≥øt‹Tøôs
<
Op
>::
gëName
() );

1880 
	g¥iv©e
:

1881 
Resu…Buûdî
& 
m_rb
;

1882 
T
 
	gm_lhs
;

1888 
«me•a˚
 
	gC©ch
 {

1890 
	gãm∂©e
<
ty≥«me
 
	gT
>

1891 
ölöe
 
	gEx¥essi⁄Lhs
<
T
 c⁄°&> 
	gResu…Buûdî
::
›î©‹
 <–T c⁄°& 
›î™d
 ) {

1892  
Ex¥essi⁄Lhs
<
T
 c⁄°&>–*
this
, 
›î™d
 );

1895 
ölöe
 
	gEx¥essi⁄Lhs
<
	gboﬁ
> 
	gResu…Buûdî
::
›î©‹
 <–
boﬁ
 
vÆue
 ) {

1896  
Ex¥essi⁄Lhs
<
boﬁ
>–*
this
, 
vÆue
 );

1902 
	#TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED


	)

1904 
	~<°rög
>

1906 
«me•a˚
 
	gC©ch
 {

1908 
	sMesßgeInfo
 {

1909 
MesßgeInfo
–
°d
::
°rög
 c⁄°& 
_ma¸oName
,

1910 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

1911 
Resu…Was
::
OfTy≥
 
_ty≥
 );

1913 
	g°d
::
°rög
 
ma¸oName
;

1914 
Sour˚LöeInfo
 
	glöeInfo
;

1915 
	gResu…Was
::
OfTy≥
 
ty≥
;

1916 
	g°d
::
°rög
 
mesßge
;

1917 
	g£quí˚
;

1919 
boﬁ
 
	g›î©‹
 =–
MesßgeInfo
 c⁄°& 
Ÿhî
 ) const {

1920  
£quí˚
 =
Ÿhî
.sequence;

1922 
boﬁ
 
	g›î©‹
 < ( 
MesßgeInfo
 c⁄°& 
	gŸhî
 ) const {

1923  
	g£quí˚
 < 
	gŸhî
.sequence;

1925 
	g¥iv©e
:

1926 
globÆCou¡
;

1929 
	sMesßgeBuûdî
 {

1930 
MesßgeBuûdî
–
°d
::
°rög
 c⁄°& 
ma¸oName
,

1931 
Sour˚LöeInfo
 c⁄°& 
löeInfo
,

1932 
Resu…Was
::
OfTy≥
 
ty≥
 )

1933 : 
m_öfo
–
ma¸oName
, 
löeInfo
, 
ty≥
 )

1936 
	gãm∂©e
<
ty≥«me
 
	gT
>

1937 
	gMesßgeBuûdî
& 
	g›î©‹
 << ( 
T
 c⁄°& 
	gvÆue
 ) {

1938 
	gm_°ªam
 << 
	gvÆue
;

1939  *
	gthis
;

1942 
MesßgeInfo
 
	gm_öfo
;

1943 
	g°d
::
o°rög°ªam
 
m_°ªam
;

1946 ˛as†
	cSc›edMesßge
 {

1947 
	gpublic
:

1948 
Sc›edMesßge
–
MesßgeBuûdî
 c⁄°& 
buûdî
 );

1949 
Sc›edMesßge
–Sc›edMesßgêc⁄°& 
Ÿhî
 );

1950 ~
Sc›edMesßge
();

1952 
MesßgeInfo
 
	gm_öfo
;

1958 
	#TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED


	)

1960 
	~<°rög
>

1962 
«me•a˚
 
	gC©ch
 {

1964 
˛ass
 
	gTe°Ca£
;

1965 
˛ass
 
	gAs£πi⁄Resu…
;

1966 
	gAs£πi⁄Info
;

1967 
	gSe˘i⁄Info
;

1968 
	gSe˘i⁄EndInfo
;

1969 
	gMesßgeInfo
;

1970 
˛ass
 
	gSc›edMesßgeBuûdî
;

1971 
	gCou¡s
;

1973 
	sIResu…C≠tuª
 {

1975 
	gvútuÆ
 ~
IResu…C≠tuª
();

1977 
vútuÆ
 
as£πi⁄Ended
–
As£πi⁄Resu…
 c⁄°& 
ªsu…
 ) = 0;

1978 
vútuÆ
 
boﬁ
 
£˘i⁄Sèπed
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
,

1979 
Cou¡s
& 
as£πi⁄s
 ) = 0;

1980 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) = 0;

1981 
vútuÆ
 
£˘i⁄EndedE¨ly
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) = 0;

1982 
vútuÆ
 
pushSc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) = 0;

1983 
vútuÆ
 
p›Sc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) = 0;

1985 
vútuÆ
 
	g°d
::
°rög
 
gëCuºítTe°Name
() const = 0;

1986 
vútuÆ
 c⁄° 
As£πi⁄Resu…
* 
gëLa°Resu…
() const = 0;

1988 
vútuÆ
 
h™dÀF©ÆEº‹C⁄dôi⁄
–
°d
::
°rög
 c⁄°& 
mesßge
 ) = 0;

1991 
	gIResu…C≠tuª
& 
gëResu…C≠tuª
();

1995 
	#TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED


	)

1998 
	#TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED


	)

2000 #i‡
deföed
(
__MAC_OS_X_VERSION_MIN_REQUIRED
)

2001 
	#CATCH_PLATFORM_MAC


	)

2002 #ñi‡ 
deföed
(
__IPHONE_OS_VERSION_MIN_REQUIRED
)

2003 
	#CATCH_PLATFORM_IPHONE


	)

2004 #ñi‡
deföed
(
WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
_WIN32
Ë|| deföed(
_MSC_VER
)

2005 
	#CATCH_PLATFORM_WINDOWS


	)

2008 
	~<°rög
>

2010 
«me•a˚
 
	gC©ch
{

2012 
boﬁ
 
isDebuggîA˘ive
();

2013 
wrôeToDebugC⁄sﬁe
–
°d
::
°rög
 c⁄°& 
ãxt
 );

2016 #ifde‡
CATCH_PLATFORM_MAC


2020 #ifde‡
DEBUG


2021 #i‡
deföed
(
__µc64__
Ë|| deföed(
__µc__
)

2022 
	#CATCH_BREAK_INTO_DEBUGGER
() \

2023 if–
C©ch
::
	`isDebuggîA˘ive
() ) { \

2024 
	`__asm__
("liÑ0, 20\nsc\nnop\nliÑ0, 37\nliÑ4, 2\nsc\nnop\n" \

2026 }

	)

2028 
	#CATCH_BREAK_INTO_DEBUGGER
(Ëif–
C©ch
::
	`isDebuggîA˘ive
(ËË{
	`__asm__
("öà$3\n" : : );}

	)

2032 #ñi‡
deföed
(
_MSC_VER
)

2033 
	#CATCH_BREAK_INTO_DEBUGGER
(Ëif–
C©ch
::
	`isDebuggîA˘ive
(ËË{ 
	`__debugbªak
(); }

	)

2034 #ñi‡
deföed
(
__MINGW32__
)

2035 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`DebugBªak
();

2036 
	#CATCH_BREAK_INTO_DEBUGGER
(Ëif–
C©ch
::
	`isDebuggîA˘ive
(ËË{ 
	`DebugBªak
(); 
	}

	)
}

2039 #i‚de‡
CATCH_BREAK_INTO_DEBUGGER


2040 
	#CATCH_BREAK_INTO_DEBUGGER
(Ë
C©ch
::
	`ÆwaysTrue
();

	)

2044 
	#TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED


	)

2046 
«me•a˚
 
	gC©ch
 {

2047 
˛ass
 
	gTe°Ca£
;

2049 
	sIRu¬î
 {

2050 
	gvútuÆ
 ~
IRu¬î
();

2051 
vútuÆ
 
boﬁ
 
ab‹tög
() const = 0;

2060 
	#INTERNAL_CATCH_REACT
–
ªsu…Buûdî
 ) \

2061 if–
ªsu…Buûdî
.
	`shouldDebugBªak
(ËË
	`CATCH_BREAK_INTO_DEBUGGER
(); \

2062 
ªsu…Buûdî
.
	`ªa˘
();

	)

2065 
	#INTERNAL_CATCH_TEST
–
ex¥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ) \

2067 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, #ex¥, 
ªsu…Di•osôi⁄
 ); \

2068 
åy
 { \

2069 
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
 \

2070 –
__ˇtchResu…
 <
ex¥
 ).
	`ídEx¥essi⁄
(); \

2072 
	`ˇtch
( ... ) { \

2073 
__ˇtchResu…
.
	`u£A˘iveEx˚±i⁄
–
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
 ); \

2075 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2076 }  
C©ch
::
	`isTrue
–
Ál£
 && !!(
ex¥
) ) )

2077 

	)

2079 
	#INTERNAL_CATCH_IF
–
ex¥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ) \

2080 
	`INTERNAL_CATCH_TEST
–
ex¥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ); \

2081 if–
C©ch
::
	`gëResu…C≠tuª
().
	`gëLa°Resu…
()->
	`suc˚eded
(Ë)

	)

2084 
	#INTERNAL_CATCH_ELSE
–
ex¥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ) \

2085 
	`INTERNAL_CATCH_TEST
–
ex¥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ); \

2086 if–!
C©ch
::
	`gëResu…C≠tuª
().
	`gëLa°Resu…
()->
	`suc˚eded
(Ë)

	)

2089 
	#INTERNAL_CATCH_NO_THROW
–
ex¥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ) \

2091 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, #ex¥, 
ªsu…Di•osôi⁄
 ); \

2092 
åy
 { \

2093 
ex¥
; \

2094 
__ˇtchResu…
.
	`ˇ±uªResu…
–
C©ch
::
Resu…Was
::
Ok
 ); \

2096 
	`ˇtch
( ... ) { \

2097 
__ˇtchResu…
.
	`u£A˘iveEx˚±i⁄
–
ªsu…Di•osôi⁄
 ); \

2099 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2100 }  
C©ch
::
	`ÆwaysFÆ£
(Ë)

	)

2103 
	#INTERNAL_CATCH_THROWS
–
ex¥
, 
ªsu…Di•osôi⁄
, 
m©chî
, 
ma¸oName
 ) \

2105 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, #ex¥, 
ªsu…Di•osôi⁄
, #matcher ); \

2106 if–
__ˇtchResu…
.
	`ÆlowThrows
() ) \

2107 
åy
 { \

2108 
ex¥
; \

2109 
__ˇtchResu…
.
	`ˇ±uªResu…
–
C©ch
::
Resu…Was
::
Did¡ThrowEx˚±i⁄
 ); \

2111 
	`ˇtch
( ... ) { \

2112 
__ˇtchResu…
.
	`ˇ±uªEx≥˘edEx˚±i⁄
–
m©chî
 ); \

2115 
__ˇtchResu…
.
	`ˇ±uªResu…
–
C©ch
::
Resu…Was
::
Ok
 ); \

2116 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2117 }  
C©ch
::
	`ÆwaysFÆ£
(Ë)

	)

2120 
	#INTERNAL_CATCH_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ) \

2122 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, #ex¥, 
ªsu…Di•osôi⁄
 ); \

2123 if–
__ˇtchResu…
.
	`ÆlowThrows
() ) \

2124 
åy
 { \

2125 
ex¥
; \

2126 
__ˇtchResu…
.
	`ˇ±uªResu…
–
C©ch
::
Resu…Was
::
Did¡ThrowEx˚±i⁄
 ); \

2128 
	`ˇtch
–
ex˚±i⁄Ty≥
 ) { \

2129 
__ˇtchResu…
.
	`ˇ±uªResu…
–
C©ch
::
Resu…Was
::
Ok
 ); \

2131 
	`ˇtch
( ... ) { \

2132 
__ˇtchResu…
.
	`u£A˘iveEx˚±i⁄
–
ªsu…Di•osôi⁄
 ); \

2135 
__ˇtchResu…
.
	`ˇ±uªResu…
–
C©ch
::
Resu…Was
::
Ok
 ); \

2136 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2137 }  
C©ch
::
	`ÆwaysFÆ£
(Ë)

	)

2140 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


2141 
	#INTERNAL_CATCH_MSG
–
mesßgeTy≥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
, ... ) \

2143 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, "", 
ªsu…Di•osôi⁄
 ); \

2144 
__ˇtchResu…
 << 
__VA_ARGS__
 + ::
C©ch
::
	`SåómEndSt›
(); \

2145 
__ˇtchResu…
.
	`ˇ±uªResu…
–
mesßgeTy≥
 ); \

2146 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2147 }  
C©ch
::
	`ÆwaysFÆ£
(Ë)

	)

2149 
	#INTERNAL_CATCH_MSG
–
mesßgeTy≥
, 
ªsu…Di•osôi⁄
, 
ma¸oName
, 
log
 ) \

2151 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, "", 
ªsu…Di•osôi⁄
 ); \

2152 
__ˇtchResu…
 << 
log
 + ::
C©ch
::
	`SåómEndSt›
(); \

2153 
__ˇtchResu…
.
	`ˇ±uªResu…
–
mesßgeTy≥
 ); \

2154 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2155 }  
C©ch
::
	`ÆwaysFÆ£
(Ë)

	)

2159 
	#INTERNAL_CATCH_INFO
–
log
, 
ma¸oName
 ) \

2160 
C©ch
::
Sc›edMesßge
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
sc›edMesßge
 ) = C©ch::
	`MesßgeBuûdî
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
Resu…Was
::
Info
 ) << 
log
;

	)

2163 
	#INTERNAL_CHECK_THAT
–
¨g
, 
m©chî
, 
ªsu…Di•osôi⁄
, 
ma¸oName
 ) \

2165 
C©ch
::
Resu…Buûdî
 
	`__ˇtchResu…
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, #¨g ", " #m©chî, 
ªsu…Di•osôi⁄
 ); \

2166 
åy
 { \

2167 
°d
::
°rög
 
m©chîAsSåög
 = (
m©chî
).
	`toSåög
(); \

2168 
__ˇtchResu…
 \

2169 .
	`£tLhs
–
C©ch
::
	`toSåög
–
¨g
 ) ) \

2170 .
	`£tRhs
–
m©chîAsSåög
 =
C©ch
::
Dëaû
::
u≈röèbÀSåög
 ? #matcher : matcherAsString ) \

2171 .
	`£tOp
( "matches" ) \

2172 .
	`£tResu…Ty≥
–(
m©chî
).
	`m©ch
–
¨g
 ) ); \

2173 
__ˇtchResu…
.
	`ˇ±uªEx¥essi⁄
(); \

2174 } 
	`ˇtch
( ... ) { \

2175 
__ˇtchResu…
.
	`u£A˘iveEx˚±i⁄
–
ªsu…Di•osôi⁄
 | 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 ); \

2177 
	`INTERNAL_CATCH_REACT
–
__ˇtchResu…
 ) \

2178 }  
C©ch
::
	`ÆwaysFÆ£
(Ë)

	)

2181 
	#TWOBLUECUBES_CATCH_SECTION_H_INCLUDED


	)

2184 
	#TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED


	)

2187 
	#TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED


	)

2189 
	~<c°ddef
>

2191 
«me•a˚
 
	gC©ch
 {

2193 
	sCou¡s
 {

2194 
Cou¡s
(Ë: 
∑s£d
–0 ), 
Áûed
–0 ), 
ÁûedButOk
( 0 ) {}

2196 
Cou¡s
 
	g›î©‹
 - ( Cou¡†c⁄°& 
	gŸhî
 ) const {

2197 
Cou¡s
 
	gdiff
;

2198 
	gdiff
.
	g∑s£d
 = 
∑s£d
 - 
Ÿhî
.passed;

2199 
	gdiff
.
	gÁûed
 = 
Áûed
 - 
Ÿhî
.failed;

2200 
	gdiff
.
	gÁûedButOk
 = 
ÁûedButOk
 - 
Ÿhî
.failedButOk;

2201  
	gdiff
;

2203 
	gCou¡s
& 
	g›î©‹
 +–
Cou¡s
 c⁄°& 
Ÿhî
 ) {

2204 
∑s£d
 +
Ÿhî
.passed;

2205 
	gÁûed
 +
Ÿhî
.
Áûed
;

2206 
	gÁûedButOk
 +
Ÿhî
.
ÁûedButOk
;

2207  *
	gthis
;

2210 
	g°d
::
size_t
 
tŸÆ
() const {

2211  
∑s£d
 + 
Áûed
 + 
ÁûedButOk
;

2213 
boﬁ
 
ÆlPas£d
() const {

2214  
	gÁûed
 =0 && 
ÁûedButOk
 == 0;

2216 
boﬁ
 
ÆlOk
() const {

2217  
	gÁûed
 == 0;

2220 
	g°d
::
size_t
 
∑s£d
;

2221 
	g°d
::
size_t
 
Áûed
;

2222 
	g°d
::
size_t
 
ÁûedButOk
;

2225 
	sTŸÆs
 {

2227 
TŸÆs
 
	g›î©‹
 - ( TŸÆ†c⁄°& 
	gŸhî
 ) const {

2228 
TŸÆs
 
	gdiff
;

2229 
	gdiff
.
	gas£πi⁄s
 = 
as£πi⁄s
 - 
Ÿhî
.assertions;

2230 
	gdiff
.
	gã°Ca£s
 = 
ã°Ca£s
 - 
Ÿhî
.testCases;

2231  
	gdiff
;

2234 
TŸÆs
 
dñè
–TŸÆ†c⁄°& 
¥evTŸÆs
 ) const {

2235 
TŸÆs
 
	gdiff
 = *
this
 - 
¥evTŸÆs
;

2236 if–
	gdiff
.
	gas£πi⁄s
.
	gÁûed
 > 0 )

2237 ++
	gdiff
.
	gã°Ca£s
.
	gÁûed
;

2238 if–
	gdiff
.
	gas£πi⁄s
.
	gÁûedButOk
 > 0 )

2239 ++
	gdiff
.
	gã°Ca£s
.
	gÁûedButOk
;

2241 ++
	gdiff
.
	gã°Ca£s
.
	g∑s£d
;

2242  
	gdiff
;

2245 
	gTŸÆs
& 
	g›î©‹
 +–
TŸÆs
 c⁄°& 
Ÿhî
 ) {

2246 
as£πi⁄s
 +
Ÿhî
.assertions;

2247 
	gã°Ca£s
 +
Ÿhî
.
ã°Ca£s
;

2248  *
	gthis
;

2251 
Cou¡s
 
	gas£πi⁄s
;

2252 
Cou¡s
 
	gã°Ca£s
;

2256 
«me•a˚
 
	gC©ch
 {

2258 
	sSe˘i⁄Info
 {

2259 
	gSe˘i⁄Info


2260 –
Sour˚LöeInfo
 c⁄°& 
	g_löeInfo
,

2261 
	g°d
::
°rög
 c⁄°& 
_«me
,

2262 
	g°d
::
°rög
 c⁄°& 
_des¸ùti⁄
 = 
°d
::string() );

2264 
	g°d
::
°rög
 
«me
;

2265 
	g°d
::
°rög
 
des¸ùti⁄
;

2266 
Sour˚LöeInfo
 
	glöeInfo
;

2269 
	sSe˘i⁄EndInfo
 {

2270 
Se˘i⁄EndInfo
–
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
, 
Cou¡s
 c⁄°& 
_¥evAs£πi⁄s
, 
_duøti⁄InSec⁄ds
 )

2271 : 
£˘i⁄Info
–
_£˘i⁄Info
 ), 
¥evAs£πi⁄s
–
_¥evAs£πi⁄s
 ), 
duøti⁄InSec⁄ds
–
_duøti⁄InSec⁄ds
 )

2274 
Se˘i⁄Info
 
	g£˘i⁄Info
;

2275 
Cou¡s
 
	g¥evAs£πi⁄s
;

2276 
	gduøti⁄InSec⁄ds
;

2282 
	#TWOBLUECUBES_CATCH_TIMER_H_INCLUDED


	)

2284 #ifde‡
CATCH_PLATFORM_WINDOWS


2285 
	tuöt64_t
;

2287 
	~<°döt.h
>

2290 
«me•a˚
 
	gC©ch
 {

2292 ˛as†
	cTimî
 {

2293 
	gpublic
:

2294 
Timî
(Ë: 
m_ticks
( 0 ) {}

2295 
°¨t
();

2296 
gëEœp£dMi¸o£c⁄ds
() const;

2297 
gëEœp£dMûli£c⁄ds
() const;

2298 
gëEœp£dSec⁄ds
() const;

2300 
	g¥iv©e
:

2301 
uöt64_t
 
m_ticks
;

2306 
	~<°rög
>

2308 
«me•a˚
 
	gC©ch
 {

2310 ˛as†
	cSe˘i⁄
 : 
N⁄C›yabÀ
 {

2311 
public
:

2312 
Se˘i⁄
–
Se˘i⁄Info
 c⁄°& 
öfo
 );

2313 ~
Se˘i⁄
();

2316 
›î©‹
 
boﬁ
() const;

2318 
	g¥iv©e
:

2319 
Se˘i⁄Info
 
m_öfo
;

2321 
	g°d
::
°rög
 
m_«me
;

2322 
Cou¡s
 
	gm_as£πi⁄s
;

2323 
boﬁ
 
	gm_£˘i⁄In˛uded
;

2324 
Timî
 
	gm_timî
;

2329 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


2330 
	#INTERNAL_CATCH_SECTION
( ... ) \

2331 if–
C©ch
::
Se˘i⁄
 c⁄°& 
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Se˘i⁄
 ) = C©ch::
	`Se˘i⁄Info
–
CATCH_INTERNAL_LINEINFO
, 
__VA_ARGS__
 ) )

	)

2333 
	#INTERNAL_CATCH_SECTION
–
«me
, 
desc
 ) \

2334 if–
C©ch
::
Se˘i⁄
 c⁄°& 
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Se˘i⁄
 ) = C©ch::
	`Se˘i⁄Info
–
CATCH_INTERNAL_LINEINFO
, 
«me
, 
desc
 ) )

	)

2338 
	#TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED


	)

2340 
	~<ôî©‹
>

2341 
	~<ve˘‹
>

2342 
	~<°rög
>

2343 
	~<°dlib.h
>

2345 
«me•a˚
 
	gC©ch
 {

2347 
	gãm∂©e
<
ty≥«me
 
	gT
>

2348 
	sIGíî©‹
 {

2349 
	gvútuÆ
 ~
IGíî©‹
() {}

2350 
vútuÆ
 
T
 
gëVÆue
–
°d
::
size_t
 
ödex
 ) const = 0;

2351 
vútuÆ
 
	g°d
::
size_t
 
size
 () const = 0;

2354 
	gãm∂©e
<
ty≥«me
 
	gT
>

2355 
˛ass
 
	gBëwìnGíî©‹
 : 
public
 
IGíî©‹
<
T
> {

2356 
public
:

2357 
BëwìnGíî©‹
–
T
 
‰om
, T 
to
 ) : 
m_‰om
–‰om ), 
m_to
(Åo ){}

2359 
vútuÆ
 
T
 
gëVÆue
–
°d
::
size_t
 
ödex
 ) const {

2360  
m_‰om
+
°©ic_ˇ°
<>–
ödex
 );

2363 
vútuÆ
 
	g°d
::
size_t
 
size
() const {

2364  
°©ic_ˇ°
<
°d
::
size_t
>–1+
m_to
-
m_‰om
 );

2367 
	g¥iv©e
:

2369 
T
 
m_‰om
;

2370 
T
 
	gm_to
;

2373 
	gãm∂©e
<
ty≥«me
 
	gT
>

2374 
˛ass
 
	gVÆuesGíî©‹
 : 
public
 
IGíî©‹
<
T
> {

2375 
public
:

2376 
VÆuesGíî©‹
(){}

2378 
add
–
T
 
vÆue
 ) {

2379 
m_vÆues
.
push_back
–
vÆue
 );

2382 
vútuÆ
 
T
 
gëVÆue
–
°d
::
size_t
 
ödex
 ) const {

2383  
m_vÆues
[
ödex
];

2386 
vútuÆ
 
	g°d
::
size_t
 
size
() const {

2387  
m_vÆues
.
size
();

2390 
	g¥iv©e
:

2391 
°d
::
ve˘‹
<
T
> 
m_vÆues
;

2394 
	gãm∂©e
<
ty≥«me
 
	gT
>

2395 ˛as†
	cComposôeGíî©‹
 {

2396 
	gpublic
:

2397 
ComposôeGíî©‹
(Ë: 
m_tŸÆSize
( 0 ) {}

2400 
ComposôeGíî©‹
–ComposôeGíî©‹& 
Ÿhî
 )

2401 : 
m_fûeInfo
–
Ÿhî
.m_fileInfo ),

2402 
m_tŸÆSize
( 0 )

2404 
move
–
Ÿhî
 );

2407 
	gComposôeGíî©‹
& 
£tFûeInfo
–c⁄° * 
fûeInfo
 ) {

2408 
	gm_fûeInfo
 = 
fûeInfo
;

2409  *
	gthis
;

2412 ~
ComposôeGíî©‹
() {

2413 
dñëeAŒ
–
m_compo£d
 );

2416 
›î©‹
 
T
 () const {

2417 
size_t
 
	govîÆlIndex
 = 
gëCuºítC⁄ãxt
().
gëGíî©‹Index
–
m_fûeInfo
, 
m_tŸÆSize
 );

2419 
ty≥«me
 
	g°d
::
ve˘‹
<c⁄° 
IGíî©‹
<
T
>*>::
c⁄°_ôî©‹
 
ô
 = 
m_compo£d
.
begö
();

2420 
ty≥«me
 
	g°d
::
ve˘‹
<c⁄° 
IGíî©‹
<
T
>*>::
c⁄°_ôî©‹
 
ôEnd
 = 
m_compo£d
.
íd
();

2421  
size_t
 
	gödex
 = 0; 
	gô
 !
ôEnd
; ++it )

2423 c⁄° 
	gIGíî©‹
<
	gT
>* 
	ggíî©‹
 = *
ô
;

2424 if–
	govîÆlIndex
 >
ödex
 && 
ovîÆlIndex
 < index + 
gíî©‹
->
size
() )

2426  
gíî©‹
->
gëVÆue
–
ovîÆlIndex
-
ödex
 );

2428 
	gödex
 +
gíî©‹
->
size
();

2430 
CATCH_INTERNAL_ERROR
( "IndexedÖastÉnd of generatedÑange" );

2431  
T
();

2434 
add
–c⁄° 
IGíî©‹
<
T
>* 
gíî©‹
 ) {

2435 
	gm_tŸÆSize
 +
gíî©‹
->
size
();

2436 
	gm_compo£d
.
push_back
–
gíî©‹
 );

2439 
	gComposôeGíî©‹
& 
thí
–
ComposôeGíî©‹
& 
Ÿhî
 ) {

2440 
move
–
Ÿhî
 );

2441  *
	gthis
;

2444 
	gComposôeGíî©‹
& 
thí
–
T
 
vÆue
 ) {

2445 
	gVÆuesGíî©‹
<
	gT
>* 
	gvÆuesGí
 = 
√w
 
VÆuesGíî©‹
<
T
>();

2446 
	gvÆuesGí
->
add
–
vÆue
 );

2447 
add
–
vÆuesGí
 );

2448  *
	gthis
;

2451 
	g¥iv©e
:

2453 
move
–
ComposôeGíî©‹
& 
Ÿhî
 ) {

2454 
°d
::
c›y
–
Ÿhî
.
m_compo£d
.
begö
(), othî.m_compo£d.
íd
(), std::
back_ö£πî
( m_composed ) );

2455 
	gm_tŸÆSize
 +
Ÿhî
.
m_tŸÆSize
;

2456 
	gŸhî
.
	gm_compo£d
.
˛ór
();

2459 
	g°d
::
ve˘‹
<c⁄° 
IGíî©‹
<
T
>*> 
m_compo£d
;

2460 
	g°d
::
°rög
 
m_fûeInfo
;

2461 
size_t
 
	gm_tŸÆSize
;

2464 
«me•a˚
 
	gGíî©‹s


2466 
	gãm∂©e
<
ty≥«me
 
	gT
>

2467 
	gComposôeGíî©‹
<
	gT
> 
bëwìn
–
T
 
‰om
, T 
to
 ) {

2468 
	gComposôeGíî©‹
<
	gT
> 
	ggíî©‹s
;

2469 
	ggíî©‹s
.
add
–
√w
 
BëwìnGíî©‹
<
T
>–
‰om
, 
to
 ) );

2470  
	ggíî©‹s
;

2473 
	gãm∂©e
<
ty≥«me
 
	gT
>

2474 
	gComposôeGíî©‹
<
	gT
> 
vÆues
–
T
 
vÆ1
, T 
vÆ2
 ) {

2475 
	gComposôeGíî©‹
<
	gT
> 
	ggíî©‹s
;

2476 
	gVÆuesGíî©‹
<
	gT
>* 
	gvÆuesGí
 = 
√w
 
VÆuesGíî©‹
<
T
>();

2477 
	gvÆuesGí
->
add
–
vÆ1
 );

2478 
	gvÆuesGí
->
add
–
vÆ2
 );

2479 
	ggíî©‹s
.
add
–
vÆuesGí
 );

2480  
	ggíî©‹s
;

2483 
	gãm∂©e
<
ty≥«me
 
	gT
>

2484 
	gComposôeGíî©‹
<
	gT
> 
vÆues
–
T
 
vÆ1
, T 
vÆ2
, T 
vÆ3
 ){

2485 
	gComposôeGíî©‹
<
	gT
> 
	ggíî©‹s
;

2486 
	gVÆuesGíî©‹
<
	gT
>* 
	gvÆuesGí
 = 
√w
 
VÆuesGíî©‹
<
T
>();

2487 
	gvÆuesGí
->
add
–
vÆ1
 );

2488 
	gvÆuesGí
->
add
–
vÆ2
 );

2489 
	gvÆuesGí
->
add
–
vÆ3
 );

2490 
	ggíî©‹s
.
add
–
vÆuesGí
 );

2491  
	ggíî©‹s
;

2494 
	gãm∂©e
<
ty≥«me
 
	gT
>

2495 
	gComposôeGíî©‹
<
	gT
> 
vÆues
–
T
 
vÆ1
, T 
vÆ2
, T 
vÆ3
, T 
vÆ4
 ) {

2496 
	gComposôeGíî©‹
<
	gT
> 
	ggíî©‹s
;

2497 
	gVÆuesGíî©‹
<
	gT
>* 
	gvÆuesGí
 = 
√w
 
VÆuesGíî©‹
<
T
>();

2498 
	gvÆuesGí
->
add
–
vÆ1
 );

2499 
	gvÆuesGí
->
add
–
vÆ2
 );

2500 
	gvÆuesGí
->
add
–
vÆ3
 );

2501 
	gvÆuesGí
->
add
–
vÆ4
 );

2502 
	ggíî©‹s
.
add
–
vÆuesGí
 );

2503  
	ggíî©‹s
;

2508 
usög
 
«me•a˚
 
	gGíî©‹s
;

2512 
	#INTERNAL_CATCH_LINESTR2
–
löe
 ) #löe

	)

2513 
	#INTERNAL_CATCH_LINESTR
–
löe
 ) 
	`INTERNAL_CATCH_LINESTR2
–löê)

	)

2515 
	#INTERNAL_CATCH_GENERATE
–
ex¥
 )Éx¥.
	`£tFûeInfo
–
__FILE__
 "(" 
	`INTERNAL_CATCH_LINESTR
–
__LINE__
 ) ")" )

	)

2518 
	#TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED


	)

2520 
	~<°rög
>

2521 
	~<ve˘‹
>

2524 
	#TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED


	)

2526 
	~<°rög
>

2528 
«me•a˚
 
	gC©ch
 {

2530 
˛ass
 
	gTe°Ca£
;

2531 
	gITe°Ca£Regi°ry
;

2532 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
;

2533 
	gIEx˚±i⁄Tøn¶©‹
;

2534 
	gIRï‹ãrRegi°ry
;

2535 
	gIRï‹ãrFa˘‹y
;

2537 
	sIRegi°ryHub
 {

2538 
	gvútuÆ
 ~
IRegi°ryHub
();

2540 
vútuÆ
 
IRï‹ãrRegi°ry
 c⁄°& 
gëRï‹ãrRegi°ry
() const = 0;

2541 
vútuÆ
 
ITe°Ca£Regi°ry
 c⁄°& 
gëTe°Ca£Regi°ry
() const = 0;

2542 
vútuÆ
 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
& 
gëEx˚±i⁄Tøn¶©‹Regi°ry
() = 0;

2545 
	sIMuèbÀRegi°ryHub
 {

2546 
	gvútuÆ
 ~
IMuèbÀRegi°ryHub
();

2547 
vútuÆ
 
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
På
<
IRï‹ãrFa˘‹y
> c⁄°& 
Á˘‹y
 ) = 0;

2548 
vútuÆ
 
ªgi°îLi°íî
–
På
<
IRï‹ãrFa˘‹y
> c⁄°& 
Á˘‹y
 ) = 0;

2549 
vútuÆ
 
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Info
 ) = 0;

2550 
vútuÆ
 
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 ) = 0;

2553 
	gIRegi°ryHub
& 
gëRegi°ryHub
();

2554 
	gIMuèbÀRegi°ryHub
& 
gëMuèbÀRegi°ryHub
();

2555 
˛ónUp
();

2556 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
();

2560 
«me•a˚
 
	gC©ch
 {

2562 
	g°d
::
	t°rög
(*
	tex˚±i⁄Tøn¶©eFun˘i⁄
)();

2564 
	gIEx˚±i⁄Tøn¶©‹
;

2565 
	g°d
::
	tve˘‹
<c⁄° 
	tIEx˚±i⁄Tøn¶©‹
*> 
	tEx˚±i⁄Tøn¶©‹s
;

2567 
	sIEx˚±i⁄Tøn¶©‹
 {

2568 
	gvútuÆ
 ~
IEx˚±i⁄Tøn¶©‹
();

2569 
vútuÆ
 
	g°d
::
°rög
 
å™¶©e
–
Ex˚±i⁄Tøn¶©‹s
::
c⁄°_ôî©‹
 
ô
, Ex˚±i⁄Tøn¶©‹s::c⁄°_ôî©‹ 
ôEnd
 ) const = 0;

2572 
	sIEx˚±i⁄Tøn¶©‹Regi°ry
 {

2573 
	gvútuÆ
 ~
IEx˚±i⁄Tøn¶©‹Regi°ry
();

2575 
vútuÆ
 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
() const = 0;

2578 ˛as†
	cEx˚±i⁄Tøn¶©‹Regi°ør
 {

2579 
	gãm∂©e
<
ty≥«me
 
	gT
>

2580 ˛as†
	cEx˚±i⁄Tøn¶©‹
 : 
public
 
IEx˚±i⁄Tøn¶©‹
 {

2581 
public
:

2583 
Ex˚±i⁄Tøn¶©‹
–
°d
::
°rög
(*
å™¶©eFun˘i⁄
)–
T
& ) )

2584 : 
m_å™¶©eFun˘i⁄
–
å™¶©eFun˘i⁄
 )

2587 
vútuÆ
 
°d
::
°rög
 
å™¶©e
–
Ex˚±i⁄Tøn¶©‹s
::
c⁄°_ôî©‹
 
ô
, Ex˚±i⁄Tøn¶©‹s::c⁄°_ôî©‹ 
ôEnd
 ) c⁄° 
CATCH_OVERRIDE
 {

2588 
åy
 {

2589 if–
ô
 =
ôEnd
 )

2590 
throw
;

2592  (*
	gô
)->
å™¶©e
–
ô
+1, 
ôEnd
 );

2594 
ˇtch
–
T
& 
ex
 ) {

2595  
m_å™¶©eFun˘i⁄
–
ex
 );

2599 
	g¥Ÿe˘ed
:

2600 
°d
::
°rög
(*
m_å™¶©eFun˘i⁄
)–
T
& );

2603 
	gpublic
:

2604 
ãm∂©e
<
ty≥«me
 
T
>

2605 
Ex˚±i⁄Tøn¶©‹Regi°ør
–
°d
::
°rög
(*
å™¶©eFun˘i⁄
)–
T
& ) ) {

2606 
gëMuèbÀRegi°ryHub
().
ªgi°îTøn¶©‹


2607 –
√w
 
Ex˚±i⁄Tøn¶©‹
<
T
>–
å™¶©eFun˘i⁄
 ) );

2613 
	#INTERNAL_CATCH_TRANSLATE_EXCEPTION2
–
å™¶©‹Name
, 
sig«tuª
 ) \

2614 
°d
::
°rög
 
	`å™¶©‹Name
–
sig«tuª
 ); \

2615 
«me•a˚
{ 
C©ch
::
Ex˚±i⁄Tøn¶©‹Regi°ør
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Ex˚±i⁄Regi°ør
 )–&
å™¶©‹Name
 ); }\

2616 
°d
::
°rög
 
	`å™¶©‹Name
–
sig«tuª
 )

	)

2618 
	#INTERNAL_CATCH_TRANSLATE_EXCEPTION
–
sig«tuª
 ) 
	`INTERNAL_CATCH_TRANSLATE_EXCEPTION2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Ex˚±i⁄Tøn¶©‹
 ), sig«tuª )

	)

2621 
	#TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED


	)

2623 
	~<cm©h
>

2624 
	~<limôs
>

2626 
«me•a˚
 
	gC©ch
 {

2627 
«me•a˚
 
	gDëaû
 {

2629 ˛as†
	cAµrox
 {

2630 
	gpublic
:

2631 
ex∂icô
 
Aµrox
 ( 
vÆue
 )

2632 : 
m_ïsû⁄
–
°d
::
numîic_limôs
<>::
ïsû⁄
()*100 ),

2633 
m_sˇÀ
( 1.0 ),

2634 
m_vÆue
–
vÆue
 )

2637 
Aµrox
–Aµrox c⁄°& 
Ÿhî
 )

2638 : 
m_ïsû⁄
–
Ÿhî
.m_epsilon ),

2639 
m_sˇÀ
–
Ÿhî
.m_scale ),

2640 
m_vÆue
–
Ÿhî
.m_value )

2643 
Aµrox
 
cu°om
() {

2644  
Aµrox
( 0 );

2647 
Aµrox
 
›î©‹
()–
	gvÆue
 ) {

2648 
Aµrox
 
≠¥ox
–
vÆue
 );

2649 
	g≠¥ox
.
ïsû⁄
–
m_ïsû⁄
 );

2650 
	g≠¥ox
.
sˇÀ
–
m_sˇÀ
 );

2651  
	g≠¥ox
;

2654 
‰õnd
 
boﬁ
 
	g›î©‹
 =–
lhs
, 
Aµrox
 c⁄°& 
	grhs
 ) {

2656  
Ábs
–
lhs
 - 
rhs
.
m_vÆue
 ) < 
	grhs
.
	gm_ïsû⁄
 * (rhs.
	gm_sˇÀ
 + (
	g°d
::
max
)( fabs(lhs), fabs(rhs.m_value) ) );

2659 
‰õnd
 
boﬁ
 
	g›î©‹
 =–
Aµrox
 c⁄°& 
lhs
, 
	grhs
 ) {

2660  
	g›î©‹
==–
rhs
, 
	glhs
 );

2663 
‰õnd
 
boﬁ
 
	g›î©‹
 !–
lhs
, 
Aµrox
 c⁄°& 
	grhs
 ) {

2664  !
	g›î©‹
==–
lhs
, 
	grhs
 );

2667 
‰õnd
 
boﬁ
 
	g›î©‹
 !–
Aµrox
 c⁄°& 
lhs
, 
	grhs
 ) {

2668  !
	g›î©‹
==–
rhs
, 
	glhs
 );

2671 
	gAµrox
& 
ïsû⁄
–
√wEpsû⁄
 ) {

2672 
	gm_ïsû⁄
 = 
√wEpsû⁄
;

2673  *
	gthis
;

2676 
	gAµrox
& 
sˇÀ
–
√wSˇÀ
 ) {

2677 
	gm_sˇÀ
 = 
√wSˇÀ
;

2678  *
	gthis
;

2681 
	g°d
::
°rög
 
toSåög
() const {

2682 
°d
::
o°rög°ªam
 
oss
;

2683 
	goss
 << "Aµrox–" << 
	gC©ch
::
toSåög
–
m_vÆue
 ) << " )";

2684  
	goss
.
°r
();

2687 
	g¥iv©e
:

2688 
m_ïsû⁄
;

2689 
	gm_sˇÀ
;

2690 
	gm_vÆue
;

2694 
	gãm∂©e
<>

2695 
ölöe
 
	g°d
::
°rög
 
toSåög
<
Dëaû
::
Aµrox
>–Dëaû::Aµrox c⁄°& 
vÆue
 ) {

2696  
vÆue
.
toSåög
();

2702 
	#TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED


	)

2705 
	#TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED


	)

2707 
	~<°rög
>

2709 
«me•a˚
 
	gC©ch
 {

2711 
	sTagAlüs
 {

2712 
TagAlüs
–
°d
::
°rög
 
_èg
, 
Sour˚LöeInfo
 
_löeInfo
 ) : 
èg
–_èg ), 
löeInfo
( _lineInfo ) {}

2714 
	g°d
::
°rög
 
èg
;

2715 
Sour˚LöeInfo
 
	glöeInfo
;

2718 
	sRegi°ørF‹TagAlü£s
 {

2719 
Regi°ørF‹TagAlü£s
–c⁄°* 
Æüs
, c⁄°* 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

2724 
	#CATCH_REGISTER_TAG_ALIAS
–
Æüs
, 
•ec
 ) 
«me•a˚
{ 
C©ch
::
Regi°ørF‹TagAlü£s
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
AutoRegi°îTagAlüs
 )–Æüs, s≥c, 
CATCH_INTERNAL_LINEINFO
 ); }

	)

2726 
	#TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED


	)

2728 
«me•a˚
 
	gC©ch
 {

2731 
	gãm∂©e
<
ty≥«me
 
	gT
>

2732 ˛as†
	cO±i⁄
 {

2733 
	gpublic
:

2734 
O±i⁄
(Ë: 
nuŒabÀVÆue
–
CATCH_NULL
 ) {}

2735 
O±i⁄
–
T
 c⁄°& 
_vÆue
 )

2736 : 
nuŒabÀVÆue
–
√w
–
°‹age
 ) 
T
–
_vÆue
 ) )

2738 
O±i⁄
–O±i⁄ c⁄°& 
_Ÿhî
 )

2739 : 
nuŒabÀVÆue
–
_Ÿhî
 ? 
√w
–
°‹age
 ) 
T
–*_Ÿhî ) : 
CATCH_NULL
 )

2742 ~
O±i⁄
() {

2743 
ª£t
();

2746 
	gO±i⁄
& 
	g›î©‹
–
O±i⁄
 c⁄°& 
_Ÿhî
 ) {

2747 if–&
_Ÿhî
 !
this
 ) {

2748 
ª£t
();

2749 if–
	g_Ÿhî
 )

2750 
	gnuŒabÀVÆue
 = 
√w
–
°‹age
 ) 
T
–*
_Ÿhî
 );

2752  *
	gthis
;

2754 
	gO±i⁄
& 
	g›î©‹
 = ( 
T
 c⁄°& 
_vÆue
 ) {

2755 
ª£t
();

2756 
	gnuŒabÀVÆue
 = 
√w
–
°‹age
 ) 
T
–
_vÆue
 );

2757  *
	gthis
;

2760 
ª£t
() {

2761 if–
	gnuŒabÀVÆue
 )

2762 
	gnuŒabÀVÆue
->~
T
();

2763 
	gnuŒabÀVÆue
 = 
CATCH_NULL
;

2766 
	gT
& 
	g›î©‹
*(Ë{  *
	gnuŒabÀVÆue
; }

2767 
T
 c⁄°& 
	g›î©‹
*(Ëc⁄° {  *
	gnuŒabÀVÆue
; }

2768 
T
* 
	g›î©‹
->(Ë{  
	gnuŒabÀVÆue
; }

2769 c⁄° 
T
* 
	g›î©‹
->(Ëc⁄° {  
	gnuŒabÀVÆue
; }

2771 
T
 
vÆueOr
–T c⁄°& 
deÁu…VÆue
 ) const {

2772  
	gnuŒabÀVÆue
 ? *nuŒabÀVÆuê: 
deÁu…VÆue
;

2775 
boﬁ
 
some
(Ëc⁄° {  
	gnuŒabÀVÆue
 !
CATCH_NULL
; }

2776 
boﬁ
 
n⁄e
(Ëc⁄° {  
	gnuŒabÀVÆue
 =
CATCH_NULL
; }

2778 
boﬁ
 
	g›î©‹
 !(Ëc⁄° {  
	gnuŒabÀVÆue
 =
CATCH_NULL
; }

2779 
›î©‹
 
	gSa„Boﬁ
::
ty≥
() const {

2780  
Sa„Boﬁ
::
makeSa„
–
some
() );

2783 
	g¥iv©e
:

2784 
T
* 
nuŒabÀVÆue
;

2785 
	g°‹age
[(
T
)];

2790 
«me•a˚
 
	gC©ch
 {

2792 
	sITagAlüsRegi°ry
 {

2793 
	gvútuÆ
 ~
ITagAlüsRegi°ry
();

2794 
vútuÆ
 
	gO±i⁄
<
	gTagAlüs
> 
föd
–
°d
::
°rög
 c⁄°& 
Æüs
 ) const = 0;

2795 
vútuÆ
 
	g°d
::
°rög
 
ex∑ndAlü£s
–
°d
::°rög c⁄°& 
u√x∑ndedTe°S≥c
 ) const = 0;

2797 
ITagAlüsRegi°ry
 c⁄°& 
gë
();

2805 
	#TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED


	)

2807 
	~<°rög
>

2808 
	~<£t
>

2810 #ifde‡
__˛™g__


2811 #¥agm®
˛™g
 
dügno°ic
 
push


2812 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

2815 
«me•a˚
 
	gC©ch
 {

2817 
	gITe°Ca£
;

2819 
	sTe°Ca£Info
 {

2820 
	eS≥cülPr›îtõs
{

2821 
	gN⁄e
 = 0,

2822 
	gIsHiddí
 = 1 << 1,

2823 
	gShouldFaû
 = 1 << 2,

2824 
	gMayFaû
 = 1 << 3,

2825 
	gThrows
 = 1 << 4

2828 
Te°Ca£Info
–
°d
::
°rög
 c⁄°& 
_«me
,

2829 
°d
::
°rög
 c⁄°& 
_˛assName
,

2830 
°d
::
°rög
 c⁄°& 
_des¸ùti⁄
,

2831 
°d
::
£t
<°d::
°rög
> c⁄°& 
_ègs
,

2832 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 );

2834 
Te°Ca£Info
–Te°Ca£Infÿc⁄°& 
Ÿhî
 );

2836 
‰õnd
 
£tTags
–
Te°Ca£Info
& 
ã°Ca£Info
, 
°d
::
£t
<°d::
°rög
> c⁄°& 
ègs
 );

2838 
boﬁ
 
isHiddí
() const;

2839 
boﬁ
 
throws
() const;

2840 
boﬁ
 
okToFaû
() const;

2841 
boﬁ
 
ex≥˘edToFaû
() const;

2843 
	g°d
::
°rög
 
«me
;

2844 
	g°d
::
°rög
 
˛assName
;

2845 
	g°d
::
°rög
 
des¸ùti⁄
;

2846 
	g°d
::
£t
<
°d
::
°rög
> 
ègs
;

2847 
	g°d
::
£t
<
°d
::
°rög
> 
lˇ£Tags
;

2848 
	g°d
::
°rög
 
ègsAsSåög
;

2849 
Sour˚LöeInfo
 
	glöeInfo
;

2850 
S≥cülPr›îtõs
 
	g¥›îtõs
;

2853 ˛as†
	cTe°Ca£
 : 
public
 
Te°Ca£Info
 {

2854 
public
:

2856 
Te°Ca£
–
ITe°Ca£
* 
ã°Ca£
, 
Te°Ca£Info
 c⁄°& 
öfo
 );

2857 
Te°Ca£
–Te°Ca£ c⁄°& 
Ÿhî
 );

2859 
Te°Ca£
 
wôhName
–
°d
::
°rög
 c⁄°& 
_√wName
 ) const;

2861 
övoke
() const;

2863 
Te°Ca£Info
 c⁄°& 
gëTe°Ca£Info
() const;

2865 
sw≠
–
Te°Ca£
& 
Ÿhî
 );

2866 
boﬁ
 
	g›î©‹
 =–
Te°Ca£
 c⁄°& 
Ÿhî
 ) const;

2867 
boﬁ
 
	g›î©‹
 < ( 
Te°Ca£
 c⁄°& 
	gŸhî
 ) const;

2868 
	gTe°Ca£
& 
	g›î©‹
 = ( 
Te°Ca£
 c⁄°& 
Ÿhî
 );

2870 
	g¥iv©e
:

2871 
På
<
ITe°Ca£
> 
ã°
;

2874 
Te°Ca£
 
makeTe°Ca£
–
ITe°Ca£
* 
ã°Ca£
,

2875 
°d
::
°rög
 c⁄°& 
˛assName
,

2876 
°d
::
°rög
 c⁄°& 
«me
,

2877 
°d
::
°rög
 c⁄°& 
des¸ùti⁄
,

2878 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

2881 #ifde‡
__˛™g__


2882 #¥agm®
˛™g
 
dügno°ic
 
p›


2886 #ifde‡
__OBJC__


2888 
	#TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED


	)

2890 #imp‹à<
objc
/
ru¡ime
.
h
>

2892 
	~<°rög
>

2901 @
¥Ÿocﬁ
 
	gOcFixtuª


2903 @
	g›ti⁄Æ


2905 -(Ë
	g£tUp
;

2906 -(Ë
	gã¨Down
;

2908 @
íd


2910 
«me•a˚
 
	gC©ch
 {

2912 
˛ass
 
	gOcMëhod
 : 
public
 
Sh¨edIm∂
<
ITe°Ca£
> {

2914 
public
:

2915 
OcMëhod
–
Cœss
 
˛s
, 
SEL
 
£l
 ) : 
m_˛s
–˛†), 
m_£l
( sel ) {}

2917 
vútuÆ
 
övoke
() const {

2918 
id
 
	gobj
 = [[
m_˛s
 
Æloc
] 
öô
];

2920 
≥rf‹mO±i⁄ÆSñe˘‹
–
obj
, @
£À˘‹
(
£tUp
) );

2921 
≥rf‹mO±i⁄ÆSñe˘‹
–
obj
, 
m_£l
 );

2922 
≥rf‹mO±i⁄ÆSñe˘‹
–
obj
, @
£À˘‹
(
ã¨Down
) );

2924 
¨cSa„Rñó£
–
obj
 );

2926 
	g¥iv©e
:

2927 
vútuÆ
 ~
OcMëhod
() {}

2929 
Cœss
 
m_˛s
;

2930 
SEL
 
	gm_£l
;

2933 
«me•a˚
 
	gDëaû
{

2935 
ölöe
 
	g°d
::
°rög
 
gëA¬Ÿ©i⁄
–
Cœss
 
˛s
,

2936 
°d
::
°rög
 c⁄°& 
™nŸ©i⁄Name
,

2937 
°d
::
°rög
 c⁄°& 
ã°Ca£Name
 ) {

2938 
NSSåög
* 
£lSå
 = [[NSSåög 
Æloc
] 
öôWôhF‹m©
:@"C©ch_%s_%s", 
	g™nŸ©i⁄Name
.
c_°r
(), 
	gã°Ca£Name
.c_str()];

2939 
SEL
 
	g£l
 = 
NSSñe˘‹FromSåög
–
£lSå
 );

2940 
¨cSa„Rñó£
–
£lSå
 );

2941 
id
 
	gvÆue
 = 
≥rf‹mO±i⁄ÆSñe˘‹
–
˛s
, 
£l
 );

2942 if–
	gvÆue
 )

2943  [(
NSSåög
*)
vÆue
 
UTF8Såög
];

2948 
ölöe
 
size_t
 
ªgi°îTe°Mëhods
() {

2949 
size_t
 
	gnoTe°Mëhods
 = 0;

2950 
	gnoCœs£s
 = 
objc_gëCœssLi°
–
CATCH_NULL
, 0 );

2952 
Cœss
* 
	g˛as£s
 = (
CATCH_UNSAFE_UNRETAINED
 Cœs†*)
mÆloc
–(CœssË* 
noCœs£s
);

2953 
objc_gëCœssLi°
–
˛as£s
, 
noCœs£s
 );

2955  
	gc
 = 0; c < 
	gnoCœs£s
; c++ ) {

2956 
Cœss
 
	g˛s
 = 
˛as£s
[
c
];

2958 
u_öt
 
	gcou¡
;

2959 
Mëhod
* 
	gmëhods
 = 
˛ass_c›yMëhodLi°
–
˛s
, &
cou¡
 );

2960  
u_öt
 
	gm
 = 0; m < 
	gcou¡
 ; m++ ) {

2961 
SEL
 
	g£À˘‹
 = 
mëhod_gëName
(
mëhods
[
m
]);

2962 
	g°d
::
°rög
 
mëhodName
 = 
£l_gëName
(
£À˘‹
);

2963 if–
°¨tsWôh
–
mëhodName
, "Catch_TestCase_" ) ) {

2964 
	g°d
::
°rög
 
ã°Ca£Name
 = 
mëhodName
.
sub°r
( 15 );

2965 
	g°d
::
°rög
 
«me
 = 
Dëaû
::
gëA¬Ÿ©i⁄
–
˛s
, "Name", 
ã°Ca£Name
 );

2966 
	g°d
::
°rög
 
desc
 = 
Dëaû
::
gëA¬Ÿ©i⁄
–
˛s
, "Des¸ùti⁄", 
ã°Ca£Name
 );

2967 c⁄° * 
	g˛assName
 = 
˛ass_gëName
–
˛s
 );

2969 
gëMuèbÀRegi°ryHub
().
ªgi°îTe°
–
makeTe°Ca£
–
√w
 
OcMëhod
–
˛s
, 
£À˘‹
 ), 
˛assName
, 
«me
.
c_°r
(), 
desc
.c_°r(), 
Sour˚LöeInfo
() ) );

2970 
	gnoTe°Mëhods
++;

2973 
‰ì
(
mëhods
);

2976  
	gnoTe°Mëhods
;

2979 
«me•a˚
 
	gM©chîs
 {

2980 
«me•a˚
 
	gIm∂
 {

2981 
«me•a˚
 
	gNSSåögM©chîs
 {

2983 
	gãm∂©e
<
ty≥«me
 
	gM©chîT
>

2984 
	gSåögHﬁdî
 : 
M©chîIm∂
<
M©chîT
, 
	gNSSåög
*>{

2985 
SåögHﬁdî
–
NSSåög
* 
sub°r
 ) : 
m_sub°r
–[sub°∏
c›y
] ){}

2986 
SåögHﬁdî
–SåögHﬁdî c⁄°& 
Ÿhî
 ) : 
m_sub°r
–[Ÿhî.m_sub°∏
c›y
] ){}

2987 
SåögHﬁdî
() {

2988 
¨cSa„Rñó£
–
m_sub°r
 );

2991 
NSSåög
* 
	gm_sub°r
;

2994 
	gEquÆs
 : 
SåögHﬁdî
<
EquÆs
> {

2995 
EquÆs
–
NSSåög
* 
sub°r
 ) : 
SåögHﬁdî
( substr ){}

2997 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄Ty≥
 c⁄°& 
°r
 ) const {

2998  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

2999 [
°r
 
isEquÆToSåög
:
m_sub°r
];

3002 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

3003  "equÆ†°rög: " + 
C©ch
::
toSåög
–
m_sub°r
 );

3007 
	gC⁄èös
 : 
SåögHﬁdî
<
C⁄èös
> {

3008 
C⁄èös
–
NSSåög
* 
sub°r
 ) : 
SåögHﬁdî
( substr ){}

3010 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄Ty≥
 c⁄°& 
°r
 ) const {

3011  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3012 [
°r
 
øngeOfSåög
:
m_sub°r
].
loˇti⁄
 !
NSNŸFound
;

3015 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

3016  "c⁄èö†°rög: " + 
C©ch
::
toSåög
–
m_sub°r
 );

3020 
	gSèπsWôh
 : 
SåögHﬁdî
<
SèπsWôh
> {

3021 
SèπsWôh
–
NSSåög
* 
sub°r
 ) : 
SåögHﬁdî
( substr ){}

3023 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄Ty≥
 c⁄°& 
°r
 ) const {

3024  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3025 [
°r
 
øngeOfSåög
:
m_sub°r
].
loˇti⁄
 == 0;

3028 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

3029  "°¨t†wôh: " + 
C©ch
::
toSåög
–
m_sub°r
 );

3032 
	gEndsWôh
 : 
SåögHﬁdî
<
EndsWôh
> {

3033 
EndsWôh
–
NSSåög
* 
sub°r
 ) : 
SåögHﬁdî
( substr ){}

3035 
vútuÆ
 
boﬁ
 
m©ch
–
Ex¥essi⁄Ty≥
 c⁄°& 
°r
 ) const {

3036  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3037 [
°r
 
øngeOfSåög
:
m_sub°r
].
loˇti⁄
 =[°∏
Àngth
] - [m_substrÜength];

3040 
vútuÆ
 
	g°d
::
°rög
 
toSåög
() const {

3041  "íd†wôh: " + 
C©ch
::
toSåög
–
m_sub°r
 );

3048 
ölöe
 
	gIm∂
::
NSSåögM©chîs
::
EquÆs


3049 
EquÆs
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::Equals( substr ); }

3051 
ölöe
 
	gIm∂
::
NSSåögM©chîs
::
C⁄èös


3052 
C⁄èös
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::Contains( substr ); }

3054 
ölöe
 
	gIm∂
::
NSSåögM©chîs
::
SèπsWôh


3055 
SèπsWôh
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::StartsWith( substr ); }

3057 
ölöe
 
	gIm∂
::
NSSåögM©chîs
::
EndsWôh


3058 
EndsWôh
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::EndsWith( substr ); }

3062 
usög
 
«me•a˚
 
	gM©chîs
;

3067 
	#OC_TEST_CASE
–
«me
, 
desc
 )\

3068 +(
NSSåög
*Ë
	`INTERNAL_CATCH_UNIQUE_NAME
–
C©ch_Name_ã°
 ) \

3070  @ 
«me
; \

3072 +(
NSSåög
*Ë
	`INTERNAL_CATCH_UNIQUE_NAME
–
C©ch_Des¸ùti⁄_ã°
 ) \

3074  @ 
desc
; \

3076 -(Ë
	`INTERNAL_CATCH_UNIQUE_NAME
–
C©ch_Te°Ca£_ã°
 )

	)

3080 #ifde‡
CATCH_IMPL


3082 
	#TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED


	)

3087 #ifde‡
__˛™g__


3088 #¥agm®
˛™g
 
dügno°ic
 
push


3089 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wweak-vtables"

3093 
	#TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED


	)

3096 
	#TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED


	)

3099 
	#TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED


	)

3102 
	#TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED


	)

3104 #ifde‡
__˛™g__


3105 #¥agm®
˛™g
 
dügno°ic
 
push


3106 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

3110 
	#TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED


	)

3112 #ifde‡
__˛™g__


3113 #¥agm®
˛™g
 
dügno°ic
 
push


3114 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

3118 
	#TWOBLUECUBES_CATCH_WILDCARD_PATTERN_HPP_INCLUDED


	)

3120 
«me•a˚
 
	gC©ch


3122 ˛as†
	cWûdˇrdP©ã∫
 {

3123 
	eWûdˇrdPosôi⁄
 {

3124 
	gNoWûdˇrd
 = 0,

3125 
	gWûdˇrdAtSèπ
 = 1,

3126 
	gWûdˇrdAtEnd
 = 2,

3127 
	gWûdˇrdAtBŸhEnds
 = 
WûdˇrdAtSèπ
 | 
WûdˇrdAtEnd


3130 
	gpublic
:

3132 
WûdˇrdP©ã∫
–
°d
::
°rög
 c⁄°& 
∑âîn
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 )

3133 : 
m_ˇ£Sísôivôy
–
ˇ£Sísôivôy
 ),

3134 
m_wûdˇrd
–
NoWûdˇrd
 ),

3135 
m_∑âîn
–
adju°Ca£
–
∑âîn
 ) )

3137 if–
°¨tsWôh
–
m_∑âîn
, "*" ) ) {

3138 
	gm_∑âîn
 = 
m_∑âîn
.
sub°r
( 1 );

3139 
	gm_wûdˇrd
 = 
WûdˇrdAtSèπ
;

3141 if–
ídsWôh
–
m_∑âîn
, "*" ) ) {

3142 
	gm_∑âîn
 = 
m_∑âîn
.
sub°r
–0, m_∑âîn.
size
()-1 );

3143 
	gm_wûdˇrd
 = 
°©ic_ˇ°
<
WûdˇrdPosôi⁄
>–
m_wûdˇrd
 | 
WûdˇrdAtEnd
 );

3146 
	gvútuÆ
 ~
WûdˇrdP©ã∫
();

3147 
vútuÆ
 
boﬁ
 
m©ches
–
°d
::
°rög
 c⁄°& 
°r
 ) const {

3148  
m_wûdˇrd
 ) {

3149 
NoWûdˇrd
:

3150  
m_∑âîn
 =
adju°Ca£
–
°r
 );

3151 
	gWûdˇrdAtSèπ
:

3152  
ídsWôh
–
adju°Ca£
–
°r
 ), 
m_∑âîn
 );

3153 
	gWûdˇrdAtEnd
:

3154  
°¨tsWôh
–
adju°Ca£
–
°r
 ), 
m_∑âîn
 );

3155 
	gWûdˇrdAtBŸhEnds
:

3156  
c⁄èös
–
adju°Ca£
–
°r
 ), 
m_∑âîn
 );

3159 #ifde‡
__˛™g__


3160 #¥agm®
˛™g
 
dügno°ic
 
push


3161 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wunreachable-code"

3163 
throw
 
	g°d
::
logic_îr‹
( "UnknownÉnum" );

3164 #ifde‡
__˛™g__


3165 #¥agm®
˛™g
 
dügno°ic
 
p›


3168 
	g¥iv©e
:

3169 
°d
::
°rög
 
adju°Ca£
–°d::°rög c⁄°& 
°r
 ) const {

3170  
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
No
 ? 
toLowî
–
°r
 ) : str;

3172 
	gCa£Sísôive
::
Choi˚
 
m_ˇ£Sísôivôy
;

3173 
WûdˇrdPosôi⁄
 
	gm_wûdˇrd
;

3174 
	g°d
::
°rög
 
m_∑âîn
;

3178 
	~<°rög
>

3179 
	~<ve˘‹
>

3181 
«me•a˚
 
	gC©ch
 {

3183 ˛as†
	cTe°S≥c
 {

3184 
	gP©ã∫
 : 
Sh¨edIm∂
<> {

3185 
vútuÆ
 ~
P©ã∫
();

3186 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const = 0;

3188 ˛as†
	cNameP©ã∫
 : 
public
 
P©ã∫
 {

3189 
public
:

3190 
NameP©ã∫
–
°d
::
°rög
 c⁄°& 
«me
 )

3191 : 
m_wûdˇrdP©ã∫
–
toLowî
–
«me
 ), 
Ca£Sísôive
::
No
 )

3193 
vútuÆ
 ~
NameP©ã∫
();

3194 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

3195  
	gm_wûdˇrdP©ã∫
.
m©ches
–
toLowî
–
ã°Ca£
.
«me
 ) );

3197 
	g¥iv©e
:

3198 
WûdˇrdP©ã∫
 
m_wûdˇrdP©ã∫
;

3201 ˛as†
	cTagP©ã∫
 : 
public
 
P©ã∫
 {

3202 
public
:

3203 
TagP©ã∫
–
°d
::
°rög
 c⁄°& 
èg
 ) : 
m_èg
–
toLowî
(Åag ) ) {}

3204 
vútuÆ
 ~
TagP©ã∫
();

3205 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

3206  
	gã°Ca£
.
	glˇ£Tags
.
föd
–
m_èg
 ) !
ã°Ca£
.
lˇ£Tags
.
íd
();

3208 
	g¥iv©e
:

3209 
°d
::
°rög
 
m_èg
;

3212 ˛as†
	cEx˛udedP©ã∫
 : 
public
 
P©ã∫
 {

3213 
public
:

3214 
Ex˛udedP©ã∫
–
På
<
P©ã∫
> c⁄°& 
undîlyögP©ã∫
 ) : 
m_undîlyögP©ã∫
( underlyingPattern ) {}

3215 
vútuÆ
 ~
Ex˛udedP©ã∫
();

3216 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) c⁄° {  !
	gm_undîlyögP©ã∫
->matches(ÅestCase ); }

3217 
	g¥iv©e
:

3218 
På
<
P©ã∫
> 
m_undîlyögP©ã∫
;

3221 
	sFûãr
 {

3222 
	g°d
::
ve˘‹
<
På
<
P©ã∫
> > 
m_∑âîns
;

3224 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

3226  
	g°d
::
ve˘‹
<
På
<
P©ã∫
> >::
c⁄°_ôî©‹
 
ô
 = 
m_∑âîns
.
begö
(), 
	gôEnd
 = m_∑âîns.
íd
(); 
	gô
 !
ôEnd
; ++it )

3227 if–!(*
	gô
)->
m©ches
–
ã°Ca£
 ) )

3228  
	gÁl£
;

3229  
	gåue
;

3233 
	gpublic
:

3234 
boﬁ
 
hasFûãrs
() const {

3235  !
m_fûãrs
.
em±y
();

3237 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

3239  
	g°d
::
ve˘‹
<
Fûãr
>::
c⁄°_ôî©‹
 
ô
 = 
m_fûãrs
.
begö
(), 
	gôEnd
 = m_fûãrs.
íd
(); 
	gô
 !
ôEnd
; ++it )

3240 if–
	gô
->
m©ches
–
ã°Ca£
 ) )

3241  
	gåue
;

3242  
	gÁl£
;

3245 
	g¥iv©e
:

3246 
°d
::
ve˘‹
<
Fûãr
> 
m_fûãrs
;

3248 
‰õnd
 
˛ass
 
	gTe°S≥cP¨£r
;

3252 #ifde‡
__˛™g__


3253 #¥agm®
˛™g
 
dügno°ic
 
p›


3256 
«me•a˚
 
	gC©ch
 {

3258 ˛as†
	cTe°S≥cP¨£r
 {

3259 
	eMode
{ 
	gN⁄e
, 
	gName
, 
	gQuŸedName
, 
	gTag
 };

3260 
Mode
 
	gm_mode
;

3261 
boﬁ
 
	gm_ex˛usi⁄
;

3262 
	g°d
::
size_t
 
m_°¨t
, 
	gm_pos
;

3263 
	g°d
::
°rög
 
m_¨g
;

3264 
	gTe°S≥c
::
Fûãr
 
m_cuºítFûãr
;

3265 
Te°S≥c
 
	gm_ã°S≥c
;

3266 
ITagAlüsRegi°ry
 c⁄°* 
	gm_ègAlü£s
;

3268 
	gpublic
:

3269 
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
 c⁄°& 
ègAlü£s
 ) : 
m_ègAlü£s
( &tagAliases ) {}

3271 
Te°S≥cP¨£r
& 
∑r£
–
°d
::
°rög
 c⁄°& 
¨g
 ) {

3272 
m_mode
 = 
N⁄e
;

3273 
	gm_ex˛usi⁄
 = 
Ál£
;

3274 
	gm_°¨t
 = 
°d
::
°rög
::
≈os
;

3275 
	gm_¨g
 = 
m_ègAlü£s
->
ex∑ndAlü£s
–
¨g
 );

3276  
	gm_pos
 = 0; m_po†< 
	gm_¨g
.
size
(); ++m_pos )

3277 
visôCh¨
–
m_¨g
[
m_pos
] );

3278 if–
	gm_mode
 =
Name
 )

3279 
addP©ã∫
<
Te°S≥c
::
NameP©ã∫
>();

3280  *
	gthis
;

3282 
Te°S≥c
 
ã°S≥c
() {

3283 
addFûãr
();

3284  
	gm_ã°S≥c
;

3286 
	g¥iv©e
:

3287 
visôCh¨
–
c
 ) {

3288 if–
m_mode
 =
N⁄e
 ) {

3289  
c
 ) {

3291 '~': 
m_ex˛usi⁄
 = 
åue
; ;

3292 '[':  
°¨tNewMode
–
Tag
, ++
m_pos
 );

3293 '"':  
°¨tNewMode
–
QuŸedName
, ++
m_pos
 );

3294 : 
°¨tNewMode
–
Name
, 
m_pos
 ); ;

3297 if–
	gm_mode
 =
Name
 ) {

3298 if–
c
 == ',' ) {

3299 
addP©ã∫
<
Te°S≥c
::
NameP©ã∫
>();

3300 
addFûãr
();

3302 if–
	gc
 == '[' ) {

3303 if–
subSåög
() == "exclude:" )

3304 
m_ex˛usi⁄
 = 
åue
;

3306 
	gaddP©ã∫
<
	gTe°S≥c
::
NameP©ã∫
>();

3307 
°¨tNewMode
–
Tag
, ++
m_pos
 );

3310 if–
	gm_mode
 =
QuŸedName
 && 
c
 == '"' )

3311 
addP©ã∫
<
Te°S≥c
::
NameP©ã∫
>();

3312 if–
	gm_mode
 =
Tag
 && 
c
 == ']' )

3313 
addP©ã∫
<
Te°S≥c
::
TagP©ã∫
>();

3315 
°¨tNewMode
–
Mode
 
mode
, 
°d
::
size_t
 
°¨t
 ) {

3316 
m_mode
 = 
mode
;

3317 
	gm_°¨t
 = 
°¨t
;

3319 
	g°d
::
°rög
 
subSåög
(Ëc⁄° {  
m_¨g
.
sub°r
–
m_°¨t
, 
m_pos
 - m_start ); }

3320 
	gãm∂©e
<
ty≥«me
 
	gT
>

3321 
addP©ã∫
() {

3322 
	g°d
::
°rög
 
tokí
 = 
subSåög
();

3323 if–
°¨tsWôh
–
tokí
, "exclude:" ) ) {

3324 
	gm_ex˛usi⁄
 = 
åue
;

3325 
	gtokí
 = 
tokí
.
sub°r
( 8 );

3327 if–!
	gtokí
.
em±y
() ) {

3328 
	gPå
<
	gTe°S≥c
::
P©ã∫
> 
∑âîn
 = 
√w
 
T
–
tokí
 );

3329 if–
	gm_ex˛usi⁄
 )

3330 
	g∑âîn
 = 
√w
 
Te°S≥c
::
Ex˛udedP©ã∫
–
∑âîn
 );

3331 
	gm_cuºítFûãr
.
	gm_∑âîns
.
push_back
–
∑âîn
 );

3333 
	gm_ex˛usi⁄
 = 
Ál£
;

3334 
	gm_mode
 = 
N⁄e
;

3336 
addFûãr
() {

3337 if–!
	gm_cuºítFûãr
.
	gm_∑âîns
.
em±y
() ) {

3338 
	gm_ã°S≥c
.
	gm_fûãrs
.
push_back
–
m_cuºítFûãr
 );

3339 
	gm_cuºítFûãr
 = 
Te°S≥c
::
Fûãr
();

3343 
ölöe
 
Te°S≥c
 
	$∑r£Te°S≥c
–
°d
::
°rög
 c⁄°& 
¨g
 ) {

3344  
	`Te°S≥cP¨£r
–
ITagAlüsRegi°ry
::
	`gë
(Ë).
	`∑r£
–
¨g
 ).
	`ã°S≥c
();

3345 
	}
}

3349 #ifde‡
__˛™g__


3350 #¥agm®
˛™g
 
dügno°ic
 
p›


3354 
	#TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED


	)

3356 
	~<io°ªam
>

3357 
	~<°rög
>

3358 
	~<ve˘‹
>

3360 
«me•a˚
 
	gC©ch
 {

3362 
	sVîbosôy
 { 
	eLevñ
 {

3363 
	gNoOuçut
 = 0,

3364 
	gQuõt
,

3365 
	gN‹mÆ


3368 
	sW¨nAbout
 { 
	eWh©
 {

3369 
	gNŸhög
 = 0x00,

3370 
	gNoAs£πi⁄s
 = 0x01

3373 
	sShowDuøti⁄s
 { 
	eOrNŸ
 {

3374 
	gDeÁu…F‹Rï‹ãr
,

3375 
	gAlways
,

3376 
	gNevî


3378 
	sRunTe°s
 { 
	eInWh©Ordî
 {

3379 
	gInDe˛¨©i⁄Ordî
,

3380 
	gInLexicogøphiˇlOrdî
,

3381 
	gInR™domOrdî


3383 
	sU£Cﬁour
 { 
	eYesOrNo
 {

3384 
	gAuto
,

3385 
	gYes
,

3386 
	gNo


3389 
˛ass
 
	gTe°S≥c
;

3391 
	gIC⁄fig
 : 
ISh¨ed
 {

3393 
vútuÆ
 ~
IC⁄fig
();

3395 
vútuÆ
 
boﬁ
 
ÆlowThrows
() const = 0;

3396 
vútuÆ
 
	g°d
::
o°ªam
& 
°ªam
() const = 0;

3397 
vútuÆ
 
	g°d
::
°rög
 
«me
() const = 0;

3398 
vútuÆ
 
boﬁ
 
ö˛udeSuc˚ssfulResu…s
() const = 0;

3399 
vútuÆ
 
boﬁ
 
shouldDebugBªak
() const = 0;

3400 
vútuÆ
 
boﬁ
 
w¨nAboutMissögAs£πi⁄s
() const = 0;

3401 
vútuÆ
 
ab‹tA·î
() const = 0;

3402 
vútuÆ
 
boﬁ
 
showInvisibÀs
() const = 0;

3403 
vútuÆ
 
	gShowDuøti⁄s
::
OrNŸ
 
showDuøti⁄s
() const = 0;

3404 
vútuÆ
 
Te°S≥c
 c⁄°& 
ã°S≥c
() const = 0;

3405 
vútuÆ
 
	gRunTe°s
::
InWh©Ordî
 
runOrdî
() const = 0;

3406 
vútuÆ
 
∫gSìd
() const = 0;

3407 
vútuÆ
 
	gU£Cﬁour
::
YesOrNo
 
u£Cﬁour
() const = 0;

3412 
	#TWOBLUECUBES_CATCH_STREAM_H_INCLUDED


	)

3415 
	#TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED


	)

3417 
	~<°ªambuf
>

3419 
«me•a˚
 
	gC©ch
 {

3421 ˛as†
	cSåómBufBa£
 : 
public
 
°d
::
°ªambuf
 {

3422 
public
:

3423 
vútuÆ
 ~
SåómBufBa£
(Ë
CATCH_NOEXCEPT
;

3427 
	~<°ªambuf
>

3428 
	~<o°ªam
>

3429 
	~<f°ªam
>

3431 
«me•a˚
 
	gC©ch
 {

3433 
	g°d
::
o°ªam
& 
cout
();

3434 
	g°d
::
o°ªam
& 
˚º
();

3436 
	sISåóm
 {

3437 
	gvútuÆ
 ~
ISåóm
(Ë
	gCATCH_NOEXCEPT
;

3438 
vútuÆ
 
	g°d
::
o°ªam
& 
°ªam
() const = 0;

3441 ˛as†
	cFûeSåóm
 : 
public
 
ISåóm
 {

3442 
muèbÀ
 
°d
::
of°ªam
 
m_ofs
;

3443 
	gpublic
:

3444 
FûeSåóm
–
°d
::
°rög
 c⁄°& 
fûíame
 );

3445 
	gvútuÆ
 ~
FûeSåóm
(Ë
	gCATCH_NOEXCEPT
;

3446 
	gpublic
:

3447 
vútuÆ
 
°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
CATCH_OVERRIDE
;

3450 ˛as†
	cCoutSåóm
 : 
public
 
ISåóm
 {

3451 
muèbÀ
 
°d
::
o°ªam
 
m_os
;

3452 
	gpublic
:

3453 
CoutSåóm
();

3454 
	gvútuÆ
 ~
CoutSåóm
(Ë
	gCATCH_NOEXCEPT
;

3456 
	gpublic
:

3457 
vútuÆ
 
°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
CATCH_OVERRIDE
;

3460 ˛as†
	cDebugOutSåóm
 : 
public
 
ISåóm
 {

3461 
CATCH_AUTO_PTR
–
SåómBufBa£
 ) 
m_°ªamBuf
;

3462 
muèbÀ
 
	g°d
::
o°ªam
 
m_os
;

3463 
	gpublic
:

3464 
DebugOutSåóm
();

3465 
	gvútuÆ
 ~
DebugOutSåóm
(Ë
	gCATCH_NOEXCEPT
;

3467 
	gpublic
:

3468 
vútuÆ
 
°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
CATCH_OVERRIDE
;

3472 
	~<mem‹y
>

3473 
	~<ve˘‹
>

3474 
	~<°rög
>

3475 
	~<io°ªam
>

3476 
	~<˘ime
>

3478 #i‚de‡
CATCH_CONFIG_CONSOLE_WIDTH


3479 
	#CATCH_CONFIG_CONSOLE_WIDTH
 80

	)

3482 
«me•a˚
 
	gC©ch
 {

3484 
	sC⁄figD©a
 {

3486 
C⁄figD©a
()

3487 : 
li°Te°s
–
Ál£
 ),

3488 
li°Tags
–
Ál£
 ),

3489 
li°Rï‹ãrs
–
Ál£
 ),

3490 
li°Te°NamesO∆y
–
Ál£
 ),

3491 
showSuc˚ssfulTe°s
–
Ál£
 ),

3492 
shouldDebugBªak
–
Ál£
 ),

3493 
noThrow
–
Ál£
 ),

3494 
showHñp
–
Ál£
 ),

3495 
showInvisibÀs
–
Ál£
 ),

3496 
fûíamesAsTags
–
Ál£
 ),

3497 
ab‹tA·î
( -1 ),

3498 
∫gSìd
( 0 ),

3499 
vîbosôy
–
Vîbosôy
::
N‹mÆ
 ),

3500 
w¨nögs
–
W¨nAbout
::
NŸhög
 ),

3501 
showDuøti⁄s
–
ShowDuøti⁄s
::
DeÁu…F‹Rï‹ãr
 ),

3502 
runOrdî
–
RunTe°s
::
InDe˛¨©i⁄Ordî
 ),

3503 
u£Cﬁour
–
U£Cﬁour
::
Auto
 )

3506 
boﬁ
 
li°Te°s
;

3507 
boﬁ
 
	gli°Tags
;

3508 
boﬁ
 
	gli°Rï‹ãrs
;

3509 
boﬁ
 
	gli°Te°NamesO∆y
;

3511 
boﬁ
 
	gshowSuc˚ssfulTe°s
;

3512 
boﬁ
 
	gshouldDebugBªak
;

3513 
boﬁ
 
	gnoThrow
;

3514 
boﬁ
 
	gshowHñp
;

3515 
boﬁ
 
	gshowInvisibÀs
;

3516 
boﬁ
 
	gfûíamesAsTags
;

3518 
	gab‹tA·î
;

3519 
	g∫gSìd
;

3521 
	gVîbosôy
::
Levñ
 
vîbosôy
;

3522 
	gW¨nAbout
::
Wh©
 
w¨nögs
;

3523 
	gShowDuøti⁄s
::
OrNŸ
 
showDuøti⁄s
;

3524 
	gRunTe°s
::
InWh©Ordî
 
runOrdî
;

3525 
	gU£Cﬁour
::
YesOrNo
 
u£Cﬁour
;

3527 
	g°d
::
°rög
 
ouçutFûíame
;

3528 
	g°d
::
°rög
 
«me
;

3529 
	g°d
::
°rög
 
¥o˚ssName
;

3531 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ªp‹ãrNames
;

3532 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ã°sOrTags
;

3535 
˛ass
 
	gC⁄fig
 : 
public
 
Sh¨edIm∂
<
IC⁄fig
> {

3536 
¥iv©e
:

3537 
C⁄fig
–C⁄fig c⁄°& 
Ÿhî
 );

3538 
	gC⁄fig
& 
	g›î©‹
 = ( 
C⁄fig
 c⁄°& 
Ÿhî
 );

3539 
vútuÆ
 
dummy
();

3540 
	gpublic
:

3542 
C⁄fig
()

3545 
C⁄fig
–
C⁄figD©a
 c⁄°& 
d©a
 )

3546 : 
m_d©a
–
d©a
 ),

3547 
m_°ªam
–
›íSåóm
() )

3549 if–!
	gd©a
.
	gã°sOrTags
.
em±y
() ) {

3550 
Te°S≥cP¨£r
 
∑r£r
–
ITagAlüsRegi°ry
::
gë
() );

3551  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gd©a
.
	gã°sOrTags
.
size
(); ++i )

3552 
	g∑r£r
.
∑r£
–
d©a
.
ã°sOrTags
[
i
] );

3553 
	gm_ã°S≥c
 = 
∑r£r
.
ã°S≥c
();

3557 
	gvútuÆ
 ~
C⁄fig
() {

3560 
	g°d
::
°rög
 c⁄°& 
gëFûíame
() const {

3561  
m_d©a
.
ouçutFûíame
 ;

3564 
boﬁ
 
li°Te°s
(Ëc⁄° {  
	gm_d©a
.
	gli°Te°s
; }

3565 
boﬁ
 
li°Te°NamesO∆y
(Ëc⁄° {  
	gm_d©a
.
	gli°Te°NamesO∆y
; }

3566 
boﬁ
 
li°Tags
(Ëc⁄° {  
	gm_d©a
.
	gli°Tags
; }

3567 
boﬁ
 
li°Rï‹ãrs
(Ëc⁄° {  
	gm_d©a
.
	gli°Rï‹ãrs
; }

3569 
	g°d
::
°rög
 
gëPro˚ssName
(Ëc⁄° {  
m_d©a
.
¥o˚ssName
; }

3571 
boﬁ
 
shouldDebugBªak
(Ëc⁄° {  
	gm_d©a
.
	gshouldDebugBªak
; }

3573 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
gëRï‹ãrNames
(Ëc⁄° {  
m_d©a
.
ªp‹ãrNames
; }

3575 
ab‹tA·î
(Ëc⁄° {  
	gm_d©a
.
	gab‹tA·î
; }

3577 
Te°S≥c
 c⁄°& 
ã°S≥c
(Ëc⁄° {  
	gm_ã°S≥c
; }

3579 
boﬁ
 
showHñp
(Ëc⁄° {  
	gm_d©a
.
	gshowHñp
; }

3580 
boﬁ
 
showInvisibÀs
(Ëc⁄° {  
	gm_d©a
.
	gshowInvisibÀs
; }

3583 
vútuÆ
 
boﬁ
 
ÆlowThrows
(Ëc⁄° {  !
	gm_d©a
.
	gnoThrow
; }

3584 
vútuÆ
 
	g°d
::
o°ªam
& 
°ªam
(Ëc⁄° {  
m_°ªam
->stream(); }

3585 
vútuÆ
 
	g°d
::
°rög
 
«me
(Ëc⁄° {  
m_d©a
.«me.
em±y
(Ë? m_d©a.
¥o˚ssName
 : m_data.name; }

3586 
vútuÆ
 
boﬁ
 
ö˛udeSuc˚ssfulResu…s
(Ëc⁄° {  
	gm_d©a
.
	gshowSuc˚ssfulTe°s
; }

3587 
vútuÆ
 
boﬁ
 
w¨nAboutMissögAs£πi⁄s
(Ëc⁄° {  
	gm_d©a
.
	gw¨nögs
 & 
	gW¨nAbout
::
NoAs£πi⁄s
; }

3588 
vútuÆ
 
	gShowDuøti⁄s
::
OrNŸ
 
showDuøti⁄s
(Ëc⁄° {  
m_d©a
.showDurations; }

3589 
vútuÆ
 
	gRunTe°s
::
InWh©Ordî
 
runOrdî
(Ëc⁄° {  
m_d©a
.runOrder; }

3590 
vútuÆ
 
∫gSìd
(Ëc⁄° {  
	gm_d©a
.
	g∫gSìd
; }

3591 
vútuÆ
 
	gU£Cﬁour
::
YesOrNo
 
u£Cﬁour
(Ëc⁄° {  
m_d©a
.useColour; }

3593 
	g¥iv©e
:

3595 
ISåóm
 c⁄°* 
›íSåóm
() {

3596 if–
m_d©a
.
ouçutFûíame
.
em±y
() )

3597  
√w
 
CoutSåóm
();

3598 if–
	gm_d©a
.
	gouçutFûíame
[0] == '%' ) {

3599 if–
m_d©a
.
ouçutFûíame
 == "%debug" )

3600  
√w
 
DebugOutSåóm
();

3602 
throw
 
	g°d
::
domaö_îr‹
–"Uƒecogni£d såóm: " + 
m_d©a
.
ouçutFûíame
 );

3605  
√w
 
FûeSåóm
–
m_d©a
.
ouçutFûíame
 );

3607 
C⁄figD©a
 
	gm_d©a
;

3609 
CATCH_AUTO_PTR
–
ISåóm
 c⁄° ) 
	gm_°ªam
;

3610 
Te°S≥c
 
	gm_ã°S≥c
;

3616 
	#TWOBLUECUBES_CATCH_CLARA_H_INCLUDED


	)

3619 #ifde‡
CLARA_CONFIG_CONSOLE_WIDTH


3620 
	#CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
 
CLARA_CONFIG_CONSOLE_WIDTH


	)

3621 #unde‡
CLARA_CONFIG_CONSOLE_WIDTH


3623 
	#CLARA_CONFIG_CONSOLE_WIDTH
 
CATCH_CONFIG_CONSOLE_WIDTH


	)

3626 
	#STITCH_CLARA_OPEN_NAMESPACE
 
«me•a˚
 
C©ch
 {

	)

3632 #i‡!
deföed
(
TWOBLUECUBES_CLARA_H_INCLUDED
Ë|| deföed(
STITCH_CLARA_OPEN_NAMESPACE
)

3634 #i‚de‡
STITCH_CLARA_OPEN_NAMESPACE


3635 
	#TWOBLUECUBES_CLARA_H_INCLUDED


	)

3636 
	#STITCH_CLARA_OPEN_NAMESPACE


	)

3637 
	#STITCH_CLARA_CLOSE_NAMESPACE


	)

3639 
	#STITCH_CLARA_CLOSE_NAMESPACE
 }

	)

3642 
	#STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE
 
STITCH_CLARA_OPEN_NAMESPACE


	)

3647 #i‡!
deföed
(
TBC_TEXT_FORMAT_H_INCLUDED
Ë|| deföed(
STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE
)

3648 #i‚de‡
STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE


3649 
	#TBC_TEXT_FORMAT_H_INCLUDED


	)

3652 
	~<°rög
>

3653 
	~<ve˘‹
>

3654 
	~<s°ªam
>

3655 
	~<Æg‹ôhm
>

3658 #ifde‡
STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE


3659 
«me•a˚
 
	gSTITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE
 {

3662 
«me•a˚
 
	gTbc
 {

3664 #ifde‡
TBC_TEXT_FORMAT_CONSOLE_WIDTH


3665 c⁄° 
	gc⁄sﬁeWidth
 = 
TBC_TEXT_FORMAT_CONSOLE_WIDTH
;

3667 c⁄° 
	gc⁄sﬁeWidth
 = 80;

3670 
	sTextAâribuãs
 {

3671 
TextAâribuãs
()

3672 : 
öôülIndít
–
°d
::
°rög
::
≈os
 ),

3673 
ödít
( 0 ),

3674 
width
–
c⁄sﬁeWidth
-1 ),

3675 
èbCh¨
( '\t' )

3678 
	gTextAâribuãs
& 
£tInôülIndít
–
°d
::
size_t
 
_vÆue
 ) { 
öôülIndít
 = _vÆue;  *
	gthis
; }

3679 
	gTextAâribuãs
& 
£tIndít
–
°d
::
size_t
 
_vÆue
 ) { 
ödít
 = _vÆue;  *
	gthis
; }

3680 
	gTextAâribuãs
& 
£tWidth
–
°d
::
size_t
 
_vÆue
 ) { 
width
 = _vÆue;  *
	gthis
; }

3681 
	gTextAâribuãs
& 
£tTabCh¨
–
_vÆue
 ) { 
	gèbCh¨
 = _vÆue;  *
	gthis
; }

3683 
	g°d
::
size_t
 
öôülIndít
;

3684 
	g°d
::
size_t
 
ödít
;

3685 
	g°d
::
size_t
 
width
;

3686 
	gèbCh¨
;

3689 ˛as†
	cText
 {

3690 
	gpublic
:

3691 
Text
–
°d
::
°rög
 c⁄°& 
_°r
, 
TextAâribuãs
 c⁄°& 
_©å
 = TextAttributes() )

3692 : 
©å
–
_©å
 )

3694 
°d
::
°rög
 
wøµabÀCh¨s
 = " [({.,/|\\-";

3695 
	g°d
::
size_t
 
ödít
 = 
_©å
.
öôülIndít
 !
°d
::
°rög
::
≈os


3696 ? 
_©å
.
öôülIndít


3697 : 
_©å
.
ödít
;

3698 
	g°d
::
°rög
 
ªmaödî
 = 
_°r
;

3700  !
	gªmaödî
.
em±y
() ) {

3701 if–
	glöes
.
size
() >= 1000 ) {

3702 
löes
.
push_back
( "... messageÅruncated dueÅoÉxcessive size" );

3705 
	g°d
::
size_t
 
èbPos
 = 
°d
::
°rög
::
≈os
;

3706 
	g°d
::
size_t
 
width
 = (
°d
::
mö
)–
ªmaödî
.
size
(), 
	g_©å
.
	gwidth
 - 
	gödít
 );

3707 
	g°d
::
size_t
 
pos
 = 
ªmaödî
.
föd_fú°_of
( '\n' );

3708 if–
	gpos
 <
width
 ) {

3709 
width
 = 
pos
;

3711 
	gpos
 = 
ªmaödî
.
föd_œ°_of
–
_©å
.
èbCh¨
, 
width
 );

3712 if–
	gpos
 !
°d
::
°rög
::
≈os
 ) {

3713 
èbPos
 = 
pos
;

3714 if–
	gªmaödî
[
width
] == '\n' )

3715 
width
--;

3716 
	gªmaödî
 = 
ªmaödî
.
sub°r
–0, 
èbPos
 ) +Ñemainder.substr(ÅabPos+1 );

3719 if–
	gwidth
 =
ªmaödî
.
size
() ) {

3720 
•li˚Löe
–
ödít
, 
ªmaödî
, 
width
 );

3722 if–
	gªmaödî
[
width
] == '\n' ) {

3723 
•li˚Löe
–
ödít
, 
ªmaödî
, 
width
 );

3724 if–
	gwidth
 <1 || 
ªmaödî
.
size
() != 1 )

3725 
ªmaödî
 =Ñemaödî.
sub°r
( 1 );

3726 
	gödít
 = 
_©å
.
ödít
;

3729 
	gpos
 = 
ªmaödî
.
föd_œ°_of
–
wøµabÀCh¨s
, 
width
 );

3730 if–
	gpos
 !
°d
::
°rög
::
≈os
 && 
pos
 > 0 ) {

3731 
•li˚Löe
–
ödít
, 
ªmaödî
, 
pos
 );

3732 if–
	gªmaödî
[0] == ' ' )

3733 
ªmaödî
 =Ñemaödî.
sub°r
( 1 );

3736 
•li˚Löe
–
ödít
, 
ªmaödî
, 
width
-1 );

3737 
	glöes
.
back
() += "-";

3739 if–
	glöes
.
size
() == 1 )

3740 
ödít
 = 
_©å
.indent;

3741 if–
	gèbPos
 !
°d
::
°rög
::
≈os
 )

3742 
ödít
 +
èbPos
;

3747 
•li˚Löe
–
°d
::
size_t
 
_ödít
, std::
°rög
& 
_ªmaödî
, std::size_à
_pos
 ) {

3748 
löes
.
push_back
–
°d
::
°rög
–
_ödít
, ' ' ) + 
_ªmaödî
.
sub°r
–0, 
_pos
 ) );

3749 
	g_ªmaödî
 = 
_ªmaödî
.
sub°r
–
_pos
 );

3752 
	g°d
::
	tve˘‹
<
	t°d
::
	t°rög
>::
	tc⁄°_ôî©‹
 const_iterator;

3754 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  
	glöes
.begin(); }

3755 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  
	glöes
.end(); }

3756 
	g°d
::
°rög
 c⁄°& 
œ°
(Ëc⁄° {  
löes
.
back
(); }

3757 
	g°d
::
size_t
 
size
(Ëc⁄° {  
löes
.size(); }

3758 
	g°d
::
°rög
 c⁄°& 
›î©‹
[]–
°d
::
size_t
 
_ödex
 ) c⁄° {  
löes
[_index]; }

3759 
	g°d
::
°rög
 
toSåög
() const {

3760 
°d
::
o°rög°ªam
 
oss
;

3761 
	goss
 << *
	gthis
;

3762  
	goss
.
°r
();

3765 
ölöe
 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
_°ªam
, 
Text
 c⁄°& 
	g_ãxt
 ) {

3766  
	gText
::
c⁄°_ôî©‹
 
ô
 = 
_ãxt
.
begö
(), 
	gôEnd
 = _ãxt.
íd
();

3767 
	gô
 !
ôEnd
; ++it ) {

3768 if–
	gô
 !
_ãxt
.
begö
() )

3769 
_°ªam
 << "\n";

3770 
	g_°ªam
 << *
	gô
;

3772  
	g_°ªam
;

3775 
	g¥iv©e
:

3776 
°d
::
°rög
 
°r
;

3777 
TextAâribuãs
 
	g©å
;

3778 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
löes
;

3783 #ifde‡
STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE


3792 #unde‡
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE


3796 #i‚de‡
TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED


3797 
	#TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED


	)

3819 #ifde‡
__˛™g__


3821 #i‡
	$__has_„©uª
(
cxx_nuŒ±r
)

3822 
	#CLARA_INTERNAL_CONFIG_CPP11_NULLPTR


	)

3825 #i‡
	$__has_„©uª
(
cxx_n€x˚±
)

3826 
	#CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT


	)

3833 #ifde‡
__GNUC__


3835 #i‡
__GNUC__
 =4 && 
__GNUC_MINOR__
 >6 && 
	$deföed
(
__GXX_EXPERIMENTAL_CXX0X__
)

3836 
	#CLARA_INTERNAL_CONFIG_CPP11_NULLPTR


	)

3846 #ifde‡
_MSC_VER


3848 #i‡(
_MSC_VER
 >= 1600)

3849 
	#CLARA_INTERNAL_CONFIG_CPP11_NULLPTR


	)

3850 
	#CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR


	)

3853 #i‡(
_MSC_VER
 >= 1900 )

3854 
	#CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT


	)

3855 
	#CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS


	)

3864 #i‡
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

3866 
	#CLARA_CPP11_OR_GREATER


	)

3868 #i‡!
	$deföed
(
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR
)

3869 
	#CLARA_INTERNAL_CONFIG_CPP11_NULLPTR


	)

3872 #i‚de‡
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT


3873 
	#CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT


	)

3876 #i‚de‡
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS


3877 
	#CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS


	)

3880 #i‡!
	$deföed
(
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE
)

3881 
	#CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE


	)

3883 #i‡!
	$deföed
(
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR
)

3884 
	#CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR


	)

3890 #i‡
	`deföed
(
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR
Ë&& !deföed(
CLARA_CONFIG_CPP11_NO_NULLPTR
Ë&& !deföed(
CLARA_CONFIG_CPP11_NULLPTR
Ë&& !
	$deföed
(
CLARA_CONFIG_NO_CPP11
)

3891 
	#CLARA_CONFIG_CPP11_NULLPTR


	)

3893 #i‡
	`deföed
(
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT
Ë&& !deföed(
CLARA_CONFIG_CPP11_NO_NOEXCEPT
Ë&& !deföed(
CLARA_CONFIG_CPP11_NOEXCEPT
Ë&& !
	$deföed
(
CLARA_CONFIG_NO_CPP11
)

3894 
	#CLARA_CONFIG_CPP11_NOEXCEPT


	)

3896 #i‡
	`deföed
(
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS
Ë&& !deföed(
CLARA_CONFIG_CPP11_NO_GENERATED_METHODS
Ë&& !deföed(
CLARA_CONFIG_CPP11_GENERATED_METHODS
Ë&& !
	$deföed
(
CLARA_CONFIG_NO_CPP11
)

3897 
	#CLARA_CONFIG_CPP11_GENERATED_METHODS


	)

3899 #i‡
	`deföed
(
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE
Ë&& !deföed(
CLARA_CONFIG_NO_OVERRIDE
Ë&& !deföed(
CLARA_CONFIG_CPP11_OVERRIDE
Ë&& !
	$deföed
(
CLARA_CONFIG_NO_CPP11
)

3900 
	#CLARA_CONFIG_CPP11_OVERRIDE


	)

3902 #i‡
	`deföed
(
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR
Ë&& !deföed(
CLARA_CONFIG_NO_UNIQUE_PTR
Ë&& !deföed(
CLARA_CONFIG_CPP11_UNIQUE_PTR
Ë&& !
	$deföed
(
CLARA_CONFIG_NO_CPP11
)

3903 
	#CLARA_CONFIG_CPP11_UNIQUE_PTR


	)

3907 #i‡
	`deföed
(
CLARA_CONFIG_CPP11_NOEXCEPT
Ë&& !
	$deföed
(
CLARA_NOEXCEPT
)

3908 
	#CLARA_NOEXCEPT
 
n€x˚±


	)

3909 
	#CLARA_NOEXCEPT_IS
(
x
Ë
	$n€x˚±
(
x
)

	)

3911 
	#CLARA_NOEXCEPT
 
	$throw
()

	)

3912 
	#CLARA_NOEXCEPT_IS
(
x
)

	)

3916 #ifde‡
CLARA_CONFIG_CPP11_NULLPTR


3917 
	#CLARA_NULL
 
nuŒ±r


	)

3919 
	#CLARA_NULL
 
NULL


	)

3923 #ifde‡
CLARA_CONFIG_CPP11_OVERRIDE


3924 
	#CLARA_OVERRIDE
 
ovîride


	)

3926 
	#CLARA_OVERRIDE


	)

3930 #ifde‡
CLARA_CONFIG_CPP11_UNIQUE_PTR


3931 
	#CLARA_AUTO_PTR
–
T
 ) 
°d
::
unique_±r
<T>

	)

3933 
	#CLARA_AUTO_PTR
–
T
 ) 
°d
::
auto_±r
<T>

	)

3941 
	~<m≠
>

3942 
	~<°dex˚±
>

3943 
	~<mem‹y
>

3945 #i‡
	`deföed
(
WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
_MSC_VER
)

3946 
	#CLARA_PLATFORM_WINDOWS


	)

3950 #ifde‡
STITCH_CLARA_OPEN_NAMESPACE


3951 
STITCH_CLARA_OPEN_NAMESPACE


3954 
«me•a˚
 
Cœø
 {

3956 
	sU≈osôi⁄ÆTag
 {};

3958 
U≈osôi⁄ÆTag
 
_
;

3960 #ifde‡
CLARA_CONFIG_MAIN


3961 
U≈osôi⁄ÆTag
 
_
;

3964 
«me•a˚
 
Dëaû
 {

3966 #ifde‡
CLARA_CONSOLE_WIDTH


3967 c⁄° 
c⁄sﬁeWidth
 = 
CLARA_CONFIG_CONSOLE_WIDTH
;

3969 c⁄° 
c⁄sﬁeWidth
 = 80;

3972 
usög
 
«me•a˚
 
Tbc
;

3974 
ölöe
 
boﬁ
 
	`°¨tsWôh
–
°d
::
°rög
 c⁄°& 
°r
, std::°rög c⁄°& 
¥efix
 ) {

3975  
°r
.
	`size
(Ë>
¥efix
.size(Ë&& så.
	`sub°r
( 0,Örefix.size() ) ==Örefix;

3978 
ãm∂©e
<
ty≥«me
 
T
> 
	sRemoveC⁄°Ref
{ T 
	tty≥
; };

3979 
ãm∂©e
<
ty≥«me
 
T
> 
RemoveC⁄°Ref
<T&>{ T 
	tty≥
; };

3980 
ãm∂©e
<
ty≥«me
 
T
> 
RemoveC⁄°Ref
<T c⁄°&>{ T 
	tty≥
; };

3981 
ãm∂©e
<
ty≥«me
 
T
> 
RemoveC⁄°Ref
<T c⁄°>{ T 
	tty≥
; };

3983 
ãm∂©e
<
ty≥«me
 
T
> 
	sIsBoﬁ
 { c⁄° 
boﬁ
 
vÆue
 = 
Ál£
; };

3984 
ãm∂©e
<> 
IsBoﬁ
<
boﬁ
> { c⁄° boﬁ 
vÆue
 = 
åue
; };

3986 
ãm∂©e
<
ty≥«me
 
T
>

3987 
	`c⁄vîtI¡o
–
°d
::
°rög
 c⁄°& 
_sour˚
, 
T
& 
_de°
 ) {

3988 
°d
::
°rög°ªam
 
ss
;

3989 
ss
 << 
_sour˚
;

3990 
ss
 >> 
_de°
;

3991 if–
ss
.
	`Áû
() )

3992 
throw
 
°d
::
	`ru¡ime_îr‹
–"U«bÀÅÿc⁄vîà" + 
_sour˚
 + "Åo destinationÅype" );

3994 
ölöe
 
	`c⁄vîtI¡o
–
°d
::
°rög
 c⁄°& 
_sour˚
, std::°rög& 
_de°
 ) {

3995 
_de°
 = 
_sour˚
;

3997 
ölöe
 
	`c⁄vîtI¡o
–
°d
::
°rög
 c⁄°& 
_sour˚
, 
boﬁ
& 
_de°
 ) {

3998 
°d
::
°rög
 
sour˚LC
 = 
_sour˚
;

3999 
°d
::
	`å™sf‹m
–
sour˚LC
.
	`begö
(), sour˚LC.
	`íd
(), sour˚LC.begö(), ::
tﬁowî
 );

4000 if–
sour˚LC
 == "y" || sourceLC == "1" || sourceLC == "true" || sourceLC == "yes" || sourceLC == "on" )

4001 
_de°
 = 
åue
;

4002 if–
sour˚LC
 == "n" || sourceLC == "0" || sourceLC == "false" || sourceLC == "no" || sourceLC == "off" )

4003 
_de°
 = 
Ál£
;

4005 
throw
 
°d
::
	`ru¡ime_îr‹
–"Ex≥˘edá boﬁó¿vÆuêbuàdidÇŸÑecogni£:\¿ '" + 
_sour˚
 + "'" );

4008 
ãm∂©e
<
ty≥«me
 
C⁄figT
>

4009 
	sIArgFun˘i⁄
 {

4010 
vútuÆ
 ~
	`IArgFun˘i⁄
() {}

4011 #ifde‡
CLARA_CONFIG_CPP11_GENERATED_METHODS


4012 
	`IArgFun˘i⁄
() = ;

4013 
	`IArgFun˘i⁄
–
IArgFun˘i⁄
 const& ) = ;

4015 
vútuÆ
 
	`£t
–
C⁄figT
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
vÆue
 ) const = 0;

4016 
vútuÆ
 
boﬁ
 
	`èkesArg
() const = 0;

4017 
vútuÆ
 
IArgFun˘i⁄
* 
	`˛⁄e
() const = 0;

4020 
ãm∂©e
<
ty≥«me
 
C⁄figT
>

4021 ˛as†
	cBoundArgFun˘i⁄
 {

4022 
public
:

4023 
	`BoundArgFun˘i⁄
(Ë: 
	`fun˘i⁄Obj
–
CLARA_NULL
 ) {}

4024 
	`BoundArgFun˘i⁄
–
IArgFun˘i⁄
<
C⁄figT
>* 
_fun˘i⁄Obj
 ) : 
	`fun˘i⁄Obj
( _functionObj ) {}

4025 
	`BoundArgFun˘i⁄
–
BoundArgFun˘i⁄
 c⁄°& 
Ÿhî
 ) : 
	`fun˘i⁄Obj
–Ÿhî.
fun˘i⁄Obj
 ? othî.fun˘i⁄Obj->
	`˛⁄e
(Ë: 
CLARA_NULL
 ) {}

4026 
BoundArgFun˘i⁄
& 
›î©‹
 = ( BoundArgFun˘i⁄ c⁄°& 
Ÿhî
 ) {

4027 
IArgFun˘i⁄
<
C⁄figT
>* 
√wFun˘i⁄Obj
 = 
Ÿhî
.
fun˘i⁄Obj
 ? othî.fun˘i⁄Obj->
	`˛⁄e
(Ë: 
CLARA_NULL
;

4028 
dñëe
 
fun˘i⁄Obj
;

4029 
fun˘i⁄Obj
 = 
√wFun˘i⁄Obj
;

4030  *
this
;

4032 ~
	`BoundArgFun˘i⁄
(Ë{ 
dñëe
 
fun˘i⁄Obj
; }

4034 
	`£t
–
C⁄figT
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
vÆue
 ) const {

4035 
fun˘i⁄Obj
->
	`£t
–
c⁄fig
, 
vÆue
 );

4037 
boﬁ
 
	`èkesArg
(Ëc⁄° {  
fun˘i⁄Obj
->takesArg(); }

4039 
boﬁ
 
	`isSë
() const {

4040  
fun˘i⁄Obj
 !
CLARA_NULL
;

4042 
¥iv©e
:

4043 
IArgFun˘i⁄
<
C⁄figT
>* 
fun˘i⁄Obj
;

4046 
ãm∂©e
<
ty≥«me
 
C
>

4047 
NuŒBödî
 : 
IArgFun˘i⁄
<
C
>{

4048 
vútuÆ
 
	`£t
–
C
&, 
°d
::
°rög
 const& ) const {}

4049 
vútuÆ
 
boﬁ
 
	`èkesArg
(Ëc⁄° {  
åue
; }

4050 
vútuÆ
 
IArgFun˘i⁄
<
C
>* 
	`˛⁄e
(Ëc⁄° {  
√w
 
	`NuŒBödî
–*
this
 ); }

4053 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
M
>

4054 
BoundD©aMembî
 : 
IArgFun˘i⁄
<
C
>{

4055 
	`BoundD©aMembî
–
M
 
C
::* 
_membî
 ) : 
	`membî
( _member ) {}

4056 
vútuÆ
 
	`£t
–
C
& 
p
, 
°d
::
°rög
 c⁄°& 
°rögVÆue
 ) const {

4057 
	`c⁄vîtI¡o
–
°rögVÆue
, 
p
.*
membî
 );

4059 
vútuÆ
 
boﬁ
 
	`èkesArg
(Ëc⁄° {  !
IsBoﬁ
<
M
>::
vÆue
; }

4060 
vútuÆ
 
IArgFun˘i⁄
<
C
>* 
	`˛⁄e
(Ëc⁄° {  
√w
 
	`BoundD©aMembî
–*
this
 ); }

4061 
M
 
C
::* 
membî
;

4063 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
M
>

4064 
BoundU«ryMëhod
 : 
IArgFun˘i⁄
<
C
>{

4065 
	`BoundU«ryMëhod
–(
C
::*
_membî
)–
M
 ) ) : 
	`membî
( _member ) {}

4066 
vútuÆ
 
	`£t
–
C
& 
p
, 
°d
::
°rög
 c⁄°& 
°rögVÆue
 ) const {

4067 
ty≥«me
 
RemoveC⁄°Ref
<
M
>::
ty≥
 
vÆue
;

4068 
	`c⁄vîtI¡o
–
°rögVÆue
, 
vÆue
 );

4069 (
p
.*
membî
)–
vÆue
 );

4071 
vútuÆ
 
boﬁ
 
	`èkesArg
(Ëc⁄° {  !
IsBoﬁ
<
M
>::
vÆue
; }

4072 
vútuÆ
 
IArgFun˘i⁄
<
C
>* 
	`˛⁄e
(Ëc⁄° {  
√w
 
	`BoundU«ryMëhod
–*
this
 ); }

4073 (
C
::*
membî
)–
M
 );

4075 
ãm∂©e
<
ty≥«me
 
C
>

4076 
BoundNuŒ¨yMëhod
 : 
IArgFun˘i⁄
<
C
>{

4077 
	`BoundNuŒ¨yMëhod
–(
C
::*
_membî
)(ËË: 
	`membî
( _member ) {}

4078 
vútuÆ
 
	`£t
–
C
& 
p
, 
°d
::
°rög
 c⁄°& 
°rögVÆue
 ) const {

4079 
boﬁ
 
vÆue
;

4080 
	`c⁄vîtI¡o
–
°rögVÆue
, 
vÆue
 );

4081 if–
vÆue
 )

4082 (
p
.*
membî
)();

4084 
vútuÆ
 
boﬁ
 
	`èkesArg
(Ëc⁄° {  
Ál£
; }

4085 
vútuÆ
 
IArgFun˘i⁄
<
C
>* 
	`˛⁄e
(Ëc⁄° {  
√w
 
	`BoundNuŒ¨yMëhod
–*
this
 ); }

4086 (
C
::*
membî
)();

4089 
ãm∂©e
<
ty≥«me
 
C
>

4090 
BoundU«ryFun˘i⁄
 : 
IArgFun˘i⁄
<
C
>{

4091 
	`BoundU«ryFun˘i⁄
–(*
_fun˘i⁄
)–
C
& ) ) : 
	`fun˘i⁄
( _function ) {}

4092 
vútuÆ
 
	`£t
–
C
& 
obj
, 
°d
::
°rög
 c⁄°& 
°rögVÆue
 ) const {

4093 
boﬁ
 
vÆue
;

4094 
	`c⁄vîtI¡o
–
°rögVÆue
, 
vÆue
 );

4095 if–
vÆue
 )

4096 
	`fun˘i⁄
–
obj
 );

4098 
vútuÆ
 
boﬁ
 
	`èkesArg
(Ëc⁄° {  
Ál£
; }

4099 
vútuÆ
 
IArgFun˘i⁄
<
C
>* 
	`˛⁄e
(Ëc⁄° {  
√w
 
	`BoundU«ryFun˘i⁄
–*
this
 ); }

4100 (*
fun˘i⁄
)–
C
& );

4103 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
T
>

4104 
BoundBö¨yFun˘i⁄
 : 
IArgFun˘i⁄
<
C
>{

4105 
	`BoundBö¨yFun˘i⁄
–(*
_fun˘i⁄
)–
C
&, 
T
 ) ) : 
	`fun˘i⁄
( _function ) {}

4106 
vútuÆ
 
	`£t
–
C
& 
obj
, 
°d
::
°rög
 c⁄°& 
°rögVÆue
 ) const {

4107 
ty≥«me
 
RemoveC⁄°Ref
<
T
>::
ty≥
 
vÆue
;

4108 
	`c⁄vîtI¡o
–
°rögVÆue
, 
vÆue
 );

4109 
	`fun˘i⁄
–
obj
, 
vÆue
 );

4111 
vútuÆ
 
boﬁ
 
	`èkesArg
(Ëc⁄° {  !
IsBoﬁ
<
T
>::
vÆue
; }

4112 
vútuÆ
 
IArgFun˘i⁄
<
C
>* 
	`˛⁄e
(Ëc⁄° {  
√w
 
	`BoundBö¨yFun˘i⁄
–*
this
 ); }

4113 (*
fun˘i⁄
)–
C
&, 
T
 );

4118 
ölöe
 
°d
::
ve˘‹
<°d::
°rög
> 
	`¨gsToVe˘‹
–
¨gc
, c⁄°* c⁄°* c⁄° 
¨gv
 ) {

4119 
°d
::
ve˘‹
<°d::
°rög
> 
	`¨gs
–
°©ic_ˇ°
<°d::
size_t
>–
¨gc
 ) );

4120  
°d
::
size_t
 
i
 = 0; i < 
°©ic_ˇ°
<°d::size_t>–
¨gc
 ); ++i )

4121 
¨gs
[
i
] = 
¨gv
[i];

4123  
¨gs
;

4126 ˛as†
	cP¨£r
 {

4127 
	eMode
 { 
N⁄e
, 
MaybeSh‹tO±
, 
SœshO±
, 
Sh‹tO±
, 
L⁄gO±
, 
Posôi⁄Æ
 };

4128 
Mode
 
mode
;

4129 
°d
::
size_t
 
‰om
;

4130 
boﬁ
 
öQuŸes
;

4131 
public
:

4133 
	sTokí
 {

4134 
	eTy≥
 { 
Posôi⁄Æ
, 
Sh‹tO±
, 
L⁄gO±
 };

4135 
	`Tokí
–
Ty≥
 
_ty≥
, 
°d
::
°rög
 c⁄°& 
_d©a
 ) : 
	`ty≥
–_ty≥ ), 
	`d©a
( _data ) {}

4136 
Ty≥
 
ty≥
;

4137 
°d
::
°rög
 
d©a
;

4140 
	`P¨£r
(Ë: 
	`mode
–
N⁄e
 ), 
	`‰om
–0 ), 
	`öQuŸes
–
Ál£
 ){}

4142 
	`∑r£I¡oTokís
–
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
¨gs
, std::ve˘‹<
Tokí
>& 
tokís
 ) {

4143 c⁄° 
°d
::
°rög
 
doubÀDash
 = "--";

4144  
°d
::
size_t
 
i
 = 1; i < 
¨gs
.
	`size
(Ë&&árgs[i] !
doubÀDash
; ++i )

4145 
	`∑r£I¡oTokís
–
¨gs
[
i
], 
tokís
);

4148 
	`∑r£I¡oTokís
–
°d
::
°rög
 c⁄°& 
¨g
, std::
ve˘‹
<
Tokí
>& 
tokís
 ) {

4149  
°d
::
size_t
 
i
 = 0; i <
¨g
.
	`size
(); ++i ) {

4150 
c
 = 
¨g
[
i
];

4151 if–
c
 == '"' )

4152 
öQuŸes
 = !inQuotes;

4153 
mode
 = 
	`h™dÀMode
–
i
, 
c
, 
¨g
, 
tokís
 );

4156 
Mode
 
	`h™dÀMode
–
°d
::
size_t
 
i
, 
c
, std::
°rög
 c⁄°& 
¨g
, std::
ve˘‹
<
Tokí
>& 
tokís
 ) {

4157  
mode
 ) {

4158 
N⁄e
:  
	`h™dÀN⁄e
–
i
, 
c
 );

4159 
MaybeSh‹tO±
:  
	`h™dÀMaybeSh‹tO±
–
i
, 
c
 );

4160 
Sh‹tO±
:

4161 
L⁄gO±
:

4162 
SœshO±
:  
	`h™dÀO±
–
i
, 
c
, 
¨g
, 
tokís
 );

4163 
Posôi⁄Æ
:  
	`h™dÀPosôi⁄Æ
–
i
, 
c
, 
¨g
, 
tokís
 );

4164 : 
throw
 
°d
::
	`logic_îr‹
( "Unknown mode" );

4168 
Mode
 
	`h™dÀN⁄e
–
°d
::
size_t
 
i
, 
c
 ) {

4169 if–
öQuŸes
 ) {

4170 
‰om
 = 
i
;

4171  
Posôi⁄Æ
;

4173  
c
 ) {

4174 '-':  
MaybeSh‹tO±
;

4175 #ifde‡
CLARA_PLATFORM_WINDOWS


4176 '/': 
‰om
 = 
i
+1;  
SœshO±
;

4178 : 
‰om
 = 
i
;  
Posôi⁄Æ
;

4181 
Mode
 
	`h™dÀMaybeSh‹tO±
–
°d
::
size_t
 
i
, 
c
 ) {

4182  
c
 ) {

4183 '-': 
‰om
 = 
i
+1;  
L⁄gO±
;

4184 : 
‰om
 = 
i
;  
Sh‹tO±
;

4187 
Mode
 
	`h™dÀO±
–
°d
::
size_t
 
i
, 
c
, std::
°rög
 c⁄°& 
¨g
, std::
ve˘‹
<
Tokí
>& 
tokís
 ) {

4188 if–
°d
::
	`°rög
–":=\0", 3 ).
	`föd
–
c
 ) =°d::
°rög
::
≈os
 )

4189  
mode
;

4191 
°d
::
°rög
 
›tName
 = 
¨g
.
	`sub°r
–
‰om
, 
i
-from );

4192 if–
mode
 =
Sh‹tO±
 )

4193  
°d
::
size_t
 
j
 = 0; j < 
›tName
.
	`size
(); ++j )

4194 
tokís
.
	`push_back
–
	`Tokí
–
Tokí
::
Sh‹tO±
, 
›tName
.
	`sub°r
–
j
, 1 ) ) );

4195 if–
mode
 =
SœshO±
 && 
›tName
.
	`size
() == 1 )

4196 
tokís
.
	`push_back
–
	`Tokí
–
Tokí
::
Sh‹tO±
, 
›tName
 ) );

4198 
tokís
.
	`push_back
–
	`Tokí
–
Tokí
::
L⁄gO±
, 
›tName
 ) );

4199  
N⁄e
;

4201 
Mode
 
	`h™dÀPosôi⁄Æ
–
°d
::
size_t
 
i
, 
c
, std::
°rög
 c⁄°& 
¨g
, std::
ve˘‹
<
Tokí
>& 
tokís
 ) {

4202 if–
öQuŸes
 || 
°d
::
	`°rög
–"\0", 1 ).
	`föd
–
c
 ) =°d::
°rög
::
≈os
 )

4203  
mode
;

4205 
°d
::
°rög
 
d©a
 = 
¨g
.
	`sub°r
–
‰om
, 
i
-from );

4206 
tokís
.
	`push_back
–
	`Tokí
–
Tokí
::
Posôi⁄Æ
, 
d©a
 ) );

4207  
N⁄e
;

4211 
ãm∂©e
<
ty≥«me
 
C⁄figT
>

4212 
	sComm⁄ArgPr›îtõs
 {

4213 
	`Comm⁄ArgPr›îtõs
() {}

4214 
	`Comm⁄ArgPr›îtõs
–
Dëaû
::
BoundArgFun˘i⁄
<
C⁄figT
> c⁄°& 
_boundFõld
 ) : 
	`boundFõld
( _boundField ) {}

4216 
Dëaû
::
BoundArgFun˘i⁄
<
C⁄figT
> 
boundFõld
;

4217 
°d
::
°rög
 
des¸ùti⁄
;

4218 
°d
::
°rög
 
dëaû
;

4219 
°d
::
°rög
 
∂a˚hﬁdî
;

4221 
boﬁ
 
	`èkesArg
() const {

4222  !
∂a˚hﬁdî
.
	`em±y
();

4224 
	`vÆid©e
() const {

4225 if–!
boundFõld
.
	`isSë
() )

4226 
throw
 
°d
::
	`logic_îr‹
( "optionÇot bound" );

4229 
	sO±i⁄ArgPr›îtõs
 {

4230 
°d
::
ve˘‹
<°d::
°rög
> 
sh‹tNames
;

4231 
°d
::
°rög
 
l⁄gName
;

4233 
boﬁ
 
	`hasSh‹tName
–
°d
::
°rög
 c⁄°& 
sh‹tName
 ) const {

4234  
°d
::
	`föd
–
sh‹tNames
.
	`begö
(), sh‹tNames.
	`íd
(), 
sh‹tName
 ) != shortNames.end();

4236 
boﬁ
 
	`hasL⁄gName
–
°d
::
°rög
 c⁄°& 
_l⁄gName
 ) const {

4237  
_l⁄gName
 =
l⁄gName
;

4240 
	sPosôi⁄ÆArgPr›îtõs
 {

4241 
	`Posôi⁄ÆArgPr›îtõs
(Ë: 
	`posôi⁄
( -1 ) {}

4242 
posôi⁄
;

4244 
boﬁ
 
	`isFixedPosôi⁄Æ
() const {

4245  
posôi⁄
 != -1;

4249 
ãm∂©e
<
ty≥«me
 
C⁄figT
>

4250 ˛as†
	cComm™dLöe
 {

4252 
Arg
 : 
Comm⁄ArgPr›îtõs
<
C⁄figT
>, 
O±i⁄ArgPr›îtõs
, 
Posôi⁄ÆArgPr›îtõs
 {

4253 
	`Arg
() {}

4254 
	`Arg
–
Dëaû
::
BoundArgFun˘i⁄
<
C⁄figT
> c⁄°& 
_boundFõld
 ) : 
Comm⁄ArgPr›îtõs
<ConfigT>( _boundField ) {}

4256 
usög
 
Comm⁄ArgPr›îtõs
<
C⁄figT
>::
∂a˚hﬁdî
;

4258 
°d
::
°rög
 
	`dbgName
() const {

4259 if–!
l⁄gName
.
	`em±y
() )

4260  "--" + 
l⁄gName
;

4261 if–!
sh‹tNames
.
	`em±y
() )

4262  "-" + 
sh‹tNames
[0];

4265 
°d
::
°rög
 
	`comm™ds
() const {

4266 
°d
::
o°rög°ªam
 
oss
;

4267 
boﬁ
 
fú°
 = 
åue
;

4268 
°d
::
ve˘‹
<°d::
°rög
>::
c⁄°_ôî©‹
 
ô
 = 
sh‹tNames
.
	`begö
(), 
ôEnd
 = sh‹tNames.
	`íd
();

4269 ; 
ô
 !
ôEnd
; ++it ) {

4270 if–
fú°
 )

4271 
fú°
 = 
Ál£
;

4273 
oss
 << ", ";

4274 
oss
 << "-" << *
ô
;

4276 if–!
l⁄gName
.
	`em±y
() ) {

4277 if–!
fú°
 )

4278 
oss
 << ", ";

4279 
oss
 << "--" << 
l⁄gName
;

4281 if–!
∂a˚hﬁdî
.
	`em±y
() )

4282 
oss
 << " <" << 
∂a˚hﬁdî
 << ">";

4283  
oss
.
	`°r
();

4287 
	`CLARA_AUTO_PTR
–
	tArg
 ) 
	tArgAutoPå
;

4289 
‰õnd
 
	`addO±Name
–
Arg
& 
¨g
, 
°d
::
°rög
 c⁄°& 
›tName
 )

4291 if–
›tName
.
	`em±y
() )

4293 if–
Dëaû
::
	`°¨tsWôh
–
›tName
, "--" ) ) {

4294 if–!
¨g
.
l⁄gName
.
	`em±y
() )

4295 
throw
 
°d
::
	`logic_îr‹
( "Only oneÜong opt may be specified. '"

4296 + 
¨g
.
l⁄gName


4298 + 
›tName
 + "'" );

4299 
¨g
.
l⁄gName
 = 
›tName
.
	`sub°r
( 2 );

4301 if–
Dëaû
::
	`°¨tsWôh
–
›tName
, "-" ) )

4302 
¨g
.
sh‹tNames
.
	`push_back
–
›tName
.
	`sub°r
( 1 ) );

4304 
throw
 
°d
::
	`logic_îr‹
–"›ti⁄ mu° begö wôh - o∏--. O±i⁄ was: '" + 
›tName
 + "'" );

4306 
‰õnd
 
	`£tPosôi⁄ÆArg
–
Arg
& 
¨g
, 
posôi⁄
 )

4308 
¨g
.
posôi⁄
 =Öosition;

4311 ˛as†
	cArgBuûdî
 {

4312 
public
:

4313 
	`ArgBuûdî
–
Arg
* 
¨g
 ) : 
	`m_¨g
(árg ) {}

4316 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
M
>

4317 
	`böd
–
M
 
C
::* 
fõld
, 
°d
::
°rög
 c⁄°& 
∂a˚hﬁdî
 ) {

4318 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundD©aMembî
<
C
,
M
>–
fõld
 );

4319 
m_¨g
->
∂a˚hﬁdî
 =Ölaceholder;

4322 
ãm∂©e
<
ty≥«me
 
C
>

4323 
	`böd
–
boﬁ
 
C
::* 
fõld
 ) {

4324 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundD©aMembî
<
C
,
boﬁ
>–
fõld
 );

4328 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
M
>

4329 
	`böd
–(
C
::* 
u«ryMëhod
)–
M
 ), 
°d
::
°rög
 c⁄°& 
∂a˚hﬁdî
 ) {

4330 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundU«ryMëhod
<
C
,
M
>–
u«ryMëhod
 );

4331 
m_¨g
->
∂a˚hﬁdî
 =Ölaceholder;

4335 
ãm∂©e
<
ty≥«me
 
C
>

4336 
	`böd
–(
C
::* 
u«ryMëhod
)–
boﬁ
 ) ) {

4337 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundU«ryMëhod
<
C
,
boﬁ
>–
u«ryMëhod
 );

4341 
ãm∂©e
<
ty≥«me
 
C
>

4342 
	`böd
–(
C
::* 
nuŒ¨yMëhod
)() ) {

4343 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundNuŒ¨yMëhod
<
C
>–
nuŒ¨yMëhod
 );

4347 
ãm∂©e
<
ty≥«me
 
C
>

4348 
	`böd
–(* 
u«ryFun˘i⁄
)–
C
& ) ) {

4349 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundU«ryFun˘i⁄
<
C
>–
u«ryFun˘i⁄
 );

4353 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
T
>

4354 
	`böd
–(* 
bö¨yFun˘i⁄
)–
C
&, 
T
 ), 
°d
::
°rög
 c⁄°& 
∂a˚hﬁdî
 ) {

4355 
m_¨g
->
boundFõld
 = 
√w
 
Dëaû
::
BoundBö¨yFun˘i⁄
<
C
, 
T
>–
bö¨yFun˘i⁄
 );

4356 
m_¨g
->
∂a˚hﬁdî
 =Ölaceholder;

4359 
ArgBuûdî
& 
	`des¸ibe
–
°d
::
°rög
 c⁄°& 
des¸ùti⁄
 ) {

4360 
m_¨g
->
des¸ùti⁄
 = description;

4361  *
this
;

4363 
ArgBuûdî
& 
	`dëaû
–
°d
::
°rög
 c⁄°& 
dëaû
 ) {

4364 
m_¨g
->
dëaû
 = detail;

4365  *
this
;

4368 
¥Ÿe˘ed
:

4369 
Arg
* 
m_¨g
;

4372 ˛as†
	cO±Buûdî
 : 
public
 
ArgBuûdî
 {

4373 
public
:

4374 
	`O±Buûdî
–
Arg
* 
¨g
 ) : 
	`ArgBuûdî
(árg ) {}

4375 
	`O±Buûdî
–
O±Buûdî
& 
Ÿhî
 ) : 
	`ArgBuûdî
( other ) {}

4377 
O±Buûdî
& 
›î©‹
[]–
°d
::
°rög
 c⁄°& 
›tName
 ) {

4378 
	`addO±Name
–*
ArgBuûdî
::
m_¨g
, 
›tName
 );

4379  *
this
;

4383 
public
:

4385 
	`Comm™dLöe
()

4386 : 
	`m_boundPro˚ssName
–
√w
 
Dëaû
::
NuŒBödî
<
C⁄figT
>() ),

4387 
	`m_highe°S≥cifõdArgPosôi⁄
( 0 ),

4388 
	`m_throwOnUƒecogni£dTokís
–
Ál£
 )

4390 
	`Comm™dLöe
–
Comm™dLöe
 c⁄°& 
Ÿhî
 )

4391 : 
	`m_boundPro˚ssName
–
Ÿhî
.
m_boundPro˚ssName
 ),

4392 
	`m_›ti⁄s
 ( 
Ÿhî
.
m_›ti⁄s
 ),

4393 
	`m_posôi⁄ÆArgs
–
Ÿhî
.
m_posôi⁄ÆArgs
 ),

4394 
	`m_highe°S≥cifõdArgPosôi⁄
–
Ÿhî
.
m_highe°S≥cifõdArgPosôi⁄
 ),

4395 
	`m_throwOnUƒecogni£dTokís
–
Ÿhî
.
m_throwOnUƒecogni£dTokís
 )

4397 if–
Ÿhî
.
m_ÊﬂtögArg
.
	`gë
() )

4398 
m_ÊﬂtögArg
.
	`ª£t
–
√w
 
	`Arg
–*
Ÿhî
.m_floatingArg ) );

4401 
Comm™dLöe
& 
	`£tThrowOnUƒecogni£dTokís
–
boﬁ
 
shouldThrow
 = 
åue
 ) {

4402 
m_throwOnUƒecogni£dTokís
 = 
shouldThrow
;

4403  *
this
;

4406 
O±Buûdî
 
›î©‹
[]–
°d
::
°rög
 c⁄°& 
›tName
 ) {

4407 
m_›ti⁄s
.
	`push_back
–
	`Arg
() );

4408 
	`addO±Name
–
m_›ti⁄s
.
	`back
(), 
›tName
 );

4409 
O±Buûdî
 
	`buûdî
–&
m_›ti⁄s
.
	`back
() );

4410  
buûdî
;

4413 
ArgBuûdî
 
›î©‹
[]–
posôi⁄
 ) {

4414 
m_posôi⁄ÆArgs
.
	`ö£π
–
°d
::
	`make_∑ú
–
posôi⁄
, 
	`Arg
() ) );

4415 if–
posôi⁄
 > 
m_highe°S≥cifõdArgPosôi⁄
 )

4416 
m_highe°S≥cifõdArgPosôi⁄
 = 
posôi⁄
;

4417 
	`£tPosôi⁄ÆArg
–
m_posôi⁄ÆArgs
[
posôi⁄
],Öosition );

4418 
ArgBuûdî
 
	`buûdî
–&
m_posôi⁄ÆArgs
[
posôi⁄
] );

4419  
buûdî
;

4423 
ArgBuûdî
 
›î©‹
[]–
U≈osôi⁄ÆTag
 ) {

4424 if–
m_ÊﬂtögArg
.
	`gë
() )

4425 
throw
 
°d
::
	`logic_îr‹
( "Only one unpositionalárgument can beádded" );

4426 
m_ÊﬂtögArg
.
	`ª£t
–
√w
 
	`Arg
() );

4427 
ArgBuûdî
 
	`buûdî
–
m_ÊﬂtögArg
.
	`gë
() );

4428  
buûdî
;

4431 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
M
>

4432 
	`bödPro˚ssName
–
M
 
C
::* 
fõld
 ) {

4433 
m_boundPro˚ssName
 = 
√w
 
Dëaû
::
BoundD©aMembî
<
C
,
M
>–
fõld
 );

4435 
ãm∂©e
<
ty≥«me
 
C
,Åy≥«mê
M
>

4436 
	`bödPro˚ssName
–(
C
::*
_u«ryMëhod
)–
M
 ) ) {

4437 
m_boundPro˚ssName
 = 
√w
 
Dëaû
::
BoundU«ryMëhod
<
C
,
M
>–
_u«ryMëhod
 );

4440 
	`›tUßge
–
°d
::
o°ªam
& 
os
, std::
size_t
 
ödít
 = 0, std::size_à
width
 = 
Dëaû
::
c⁄sﬁeWidth
 ) const {

4441 
ty≥«me
 
°d
::
ve˘‹
<
Arg
>::
c⁄°_ôî©‹
 
ôBegö
 = 
m_›ti⁄s
.
	`begö
(), 
ôEnd
 = m_›ti⁄s.
	`íd
(), 
ô
;

4442 
°d
::
size_t
 
maxWidth
 = 0;

4443  
ô
 = 
ôBegö
; ià!
ôEnd
; ++it )

4444 
maxWidth
 = (
°d
::
max
)–maxWidth, 
ô
->
	`comm™ds
().
	`size
() );

4446  
ô
 = 
ôBegö
; ià!
ôEnd
; ++it ) {

4447 
Dëaû
::
Text
 
	`ußge
–
ô
->
	`comm™ds
(), Dëaû::
	`TextAâribuãs
()

4448 .
	`£tWidth
–
maxWidth
+
ödít
 )

4449 .
	`£tIndít
–
ödít
 ) );

4450 
Dëaû
::
Text
 
	`desc
–
ô
->
des¸ùti⁄
, Dëaû::
	`TextAâribuãs
()

4451 .
	`£tWidth
–
width
 - 
maxWidth
 - 3 ) );

4453  
°d
::
size_t
 
i
 = 0; i < (°d::
max
)–
ußge
.
	`size
(), 
desc
.size() ); ++i ) {

4454 
°d
::
°rög
 
ußgeCﬁ
 = 
i
 < 
ußge
.
	`size
() ? usage[i] : "";

4455 
os
 << 
ußgeCﬁ
;

4457 if–
i
 < 
desc
.
	`size
(Ë&& !desc[i].
	`em±y
() )

4458 
os
 << 
°d
::
	`°rög
–
ödít
 + 2 + 
maxWidth
 - 
ußgeCﬁ
.
	`size
(), ' ' )

4459 << 
desc
[
i
];

4460 
os
 << "\n";

4464 
°d
::
°rög
 
	`›tUßge
() const {

4465 
°d
::
o°rög°ªam
 
oss
;

4466 
	`›tUßge
–
oss
 );

4467  
oss
.
	`°r
();

4470 
	`¨gSyn›sis
–
°d
::
o°ªam
& 
os
 ) const {

4471  
i
 = 1; i <
m_highe°S≥cifõdArgPosôi⁄
; ++i ) {

4472 if–
i
 > 1 )

4473 
os
 << " ";

4474 
ty≥«me
 
°d
::
m≠
<, 
Arg
>::
c⁄°_ôî©‹
 
ô
 = 
m_posôi⁄ÆArgs
.
	`föd
–
i
 );

4475 if–
ô
 !
m_posôi⁄ÆArgs
.
	`íd
() )

4476 
os
 << "<" << 
ô
->
£c⁄d
.
∂a˚hﬁdî
 << ">";

4477 if–
m_ÊﬂtögArg
.
	`gë
() )

4478 
os
 << "<" << 
m_ÊﬂtögArg
->
∂a˚hﬁdî
 << ">";

4480 
throw
 
°d
::
	`logic_îr‹
( "non consecutiveÖositionalárguments withÇo floatingárgs" );

4483 if–
m_ÊﬂtögArg
.
	`gë
() ) {

4484 if–
m_highe°S≥cifõdArgPosôi⁄
 > 1 )

4485 
os
 << " ";

4486 
os
 << "[<" << 
m_ÊﬂtögArg
->
∂a˚hﬁdî
 << "> ...]";

4489 
°d
::
°rög
 
	`¨gSyn›sis
() const {

4490 
°d
::
o°rög°ªam
 
oss
;

4491 
	`¨gSyn›sis
–
oss
 );

4492  
oss
.
	`°r
();

4495 
	`ußge
–
°d
::
o°ªam
& 
os
, std::
°rög
 c⁄°& 
¥ocName
 ) const {

4496 
	`vÆid©e
();

4497 
os
 << "ußge:\¿ " << 
¥ocName
 << " ";

4498 
	`¨gSyn›sis
–
os
 );

4499 if–!
m_›ti⁄s
.
	`em±y
() ) {

4500 
os
 << " [options]\n\nwhere optionsáre: \n";

4501 
	`›tUßge
–
os
, 2 );

4503 
os
 << "\n";

4505 
°d
::
°rög
 
	`ußge
–°d::°rög c⁄°& 
¥ocName
 ) const {

4506 
°d
::
o°rög°ªam
 
oss
;

4507 
	`ußge
–
oss
, 
¥ocName
 );

4508  
oss
.
	`°r
();

4511 
C⁄figT
 
	`∑r£
–
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
¨gs
 ) const {

4512 
C⁄figT
 
c⁄fig
;

4513 
	`∑r£I¡o
–
¨gs
, 
c⁄fig
 );

4514  
c⁄fig
;

4517 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
	`∑r£I¡o
–°d::ve˘‹<°d::
°rög
> c⁄°& 
¨gs
, 
C⁄figT
& 
c⁄fig
 ) const {

4518 
°d
::
°rög
 
¥o˚ssName
 = 
¨gs
[0];

4519 
°d
::
size_t
 
œ°Sœsh
 = 
¥o˚ssName
.
	`föd_œ°_of
( "/\\" );

4520 if–
œ°Sœsh
 !
°d
::
°rög
::
≈os
 )

4521 
¥o˚ssName
 =Öro˚ssName.
	`sub°r
–
œ°Sœsh
+1 );

4522 
m_boundPro˚ssName
.
	`£t
–
c⁄fig
, 
¥o˚ssName
 );

4523 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
tokís
;

4524 
P¨£r
 
∑r£r
;

4525 
∑r£r
.
	`∑r£I¡oTokís
–
¨gs
, 
tokís
 );

4526  
	`p›uœã
–
tokís
, 
c⁄fig
 );

4529 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
	`p›uœã
–°d::ve˘‹<P¨£r::Tokí> c⁄°& 
tokís
, 
C⁄figT
& 
c⁄fig
 ) const {

4530 
	`vÆid©e
();

4531 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
unu£dTokís
 = 
	`p›uœãO±i⁄s
–
tokís
, 
c⁄fig
 );

4532 
unu£dTokís
 = 
	`p›uœãFixedArgs
–unu£dTokís, 
c⁄fig
 );

4533 
unu£dTokís
 = 
	`p›uœãFlﬂtögArgs
–unu£dTokís, 
c⁄fig
 );

4534  
unu£dTokís
;

4537 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
	`p›uœãO±i⁄s
–°d::ve˘‹<P¨£r::Tokí> c⁄°& 
tokís
, 
C⁄figT
& 
c⁄fig
 ) const {

4538 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
unu£dTokís
;

4539 
°d
::
ve˘‹
<°d::
°rög
> 
îr‹s
;

4540  
°d
::
size_t
 
i
 = 0; i < 
tokís
.
	`size
(); ++i ) {

4541 
P¨£r
::
Tokí
 c⁄°& 
tokí
 = 
tokís
[
i
];

4542 
ty≥«me
 
°d
::
ve˘‹
<
Arg
>::
c⁄°_ôî©‹
 
ô
 = 
m_›ti⁄s
.
	`begö
(), 
ôEnd
 = m_›ti⁄s.
	`íd
();

4543 ; 
ô
 !
ôEnd
; ++it ) {

4544 
Arg
 c⁄°& 
¨g
 = *
ô
;

4546 
åy
 {

4547 if––
tokí
.
ty≥
 =
P¨£r
::
Tokí
::
Sh‹tO±
 && 
¨g
.
	`hasSh‹tName
–tokí.
d©a
 ) ) ||

4548 –
tokí
.
ty≥
 =
P¨£r
::
Tokí
::
L⁄gO±
 && 
¨g
.
	`hasL⁄gName
–tokí.
d©a
 ) ) ) {

4549 if–
¨g
.
	`èkesArg
() ) {

4550 if–
i
 =
tokís
.
	`size
()-1 ||Åokís[i+1].
ty≥
 !
P¨£r
::
Tokí
::
Posôi⁄Æ
 )

4551 
îr‹s
.
	`push_back
–"Ex≥˘edárgumíàtÿ›ti⁄: " + 
tokí
.
d©a
 );

4553 
¨g
.
boundFõld
.
	`£t
–
c⁄fig
, 
tokís
[++
i
].
d©a
 );

4556 
¨g
.
boundFõld
.
	`£t
–
c⁄fig
, "true" );

4561 
	`ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

4562 
îr‹s
.
	`push_back
–
°d
::
	`°rög
–
ex
.
	`wh©
(ËË+ "\n- whûê∑rsög: (" + 
¨g
.
	`comm™ds
() + ")" );

4565 if–
ô
 =
ôEnd
 ) {

4566 if–
tokí
.
ty≥
 =
P¨£r
::
Tokí
::
Posôi⁄Æ
 || !
m_throwOnUƒecogni£dTokís
 )

4567 
unu£dTokís
.
	`push_back
–
tokí
 );

4568 if–
îr‹s
.
	`em±y
(Ë&& 
m_throwOnUƒecogni£dTokís
 )

4569 
îr‹s
.
	`push_back
–"uƒecogni£d o±i⁄: " + 
tokí
.
d©a
 );

4572 if–!
îr‹s
.
	`em±y
() ) {

4573 
°d
::
o°rög°ªam
 
oss
;

4574  
°d
::
ve˘‹
<°d::
°rög
>::
c⁄°_ôî©‹
 
ô
 = 
îr‹s
.
	`begö
(), 
ôEnd
 =Éº‹s.
	`íd
();

4575 
ô
 !
ôEnd
;

4576 ++
ô
 ) {

4577 if–
ô
 !
îr‹s
.
	`begö
() )

4578 
oss
 << "\n";

4579 
oss
 << *
ô
;

4581 
throw
 
°d
::
	`ru¡ime_îr‹
–
oss
.
	`°r
() );

4583  
unu£dTokís
;

4585 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
	`p›uœãFixedArgs
–°d::ve˘‹<P¨£r::Tokí> c⁄°& 
tokís
, 
C⁄figT
& 
c⁄fig
 ) const {

4586 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
unu£dTokís
;

4587 
posôi⁄
 = 1;

4588  
°d
::
size_t
 
i
 = 0; i < 
tokís
.
	`size
(); ++i ) {

4589 
P¨£r
::
Tokí
 c⁄°& 
tokí
 = 
tokís
[
i
];

4590 
ty≥«me
 
°d
::
m≠
<, 
Arg
>::
c⁄°_ôî©‹
 
ô
 = 
m_posôi⁄ÆArgs
.
	`föd
–
posôi⁄
 );

4591 if–
ô
 !
m_posôi⁄ÆArgs
.
	`íd
() )

4592 
ô
->
£c⁄d
.
boundFõld
.
	`£t
–
c⁄fig
, 
tokí
.
d©a
 );

4594 
unu£dTokís
.
	`push_back
–
tokí
 );

4595 if–
tokí
.
ty≥
 =
P¨£r
::
Tokí
::
Posôi⁄Æ
 )

4596 
posôi⁄
++;

4598  
unu£dTokís
;

4600 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
	`p›uœãFlﬂtögArgs
–°d::ve˘‹<P¨£r::Tokí> c⁄°& 
tokís
, 
C⁄figT
& 
c⁄fig
 ) const {

4601 if–!
m_ÊﬂtögArg
.
	`gë
() )

4602  
tokís
;

4603 
°d
::
ve˘‹
<
P¨£r
::
Tokí
> 
unu£dTokís
;

4604  
°d
::
size_t
 
i
 = 0; i < 
tokís
.
	`size
(); ++i ) {

4605 
P¨£r
::
Tokí
 c⁄°& 
tokí
 = 
tokís
[
i
];

4606 if–
tokí
.
ty≥
 =
P¨£r
::
Tokí
::
Posôi⁄Æ
 )

4607 
m_ÊﬂtögArg
->
boundFõld
.
	`£t
–
c⁄fig
, 
tokí
.
d©a
 );

4609 
unu£dTokís
.
	`push_back
–
tokí
 );

4611  
unu£dTokís
;

4614 
	`vÆid©e
() const

4616 if–
m_›ti⁄s
.
	`em±y
(Ë&& 
m_posôi⁄ÆArgs
.em±y(Ë&& !
m_ÊﬂtögArg
.
	`gë
() )

4617 
throw
 
°d
::
	`logic_îr‹
( "No options orárguments specified" );

4619  
ty≥«me
 
°d
::
ve˘‹
<
Arg
>::
c⁄°_ôî©‹
 
ô
 = 
m_›ti⁄s
.
	`begö
(),

4620 
ôEnd
 = 
m_›ti⁄s
.
	`íd
();

4621 
ô
 !
ôEnd
; ++it )

4622 
ô
->
	`vÆid©e
();

4625 
¥iv©e
:

4626 
Dëaû
::
BoundArgFun˘i⁄
<
C⁄figT
> 
m_boundPro˚ssName
;

4627 
°d
::
ve˘‹
<
Arg
> 
m_›ti⁄s
;

4628 
°d
::
m≠
<, 
Arg
> 
m_posôi⁄ÆArgs
;

4629 
ArgAutoPå
 
m_ÊﬂtögArg
;

4630 
m_highe°S≥cifõdArgPosôi⁄
;

4631 
boﬁ
 
m_throwOnUƒecogni£dTokís
;

4634 
	}
}

4636 
	gSTITCH_CLARA_CLOSE_NAMESPACE


4637 #unde‡
STITCH_CLARA_OPEN_NAMESPACE


4638 #unde‡
STITCH_CLARA_CLOSE_NAMESPACE


4641 #unde‡
STITCH_CLARA_OPEN_NAMESPACE


4644 #ifde‡
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH


4645 
	#CLARA_CONFIG_CONSOLE_WIDTH
 
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH


	)

4646 #unde‡
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH


4649 
	~<f°ªam
>

4651 
«me•a˚
 
	gC©ch
 {

4653 
ölöe
 
ab‹tA·îFú°
–
C⁄figD©a
& 
c⁄fig
 ) { 
	gc⁄fig
.
	gab‹tA·î
 = 1; }

4654 
ölöe
 
ab‹tA·îX
–
C⁄figD©a
& 
c⁄fig
, 
x
 ) {

4655 if–
	gx
 < 1 )

4656 
throw
 
	g°d
::
ru¡ime_îr‹
( "Valueáfter -x or --abortAfter must be greaterÅhan zero" );

4657 
	gc⁄fig
.
	gab‹tA·î
 = 
x
;

4659 
ölöe
 
addTe°OrTags
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
_ã°S≥c
 ) { c⁄fig.
ã°sOrTags
.
push_back
( _testSpec ); }

4660 
ölöe
 
addRï‹ãrName
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
_ªp‹ãrName
 ) { c⁄fig.
ªp‹ãrNames
.
push_back
( _reporterName ); }

4662 
ölöe
 
addW¨nög
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
_w¨nög
 ) {

4663 if–
_w¨nög
 == "NoAssertions" )

4664 
c⁄fig
.
w¨nögs
 = 
°©ic_ˇ°
<
W¨nAbout
::
Wh©
>–c⁄fig.w¨nög†| W¨nAbout::
NoAs£πi⁄s
 );

4666 
throw
 
	g°d
::
ru¡ime_îr‹
–"Uƒecogni£d w¨nög: '" + 
_w¨nög
 + "'" );

4668 
ölöe
 
£tOrdî
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
‹dî
 ) {

4669 if–
°¨tsWôh
–"de˛¨ed", 
‹dî
 ) )

4670 
	gc⁄fig
.
	grunOrdî
 = 
RunTe°s
::
InDe˛¨©i⁄Ordî
;

4671 if–
°¨tsWôh
–"Àxiˇl", 
‹dî
 ) )

4672 
	gc⁄fig
.
	grunOrdî
 = 
RunTe°s
::
InLexicogøphiˇlOrdî
;

4673 if–
°¨tsWôh
–"øndom", 
‹dî
 ) )

4674 
	gc⁄fig
.
	grunOrdî
 = 
RunTe°s
::
InR™domOrdî
;

4676 
throw
 
	g°d
::
ru¡ime_îr‹
–"Uƒecogni£d ordîög: '" + 
‹dî
 + "'" );

4678 
ölöe
 
£tRngSìd
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
£ed
 ) {

4679 if–
£ed
 == "time" ) {

4680 
c⁄fig
.
∫gSìd
 = 
°©ic_ˇ°
<>–
°d
::
time
(0) );

4683 
	g°d
::
°rög°ªam
 
ss
;

4684 
	gss
 << 
	g£ed
;

4685 
	gss
 >> 
	gc⁄fig
.
	g∫gSìd
;

4686 if–
	gss
.
Áû
() )

4687 
throw
 
	g°d
::
ru¡ime_îr‹
( "ArgmentÅo --rng-seed should beÅhe word 'time' oráÇumber" );

4690 
ölöe
 
£tVîbosôy
–
C⁄figD©a
& 
c⁄fig
, 
Àvñ
 ) {

4692 
	gc⁄fig
.
	gvîbosôy
 = 
°©ic_ˇ°
<
Vîbosôy
::
Levñ
>–
Àvñ
 );

4694 
ölöe
 
£tShowDuøti⁄s
–
C⁄figD©a
& 
c⁄fig
, 
boﬁ
 
_showDuøti⁄s
 ) {

4695 
	gc⁄fig
.
	gshowDuøti⁄s
 = 
_showDuøti⁄s


4696 ? 
ShowDuøti⁄s
::
Always


4697 : 
ShowDuøti⁄s
::
Nevî
;

4699 
ölöe
 
£tU£Cﬁour
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
vÆue
 ) {

4700 
°d
::
°rög
 
mode
 = 
toLowî
–
vÆue
 );

4702 if–
	gmode
 == "yes" )

4703 
c⁄fig
.
u£Cﬁour
 = 
U£Cﬁour
::
Yes
;

4704 if–
	gmode
 == "no" )

4705 
c⁄fig
.
u£Cﬁour
 = 
U£Cﬁour
::
No
;

4706 if–
	gmode
 == "auto" )

4707 
c⁄fig
.
u£Cﬁour
 = 
U£Cﬁour
::
Auto
;

4709 
throw
 
	g°d
::
ru¡ime_îr‹
( "colour mode must be one of:áuto, yes orÇo" );

4711 
ölöe
 
f‹˚Cﬁour
–
C⁄figD©a
& 
c⁄fig
 ) {

4712 
	gc⁄fig
.
	gu£Cﬁour
 = 
U£Cﬁour
::
Yes
;

4714 
ölöe
 
lﬂdTe°NamesFromFûe
–
C⁄figD©a
& 
c⁄fig
, 
°d
::
°rög
 c⁄°& 
_fûíame
 ) {

4715 
°d
::
if°ªam
 
f
–
_fûíame
.
c_°r
() );

4716 if–!
	gf
.
is_›í
() )

4717 
throw
 
	g°d
::
domaö_îr‹
–"U«bÀÅÿlﬂd i≈uàfûe: " + 
_fûíame
 );

4719 
	g°d
::
°rög
 
löe
;

4720  
	g°d
::
gëlöe
–
f
, 
löe
 ) ) {

4721 
	glöe
 = 
åim
(
löe
);

4722 if–!
	glöe
.
em±y
(Ë&& !
°¨tsWôh
–
löe
, "#" ) )

4723 
addTe°OrTags
–
c⁄fig
, "\"" + 
löe
 + "\"," );

4727 
ölöe
 
	gCœø
::
Comm™dLöe
<
C⁄figD©a
> 
makeComm™dLöeP¨£r
() {

4729 
usög
 
«me•a˚
 
Cœø
;

4730 
	gComm™dLöe
<
	gC⁄figD©a
> 
	g˛i
;

4732 
	g˛i
.
bödPro˚ssName
–&
C⁄figD©a
::
¥o˚ssName
 );

4734 
	g˛i
["-?"]["-h"]["--help"]

4735 .
des¸ibe
( "display usage information" )

4736 .
böd
–&
C⁄figD©a
::
showHñp
 );

4738 
	g˛i
["-l"]["--list-tests"]

4739 .
des¸ibe
( "listáll/matchingÅest cases" )

4740 .
böd
–&
C⁄figD©a
::
li°Te°s
 );

4742 
	g˛i
["-t"]["--list-tags"]

4743 .
des¸ibe
( "listáll/matchingÅags" )

4744 .
böd
–&
C⁄figD©a
::
li°Tags
 );

4746 
	g˛i
["-s"]["--success"]

4747 .
des¸ibe
( "include successfulÅests in output" )

4748 .
böd
–&
C⁄figD©a
::
showSuc˚ssfulTe°s
 );

4750 
	g˛i
["-b"]["--break"]

4751 .
des¸ibe
( "break into debugger on failure" )

4752 .
böd
–&
C⁄figD©a
::
shouldDebugBªak
 );

4754 
	g˛i
["-e"]["--nothrow"]

4755 .
des¸ibe
( "skipÉxceptionÅests" )

4756 .
böd
–&
C⁄figD©a
::
noThrow
 );

4758 
	g˛i
["-i"]["--invisibles"]

4759 .
des¸ibe
( "show invisibles (tabs,Çewlines)" )

4760 .
böd
–&
C⁄figD©a
::
showInvisibÀs
 );

4762 
	g˛i
["-o"]["--out"]

4763 .
des¸ibe
( "output filename" )

4764 .
böd
–&
C⁄figD©a
::
ouçutFûíame
, "filename" );

4766 
	g˛i
["-r"]["--reporter"]

4768 .
des¸ibe
( "reporterÅo use (defaultsÅo console)" )

4769 .
böd
–&
addRï‹ãrName
, "name" );

4771 
	g˛i
["-n"]["--name"]

4772 .
des¸ibe
( "suiteÇame" )

4773 .
böd
–&
C⁄figD©a
::
«me
, "name" );

4775 
	g˛i
["-a"]["--abort"]

4776 .
des¸ibe
( "abortát first failure" )

4777 .
böd
–&
ab‹tA·îFú°
 );

4779 
	g˛i
["-x"]["--abortx"]

4780 .
des¸ibe
( "abortáfter x failures" )

4781 .
böd
–&
ab‹tA·îX
, "no. failures" );

4783 
	g˛i
["-w"]["--warn"]

4784 .
des¸ibe
( "enable warnings" )

4785 .
böd
–&
addW¨nög
, "warningÇame" );

4794 
	g˛i
[
_
]

4795 .
des¸ibe
( "whichÅest orÅestsÅo use" )

4796 .
böd
–&
addTe°OrTags
, "testÇame,Öattern orÅags" );

4798 
	g˛i
["-d"]["--durations"]

4799 .
des¸ibe
( "showÅest durations" )

4800 .
böd
–&
£tShowDuøti⁄s
, "yes|no" );

4802 
	g˛i
["-f"]["--input-file"]

4803 .
des¸ibe
( "loadÅestÇamesÅoÑun fromá file" )

4804 .
böd
–&
lﬂdTe°NamesFromFûe
, "filename" );

4806 
	g˛i
["-#"]["--filenames-as-tags"]

4807 .
des¸ibe
( "addsáÅag forÅhe filename" )

4808 .
böd
–&
C⁄figD©a
::
fûíamesAsTags
 );

4811 
	g˛i
["--list-test-names-only"]

4812 .
des¸ibe
( "listáll/matchingÅest casesÇames only" )

4813 .
böd
–&
C⁄figD©a
::
li°Te°NamesO∆y
 );

4815 
	g˛i
["--list-reporters"]

4816 .
des¸ibe
( "listállÑeporters" )

4817 .
böd
–&
C⁄figD©a
::
li°Rï‹ãrs
 );

4819 
	g˛i
["--order"]

4820 .
des¸ibe
( "test case order (defaultsÅo decl)" )

4821 .
böd
–&
£tOrdî
, "decl|lex|rand" );

4823 
	g˛i
["--rng-seed"]

4824 .
des¸ibe
( "setá specific seed forÑandomÇumbers" )

4825 .
böd
–&
£tRngSìd
, "'time'|number" );

4827 
	g˛i
["--force-colour"]

4828 .
des¸ibe
( "force colourised output (deprecated)" )

4829 .
böd
–&
f‹˚Cﬁour
 );

4831 
	g˛i
["--use-colour"]

4832 .
des¸ibe
( "should output be colourised" )

4833 .
böd
–&
£tU£Cﬁour
, "yes|no" );

4835  
	g˛i
;

4841 
	#TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED


	)

4844 
	#TWOBLUECUBES_CATCH_TEXT_H_INCLUDED


	)

4846 
	#TBC_TEXT_FORMAT_CONSOLE_WIDTH
 
CATCH_CONFIG_CONSOLE_WIDTH


	)

4848 
	#CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE
 
C©ch


	)

4851 #i‚de‡
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE


4852 #ifde‡
TWOBLUECUBES_TEXT_FORMAT_H_INCLUDED


4853 #i‚de‡
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED


4854 
	#TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED


	)

4857 
	#TWOBLUECUBES_TEXT_FORMAT_H_INCLUDED


	)

4860 #i‚de‡
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED


4861 
	~<°rög
>

4862 
	~<ve˘‹
>

4863 
	~<s°ªam
>

4866 #ifde‡
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE


4867 
«me•a˚
 
	gCLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE
 {

4870 
«me•a˚
 
	gTbc
 {

4872 #ifde‡
TBC_TEXT_FORMAT_CONSOLE_WIDTH


4873 c⁄° 
	gc⁄sﬁeWidth
 = 
TBC_TEXT_FORMAT_CONSOLE_WIDTH
;

4875 c⁄° 
	gc⁄sﬁeWidth
 = 80;

4878 
	sTextAâribuãs
 {

4879 
TextAâribuãs
()

4880 : 
öôülIndít
–
°d
::
°rög
::
≈os
 ),

4881 
ödít
( 0 ),

4882 
width
–
c⁄sﬁeWidth
-1 ),

4883 
èbCh¨
( '\t' )

4886 
	gTextAâribuãs
& 
£tInôülIndít
–
°d
::
size_t
 
_vÆue
 ) { 
öôülIndít
 = _vÆue;  *
	gthis
; }

4887 
	gTextAâribuãs
& 
£tIndít
–
°d
::
size_t
 
_vÆue
 ) { 
ödít
 = _vÆue;  *
	gthis
; }

4888 
	gTextAâribuãs
& 
£tWidth
–
°d
::
size_t
 
_vÆue
 ) { 
width
 = _vÆue;  *
	gthis
; }

4889 
	gTextAâribuãs
& 
£tTabCh¨
–
_vÆue
 ) { 
	gèbCh¨
 = _vÆue;  *
	gthis
; }

4891 
	g°d
::
size_t
 
öôülIndít
;

4892 
	g°d
::
size_t
 
ödít
;

4893 
	g°d
::
size_t
 
width
;

4894 
	gèbCh¨
;

4897 ˛as†
	cText
 {

4898 
	gpublic
:

4899 
Text
–
°d
::
°rög
 c⁄°& 
_°r
, 
TextAâribuãs
 c⁄°& 
_©å
 = TextAttributes() )

4900 : 
©å
–
_©å
 )

4902 
°d
::
°rög
 
wøµabÀCh¨s
 = " [({.,/|\\-";

4903 
	g°d
::
size_t
 
ödít
 = 
_©å
.
öôülIndít
 !
°d
::
°rög
::
≈os


4904 ? 
_©å
.
öôülIndít


4905 : 
_©å
.
ödít
;

4906 
	g°d
::
°rög
 
ªmaödî
 = 
_°r
;

4908  !
	gªmaödî
.
em±y
() ) {

4909 if–
	glöes
.
size
() >= 1000 ) {

4910 
löes
.
push_back
( "... messageÅruncated dueÅoÉxcessive size" );

4913 
	g°d
::
size_t
 
èbPos
 = 
°d
::
°rög
::
≈os
;

4914 
	g°d
::
size_t
 
width
 = (
°d
::
mö
)–
ªmaödî
.
size
(), 
	g_©å
.
	gwidth
 - 
	gödít
 );

4915 
	g°d
::
size_t
 
pos
 = 
ªmaödî
.
föd_fú°_of
( '\n' );

4916 if–
	gpos
 <
width
 ) {

4917 
width
 = 
pos
;

4919 
	gpos
 = 
ªmaödî
.
föd_œ°_of
–
_©å
.
èbCh¨
, 
width
 );

4920 if–
	gpos
 !
°d
::
°rög
::
≈os
 ) {

4921 
èbPos
 = 
pos
;

4922 if–
	gªmaödî
[
width
] == '\n' )

4923 
width
--;

4924 
	gªmaödî
 = 
ªmaödî
.
sub°r
–0, 
èbPos
 ) +Ñemainder.substr(ÅabPos+1 );

4927 if–
	gwidth
 =
ªmaödî
.
size
() ) {

4928 
•li˚Löe
–
ödít
, 
ªmaödî
, 
width
 );

4930 if–
	gªmaödî
[
width
] == '\n' ) {

4931 
•li˚Löe
–
ödít
, 
ªmaödî
, 
width
 );

4932 if–
	gwidth
 <1 || 
ªmaödî
.
size
() != 1 )

4933 
ªmaödî
 =Ñemaödî.
sub°r
( 1 );

4934 
	gödít
 = 
_©å
.
ödít
;

4937 
	gpos
 = 
ªmaödî
.
föd_œ°_of
–
wøµabÀCh¨s
, 
width
 );

4938 if–
	gpos
 !
°d
::
°rög
::
≈os
 && 
pos
 > 0 ) {

4939 
•li˚Löe
–
ödít
, 
ªmaödî
, 
pos
 );

4940 if–
	gªmaödî
[0] == ' ' )

4941 
ªmaödî
 =Ñemaödî.
sub°r
( 1 );

4944 
•li˚Löe
–
ödít
, 
ªmaödî
, 
width
-1 );

4945 
	glöes
.
back
() += "-";

4947 if–
	glöes
.
size
() == 1 )

4948 
ödít
 = 
_©å
.indent;

4949 if–
	gèbPos
 !
°d
::
°rög
::
≈os
 )

4950 
ödít
 +
èbPos
;

4955 
•li˚Löe
–
°d
::
size_t
 
_ödít
, std::
°rög
& 
_ªmaödî
, std::size_à
_pos
 ) {

4956 
löes
.
push_back
–
°d
::
°rög
–
_ödít
, ' ' ) + 
_ªmaödî
.
sub°r
–0, 
_pos
 ) );

4957 
	g_ªmaödî
 = 
_ªmaödî
.
sub°r
–
_pos
 );

4960 
	g°d
::
	tve˘‹
<
	t°d
::
	t°rög
>::
	tc⁄°_ôî©‹
 const_iterator;

4962 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  
	glöes
.begin(); }

4963 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  
	glöes
.end(); }

4964 
	g°d
::
°rög
 c⁄°& 
œ°
(Ëc⁄° {  
löes
.
back
(); }

4965 
	g°d
::
size_t
 
size
(Ëc⁄° {  
löes
.size(); }

4966 
	g°d
::
°rög
 c⁄°& 
›î©‹
[]–
°d
::
size_t
 
_ödex
 ) c⁄° {  
löes
[_index]; }

4967 
	g°d
::
°rög
 
toSåög
() const {

4968 
°d
::
o°rög°ªam
 
oss
;

4969 
	goss
 << *
	gthis
;

4970  
	goss
.
°r
();

4973 
ölöe
 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
_°ªam
, 
Text
 c⁄°& 
	g_ãxt
 ) {

4974  
	gText
::
c⁄°_ôî©‹
 
ô
 = 
_ãxt
.
begö
(), 
	gôEnd
 = _ãxt.
íd
();

4975 
	gô
 !
ôEnd
; ++it ) {

4976 if–
	gô
 !
_ãxt
.
begö
() )

4977 
_°ªam
 << "\n";

4978 
	g_°ªam
 << *
	gô
;

4980  
	g_°ªam
;

4983 
	g¥iv©e
:

4984 
°d
::
°rög
 
°r
;

4985 
TextAâribuãs
 
	g©å
;

4986 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
löes
;

4991 #ifde‡
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE


4996 #unde‡
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE


4998 
«me•a˚
 
	gC©ch
 {

4999 
usög
 
	gTbc
::
Text
;

5000 
usög
 
	gTbc
::
TextAâribuãs
;

5004 
	#TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED


	)

5006 
«me•a˚
 
	gC©ch
 {

5008 
	sCﬁour
 {

5009 
	eCode
 {

5010 
	gN⁄e
 = 0,

5012 
	gWhôe
,

5013 
	gRed
,

5014 
	gGªí
,

5015 
	gBlue
,

5016 
	gCy™
,

5017 
	gYñlow
,

5018 
	gGªy
,

5020 
	gBright
 = 0x10,

5022 
	gBrightRed
 = 
Bright
 | 
Red
,

5023 
	gBrightGªí
 = 
Bright
 | 
Gªí
,

5024 
	gLightGªy
 = 
Bright
 | 
Gªy
,

5025 
	gBrightWhôe
 = 
Bright
 | 
Whôe
,

5028 
	gFûeName
 = 
LightGªy
,

5029 
	gW¨nög
 = 
Yñlow
,

5030 
	gResu…Eº‹
 = 
BrightRed
,

5031 
	gResu…Suc˚ss
 = 
BrightGªí
,

5032 
	gResu…Ex≥˘edFaûuª
 = 
W¨nög
,

5034 
	gEº‹
 = 
BrightRed
,

5035 
	gSuc˚ss
 = 
Gªí
,

5037 
	gOrigöÆEx¥essi⁄
 = 
Cy™
,

5038 
	gRec⁄°ru˘edEx¥essi⁄
 = 
Yñlow
,

5040 
	gSec⁄d¨yText
 = 
LightGªy
,

5041 
	gHódîs
 = 
Whôe


5045 
Cﬁour
–
Code
 
_cﬁourCode
 );

5046 
Cﬁour
–Cﬁou∏c⁄°& 
Ÿhî
 );

5047 ~
Cﬁour
();

5050 
u£
–
Code
 
_cﬁourCode
 );

5052 
	g¥iv©e
:

5053 
boﬁ
 
m_moved
;

5056 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Cﬁour
 c⁄°& ) {  
	gos
; }

5061 
	#TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED


	)

5063 
	~<°rög
>

5064 
	~<o°ªam
>

5065 
	~<m≠
>

5066 
	~<as£π.h
>

5068 
«me•a˚
 
	gC©ch


5070 
	sRï‹ãrC⁄fig
 {

5071 
ex∂icô
 
Rï‹ãrC⁄fig
–
På
<
IC⁄fig
 c⁄°> c⁄°& 
_fuŒC⁄fig
 )

5072 : 
m_°ªam
–&
_fuŒC⁄fig
->
°ªam
(Ë), 
m_fuŒC⁄fig
( _fullConfig ) {}

5074 
Rï‹ãrC⁄fig
–
På
<
IC⁄fig
 c⁄°> c⁄°& 
_fuŒC⁄fig
, 
°d
::
o°ªam
& 
_°ªam
 )

5075 : 
m_°ªam
–&
_°ªam
 ), 
m_fuŒC⁄fig
–
_fuŒC⁄fig
 ) {}

5077 
	g°d
::
o°ªam
& 
°ªam
(Ëc⁄° {  *
m_°ªam
; }

5078 
	gPå
<
IC⁄fig
 c⁄°> 
fuŒC⁄fig
(Ëc⁄° {  
	gm_fuŒC⁄fig
; }

5080 
	g¥iv©e
:

5081 
°d
::
o°ªam
* 
m_°ªam
;

5082 
	gPå
<
IC⁄fig
 c⁄°> 
	gm_fuŒC⁄fig
;

5085 
	sRï‹ãrPª„ªn˚s
 {

5086 
Rï‹ãrPª„ªn˚s
()

5087 : 
shouldRedúe˘StdOut
–
Ál£
 )

5090 
boﬁ
 
shouldRedúe˘StdOut
;

5093 
	gãm∂©e
<
ty≥«me
 
	gT
>

5094 
	gLazySèt
 : 
O±i⁄
<
T
> {

5095 
LazySèt
(Ë: 
u£d
–
Ál£
 ) {}

5096 
LazySèt
& 
›î©‹
=–
T
 c⁄°& 
_vÆue
 ) {

5097 
O±i⁄
<
T
>::
›î©‹
=–
_vÆue
 );

5098 
	gu£d
 = 
Ál£
;

5099  *
	gthis
;

5101 
ª£t
() {

5102 
	gO±i⁄
<
	gT
>::
ª£t
();

5103 
	gu£d
 = 
Ál£
;

5105 
boﬁ
 
	gu£d
;

5108 
	sTe°RunInfo
 {

5109 
Te°RunInfo
–
°d
::
°rög
 c⁄°& 
_«me
 ) : 
«me
( _name ) {}

5110 
°d
::
°rög
 
«me
;

5112 
	sGroupInfo
 {

5113 
GroupInfo
–
°d
::
°rög
 c⁄°& 
_«me
,

5114 
°d
::
size_t
 
_groupIndex
,

5115 
°d
::
size_t
 
_groupsCou¡
 )

5116 : 
«me
–
_«me
 ),

5117 
groupIndex
–
_groupIndex
 ),

5118 
groupsCou¡s
–
_groupsCou¡
 )

5121 
	g°d
::
°rög
 
«me
;

5122 
	g°d
::
size_t
 
groupIndex
;

5123 
	g°d
::
size_t
 
groupsCou¡s
;

5126 
	sAs£πi⁄Sèts
 {

5127 
As£πi⁄Sèts
–
As£πi⁄Resu…
 c⁄°& 
_as£πi⁄Resu…
,

5128 
°d
::
ve˘‹
<
MesßgeInfo
> c⁄°& 
_öfoMesßges
,

5129 
TŸÆs
 c⁄°& 
_tŸÆs
 )

5130 : 
as£πi⁄Resu…
–
_as£πi⁄Resu…
 ),

5131 
öfoMesßges
–
_öfoMesßges
 ),

5132 
tŸÆs
–
_tŸÆs
 )

5134 if–
	gas£πi⁄Resu…
.
hasMesßge
() ) {

5137 
MesßgeBuûdî
 
buûdî
–
as£πi⁄Resu…
.
gëTe°Ma¸oName
(),ás£πi⁄Resu….
gëSour˚Info
(),ás£πi⁄Resu….
gëResu…Ty≥
() );

5138 
	gbuûdî
 << 
	gas£πi⁄Resu…
.
gëMesßge
();

5139 
	gbuûdî
.
	gm_öfo
.
	gmesßge
 = 
buûdî
.
m_°ªam
.
°r
();

5141 
	göfoMesßges
.
push_back
–
buûdî
.
m_öfo
 );

5144 
	gvútuÆ
 ~
As£πi⁄Sèts
();

5146 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


5147 
As£πi⁄Sèts
( AssertionStats const& ) = ;

5148 
As£πi⁄Sèts
( AssertionStats && ) = ;

5149 
	gAs£πi⁄Sèts
& 
	g›î©‹
 = ( 
As£πi⁄Sèts
 const& ) = ;

5150 
	gAs£πi⁄Sèts
& 
	g›î©‹
 = ( 
As£πi⁄Sèts
 && ) = ;

5153 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
;

5154 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
öfoMesßges
;

5155 
TŸÆs
 
	gtŸÆs
;

5158 
	sSe˘i⁄Sèts
 {

5159 
Se˘i⁄Sèts
–
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
,

5160 
Cou¡s
 c⁄°& 
_as£πi⁄s
,

5161 
_duøti⁄InSec⁄ds
,

5162 
boﬁ
 
_missögAs£πi⁄s
 )

5163 : 
£˘i⁄Info
–
_£˘i⁄Info
 ),

5164 
as£πi⁄s
–
_as£πi⁄s
 ),

5165 
duøti⁄InSec⁄ds
–
_duøti⁄InSec⁄ds
 ),

5166 
missögAs£πi⁄s
–
_missögAs£πi⁄s
 )

5168 
	gvútuÆ
 ~
Se˘i⁄Sèts
();

5169 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


5170 
Se˘i⁄Sèts
( SectionStats const& ) = ;

5171 
Se˘i⁄Sèts
( SectionStats && ) = ;

5172 
	gSe˘i⁄Sèts
& 
	g›î©‹
 = ( 
Se˘i⁄Sèts
 const& ) = ;

5173 
	gSe˘i⁄Sèts
& 
	g›î©‹
 = ( 
Se˘i⁄Sèts
 && ) = ;

5176 
Se˘i⁄Info
 
	g£˘i⁄Info
;

5177 
Cou¡s
 
	gas£πi⁄s
;

5178 
	gduøti⁄InSec⁄ds
;

5179 
boﬁ
 
	gmissögAs£πi⁄s
;

5182 
	sTe°Ca£Sèts
 {

5183 
Te°Ca£Sèts
–
Te°Ca£Info
 c⁄°& 
_ã°Info
,

5184 
TŸÆs
 c⁄°& 
_tŸÆs
,

5185 
°d
::
°rög
 c⁄°& 
_°dOut
,

5186 
°d
::
°rög
 c⁄°& 
_°dEº
,

5187 
boﬁ
 
_ab‹tög
 )

5188 : 
ã°Info
–
_ã°Info
 ),

5189 
tŸÆs
–
_tŸÆs
 ),

5190 
°dOut
–
_°dOut
 ),

5191 
°dEº
–
_°dEº
 ),

5192 
ab‹tög
–
_ab‹tög
 )

5194 
	gvútuÆ
 ~
Te°Ca£Sèts
();

5196 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


5197 
Te°Ca£Sèts
( TestCaseStats const& ) = ;

5198 
Te°Ca£Sèts
( TestCaseStats && ) = ;

5199 
	gTe°Ca£Sèts
& 
	g›î©‹
 = ( 
Te°Ca£Sèts
 const& ) = ;

5200 
	gTe°Ca£Sèts
& 
	g›î©‹
 = ( 
Te°Ca£Sèts
 && ) = ;

5203 
Te°Ca£Info
 
	gã°Info
;

5204 
TŸÆs
 
	gtŸÆs
;

5205 
	g°d
::
°rög
 
°dOut
;

5206 
	g°d
::
°rög
 
°dEº
;

5207 
boﬁ
 
	gab‹tög
;

5210 
	sTe°GroupSèts
 {

5211 
Te°GroupSèts
–
GroupInfo
 c⁄°& 
_groupInfo
,

5212 
TŸÆs
 c⁄°& 
_tŸÆs
,

5213 
boﬁ
 
_ab‹tög
 )

5214 : 
groupInfo
–
_groupInfo
 ),

5215 
tŸÆs
–
_tŸÆs
 ),

5216 
ab‹tög
–
_ab‹tög
 )

5218 
Te°GroupSèts
–
GroupInfo
 c⁄°& 
_groupInfo
 )

5219 : 
groupInfo
–
_groupInfo
 ),

5220 
ab‹tög
–
Ál£
 )

5222 
	gvútuÆ
 ~
Te°GroupSèts
();

5224 #ifde‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


5225 
Te°GroupSèts
( TestGroupStats const& ) = ;

5226 
Te°GroupSèts
( TestGroupStats && ) = ;

5227 
	gTe°GroupSèts
& 
	g›î©‹
 = ( 
Te°GroupSèts
 const& ) = ;

5228 
	gTe°GroupSèts
& 
	g›î©‹
 = ( 
Te°GroupSèts
 && ) = ;

5231 
GroupInfo
 
	ggroupInfo
;

5232 
TŸÆs
 
	gtŸÆs
;

5233 
boﬁ
 
	gab‹tög
;

5236 
	sTe°RunSèts
 {

5237 
Te°RunSèts
–
Te°RunInfo
 c⁄°& 
_runInfo
,

5238 
TŸÆs
 c⁄°& 
_tŸÆs
,

5239 
boﬁ
 
_ab‹tög
 )

5240 : 
runInfo
–
_runInfo
 ),

5241 
tŸÆs
–
_tŸÆs
 ),

5242 
ab‹tög
–
_ab‹tög
 )

5244 
	gvútuÆ
 ~
Te°RunSèts
();

5246 #i‚de‡
CATCH_CONFIG_CPP11_GENERATED_METHODS


5247 
Te°RunSèts
–Te°RunSèt†c⁄°& 
_Ÿhî
 )

5248 : 
runInfo
–
_Ÿhî
.runInfo ),

5249 
tŸÆs
–
_Ÿhî
.totals ),

5250 
ab‹tög
–
_Ÿhî
.aborting )

5253 
Te°RunSèts
( TestRunStats const& ) = ;

5254 
Te°RunSèts
( TestRunStats && ) = ;

5255 
	gTe°RunSèts
& 
	g›î©‹
 = ( 
Te°RunSèts
 const& ) = ;

5256 
	gTe°RunSèts
& 
	g›î©‹
 = ( 
Te°RunSèts
 && ) = ;

5259 
Te°RunInfo
 
	grunInfo
;

5260 
TŸÆs
 
	gtŸÆs
;

5261 
boﬁ
 
	gab‹tög
;

5264 
˛ass
 
	gMu…ùÀRï‹ãrs
;

5266 
	gISåómögRï‹ãr
 : 
ISh¨ed
 {

5267 
vútuÆ
 ~
ISåómögRï‹ãr
();

5272 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
() const = 0;

5274 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) = 0;

5276 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°RunInfo
 ) = 0;

5277 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) = 0;

5279 
vútuÆ
 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) = 0;

5280 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) = 0;

5282 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& 
as£πi⁄Info
 ) = 0;

5285 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) = 0;

5287 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) = 0;

5288 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) = 0;

5289 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) = 0;

5290 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) = 0;

5292 
vútuÆ
 
skùTe°
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) = 0;

5294 
vútuÆ
 
Mu…ùÀRï‹ãrs
* 
åyAsMu…i
(Ë{  
	gCATCH_NULL
; }

5297 
	gIRï‹ãrFa˘‹y
 : 
ISh¨ed
 {

5298 
vútuÆ
 ~
IRï‹ãrFa˘‹y
();

5299 
vútuÆ
 
ISåómögRï‹ãr
* 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) const = 0;

5300 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
() const = 0;

5303 
	sIRï‹ãrRegi°ry
 {

5304 
	g°d
::
	tm≠
<
	t°d
::
	t°rög
, 
	tPå
<
	tIRï‹ãrFa˘‹y
> > 
	tFa˘‹yM≠
;

5305 
	g°d
::
	tve˘‹
<
	tPå
<
	tIRï‹ãrFa˘‹y
> > 
	tLi°íîs
;

5307 
	gvútuÆ
 ~
IRï‹ãrRegi°ry
();

5308 
vútuÆ
 
ISåómögRï‹ãr
* 
¸óã
–
°d
::
°rög
 c⁄°& 
«me
, 
På
<
IC⁄fig
 c⁄°> c⁄°& 
c⁄fig
 ) const = 0;

5309 
vútuÆ
 
Fa˘‹yM≠
 c⁄°& 
gëFa˘‹õs
() const = 0;

5310 
vútuÆ
 
Li°íîs
 c⁄°& 
gëLi°íîs
() const = 0;

5313 
	gPå
<
	gISåómögRï‹ãr
> 
addRï‹ãr
–
På
<
ISåómögRï‹ãr
> c⁄°& 
exi°ögRï‹ãr
, På<ISåómögRï‹ãr> c⁄°& 
addôi⁄ÆRï‹ãr
 );

5317 
	~<limôs
>

5318 
	~<Æg‹ôhm
>

5320 
«me•a˚
 
	gC©ch
 {

5322 
ölöe
 
	g°d
::
size_t
 
li°Te°s
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

5324 
Te°S≥c
 
ã°S≥c
 = 
c⁄fig
.testSpec();

5325 if–
	gc⁄fig
.
ã°S≥c
().
hasFûãrs
() )

5326 
	gC©ch
::
cout
() << "MatchingÅest cases:\n";

5328 
	gC©ch
::
cout
() << "AllávailableÅest cases:\n";

5329 
	gã°S≥c
 = 
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
::
gë
(Ë).
∑r£
–"*" ).
ã°S≥c
();

5332 
	g°d
::
size_t
 
m©chedTe°s
 = 0;

5333 
TextAâribuãs
 
	g«meAâr
, 
	gègsAâr
;

5334 
	g«meAâr
.
£tInôülIndít
–2 ).
£tIndít
( 4 );

5335 
	gègsAâr
.
£tIndít
( 6 );

5337 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m©chedTe°Ca£s
 = 
fûãrTe°s
–
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 ), 
ã°S≥c
, config );

5338  
	g°d
::
ve˘‹
<
Te°Ca£
>::
c⁄°_ôî©‹
 
ô
 = 
m©chedTe°Ca£s
.
begö
(), 
	gôEnd
 = m©chedTe°Ca£s.
íd
();

5339 
	gô
 !
ôEnd
;

5340 ++
	gô
 ) {

5341 
	gm©chedTe°s
++;

5342 
Te°Ca£Info
 c⁄°& 
	gã°Ca£Info
 = 
ô
->
gëTe°Ca£Info
();

5343 
	gCﬁour
::
Code
 
cﬁour
 = 
ã°Ca£Info
.
isHiddí
()

5344 ? 
Cﬁour
::
Sec⁄d¨yText


5345 : 
Cﬁour
::
N⁄e
;

5346 
Cﬁour
 
cﬁourGu¨d
–
cﬁour
 );

5348 
	gC©ch
::
cout
(Ë<< 
Text
–
ã°Ca£Info
.
«me
, 
«meAâr
 ) << 
	g°d
::
ídl
;

5349 if–!
	gã°Ca£Info
.
	gègs
.
em±y
() )

5350 
	gC©ch
::
cout
(Ë<< 
Text
–
ã°Ca£Info
.
ègsAsSåög
, 
ègsAâr
 ) << 
	g°d
::
ídl
;

5353 if–!
	gc⁄fig
.
ã°S≥c
().
hasFûãrs
() )

5354 
	gC©ch
::
cout
(Ë<< 
∂uøli£
–
m©chedTe°s
, "ã° ca£" ) << "\n" << 
	g°d
::
ídl
;

5356 
	gC©ch
::
cout
(Ë<< 
∂uøli£
–
m©chedTe°s
, "m©chögÅe° ca£" ) << "\n" << 
	g°d
::
ídl
;

5357  
	gm©chedTe°s
;

5360 
ölöe
 
	g°d
::
size_t
 
li°Te°sNamesO∆y
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

5361 
Te°S≥c
 
ã°S≥c
 = 
c⁄fig
.testSpec();

5362 if–!
	gc⁄fig
.
ã°S≥c
().
hasFûãrs
() )

5363 
	gã°S≥c
 = 
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
::
gë
(Ë).
∑r£
–"*" ).
ã°S≥c
();

5364 
	g°d
::
size_t
 
m©chedTe°s
 = 0;

5365 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m©chedTe°Ca£s
 = 
fûãrTe°s
–
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 ), 
ã°S≥c
, config );

5366  
	g°d
::
ve˘‹
<
Te°Ca£
>::
c⁄°_ôî©‹
 
ô
 = 
m©chedTe°Ca£s
.
begö
(), 
	gôEnd
 = m©chedTe°Ca£s.
íd
();

5367 
	gô
 !
ôEnd
;

5368 ++
	gô
 ) {

5369 
	gm©chedTe°s
++;

5370 
Te°Ca£Info
 c⁄°& 
	gã°Ca£Info
 = 
ô
->
gëTe°Ca£Info
();

5371 
	gC©ch
::
cout
(Ë<< 
ã°Ca£Info
.
«me
 << 
°d
::
ídl
;

5373  
	gm©chedTe°s
;

5376 
	sTagInfo
 {

5377 
TagInfo
(Ë: 
cou¡
 ( 0 ) {}

5378 
add
–
°d
::
°rög
 c⁄°& 
•ñlög
 ) {

5379 ++
cou¡
;

5380 
	g•ñlögs
.
ö£π
–
•ñlög
 );

5382 
	g°d
::
°rög
 
Æl
() const {

5383 
°d
::
°rög
 
out
;

5384  
	g°d
::
£t
<
°d
::
°rög
>::
c⁄°_ôî©‹
 
ô
 = 
•ñlögs
.
begö
(), 
	gôEnd
 = s≥Œögs.
íd
();

5385 
	gô
 !
ôEnd
;

5386 ++
	gô
 )

5387 
	gout
 +"[" + *
ô
 + "]";

5388  
	gout
;

5390 
	g°d
::
£t
<
°d
::
°rög
> 
•ñlögs
;

5391 
	g°d
::
size_t
 
cou¡
;

5394 
ölöe
 
	g°d
::
size_t
 
li°Tags
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

5395 
Te°S≥c
 
ã°S≥c
 = 
c⁄fig
.testSpec();

5396 if–
	gc⁄fig
.
ã°S≥c
().
hasFûãrs
() )

5397 
	gC©ch
::
cout
() << "Tags for matchingÅest cases:\n";

5399 
	gC©ch
::
cout
() << "AllávailableÅags:\n";

5400 
	gã°S≥c
 = 
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
::
gë
(Ë).
∑r£
–"*" ).
ã°S≥c
();

5403 
	g°d
::
m≠
<
°d
::
°rög
, 
	gTagInfo
> 
	gègCou¡s
;

5405 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m©chedTe°Ca£s
 = 
fûãrTe°s
–
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 ), 
ã°S≥c
, config );

5406  
	g°d
::
ve˘‹
<
Te°Ca£
>::
c⁄°_ôî©‹
 
ô
 = 
m©chedTe°Ca£s
.
begö
(), 
	gôEnd
 = m©chedTe°Ca£s.
íd
();

5407 
	gô
 !
ôEnd
;

5408 ++
	gô
 ) {

5409  
	g°d
::
£t
<
°d
::
°rög
>::
c⁄°_ôî©‹
 
ègIt
 = 
ô
->
gëTe°Ca£Info
().
ègs
.
begö
(),

5410 
	gègItEnd
 = 
ô
->
gëTe°Ca£Info
().
ègs
.
íd
();

5411 
	gègIt
 !
ègItEnd
;

5412 ++
	gègIt
 ) {

5413 
	g°d
::
°rög
 
ègName
 = *
ègIt
;

5414 
	g°d
::
°rög
 
lˇ£TagName
 = 
toLowî
–
ègName
 );

5415 
	g°d
::
m≠
<
°d
::
°rög
, 
	gTagInfo
>::
ôî©‹
 
cou¡It
 = 
ègCou¡s
.
föd
–
lˇ£TagName
 );

5416 if–
	gcou¡It
 =
ègCou¡s
.
íd
() )

5417 
cou¡It
 = 
ègCou¡s
.
ö£π
–
°d
::
make_∑ú
–
lˇ£TagName
, 
TagInfo
(ËË).
	gfú°
;

5418 
	gcou¡It
->
	g£c⁄d
.
add
–
ègName
 );

5422  
	g°d
::
m≠
<
°d
::
°rög
, 
	gTagInfo
>::
c⁄°_ôî©‹
 
cou¡It
 = 
ègCou¡s
.
begö
(),

5423 
	gcou¡ItEnd
 = 
ègCou¡s
.
íd
();

5424 
	gcou¡It
 !
cou¡ItEnd
;

5425 ++
	gcou¡It
 ) {

5426 
	g°d
::
o°rög°ªam
 
oss
;

5427 
	goss
 << " " << 
	g°d
::
£tw
(2Ë<< 
cou¡It
->
£c⁄d
.
cou¡
 << " ";

5428 
Text
 
wøµî
–
cou¡It
->
£c⁄d
.
Æl
(), 
TextAâribuãs
()

5429 .
£tInôülIndít
( 0 )

5430 .
£tIndít
–
oss
.
°r
().
size
() )

5431 .
£tWidth
–
CATCH_CONFIG_CONSOLE_WIDTH
-10 ) );

5432 
	gC©ch
::
cout
(Ë<< 
oss
.
°r
(Ë<< 
wøµî
 << "\n";

5434 
	gC©ch
::
cout
(Ë<< 
∂uøli£
–
ègCou¡s
.
size
(), "èg" ) << "\n" << 
	g°d
::
ídl
;

5435  
	gègCou¡s
.
size
();

5438 
ölöe
 
	g°d
::
size_t
 
li°Rï‹ãrs
–
C⁄fig
 const& ) {

5439 
C©ch
::
cout
() << "AvailableÑeporters:\n";

5440 
	gIRï‹ãrRegi°ry
::
Fa˘‹yM≠
 c⁄°& 
Á˘‹õs
 = 
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
gëFa˘‹õs
();

5441 
	gIRï‹ãrRegi°ry
::
Fa˘‹yM≠
::
c⁄°_ôî©‹
 
ôBegö
 = 
Á˘‹õs
.
begö
(), 
	gôEnd
 = fa˘‹õs.
íd
(), 
	gô
;

5442 
	g°d
::
size_t
 
maxNameLí
 = 0;

5443 
	gô
 = 
ôBegö
; ià!
ôEnd
; ++it )

5444 
	gmaxNameLí
 = (
°d
::
max
)–
maxNameLí
, 
	gô
->
	gfú°
.
size
() );

5446 
	gô
 = 
ôBegö
; ià!
ôEnd
; ++it ) {

5447 
Text
 
wøµî
–
ô
->
£c⁄d
->
gëDes¸ùti⁄
(), 
TextAâribuãs
()

5448 .
£tInôülIndít
( 0 )

5449 .
£tIndít
–7+
maxNameLí
 )

5450 .
£tWidth
–
CATCH_CONFIG_CONSOLE_WIDTH
 - 
maxNameLí
-8 ) );

5451 
	gC©ch
::
cout
() << " "

5452 << 
ô
->
fú°


5454 << 
°d
::
°rög
–
maxNameLí
 - 
ô
->
fú°
.
size
() + 2, ' ' )

5455 << 
	gwøµî
 << "\n";

5457 
	gC©ch
::
cout
(Ë<< 
°d
::
ídl
;

5458  
	gÁ˘‹õs
.
size
();

5461 
ölöe
 
	gO±i⁄
<
	g°d
::
size_t
> 
li°
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

5462 
O±i⁄
<
°d
::
size_t
> 
li°edCou¡
;

5463 if–
	gc⁄fig
.
li°Te°s
() )

5464 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Te°s
–
c⁄fig
 );

5465 if–
	gc⁄fig
.
li°Te°NamesO∆y
() )

5466 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Te°sNamesO∆y
–
c⁄fig
 );

5467 if–
	gc⁄fig
.
li°Tags
() )

5468 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Tags
–
c⁄fig
 );

5469 if–
	gc⁄fig
.
li°Rï‹ãrs
() )

5470 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Rï‹ãrs
–
c⁄fig
 );

5471  
	gli°edCou¡
;

5477 
	#TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED


	)

5480 
	#TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED


	)

5482 
	~<m≠
>

5483 
	~<°rög
>

5484 
	~<as£π.h
>

5485 
	~<ve˘‹
>

5487 
«me•a˚
 
	gC©ch
 {

5488 
«me•a˚
 
	gTe°Ca£Tøckög
 {

5490 
	gITøckî
 : 
Sh¨edIm∂
<> {

5491 
vútuÆ
 ~
ITøckî
();

5494 
vútuÆ
 
	g°d
::
°rög
 
«me
() const = 0;

5497 
vútuÆ
 
boﬁ
 
isCom∂ëe
() const = 0;

5498 
vútuÆ
 
boﬁ
 
isSuc˚ssfuŒyCom∂ëed
() const = 0;

5499 
vútuÆ
 
boﬁ
 
isO≥n
() const = 0;

5500 
vútuÆ
 
boﬁ
 
hasChûdªn
() const = 0;

5502 
vútuÆ
 
	gITøckî
& 
∑ª¡
() = 0;

5505 
vútuÆ
 
˛o£
() = 0;

5506 
vútuÆ
 
Áû
() = 0;

5507 
vútuÆ
 
m¨kAsNìdögAnŸhîRun
() = 0;

5509 
vútuÆ
 
addChûd
–
På
<
ITøckî
> c⁄°& 
chûd
 ) = 0;

5510 
vútuÆ
 
ITøckî
* 
födChûd
–
°d
::
°rög
 c⁄°& 
«me
 ) = 0;

5511 
vútuÆ
 
›íChûd
() = 0;

5514 
vútuÆ
 
boﬁ
 
isSe˘i⁄Tøckî
() const = 0;

5515 
vútuÆ
 
boﬁ
 
isIndexTøckî
() const = 0;

5518 ˛as†
	cTøckîC⁄ãxt
 {

5520 
	eRunSèã
 {

5521 
	gNŸSèπed
,

5522 
	gExecutög
,

5523 
	gCom∂ëedCy˛e


5526 
	gPå
<
	gITøckî
> 
	gm_roŸTøckî
;

5527 
ITøckî
* 
	gm_cuºítTøckî
;

5528 
RunSèã
 
	gm_runSèã
;

5530 
	gpublic
:

5532 
TøckîC⁄ãxt
& 
ö°™˚
() {

5533 
TøckîC⁄ãxt
 
s_ö°™˚
;

5534  
	gs_ö°™˚
;

5537 
TøckîC⁄ãxt
()

5538 : 
m_cuºítTøckî
–
CATCH_NULL
 ),

5539 
m_runSèã
–
NŸSèπed
 )

5542 
	gITøckî
& 
°¨tRun
();

5544 
ídRun
() {

5545 
	gm_roŸTøckî
.
ª£t
();

5546 
	gm_cuºítTøckî
 = 
CATCH_NULL
;

5547 
	gm_runSèã
 = 
NŸSèπed
;

5550 
°¨tCy˛e
() {

5551 
	gm_cuºítTøckî
 = 
m_roŸTøckî
.
gë
();

5552 
	gm_runSèã
 = 
Executög
;

5554 
com∂ëeCy˛e
() {

5555 
	gm_runSèã
 = 
Com∂ëedCy˛e
;

5558 
boﬁ
 
com∂ëedCy˛e
() const {

5559  
	gm_runSèã
 =
Com∂ëedCy˛e
;

5561 
	gITøckî
& 
cuºítTøckî
() {

5562  *
	gm_cuºítTøckî
;

5564 
£tCuºítTøckî
–
ITøckî
* 
åackî
 ) {

5565 
	gm_cuºítTøckî
 = 
åackî
;

5569 ˛as†
	cTøckîBa£
 : 
public
 
ITøckî
 {

5570 
¥Ÿe˘ed
:

5571 
	eCy˛eSèã
 {

5572 
NŸSèπed
,

5573 
	gExecutög
,

5574 
	gExecutögChûdªn
,

5575 
	gNìdsAnŸhîRun
,

5576 
	gCom∂ëedSuc˚ssfuŒy
,

5577 
	gFaûed


5579 ˛as†
	cTøckîHasName
 {

5580 
	g°d
::
°rög
 
m_«me
;

5581 
	gpublic
:

5582 
TøckîHasName
–
°d
::
°rög
 c⁄°& 
«me
 ) : 
m_«me
(Çame ) {}

5583 
boﬁ
 
›î©‹
 ()–
På
<
ITøckî
> c⁄°& 
åackî
 ) {

5584  
åackî
->
«me
(Ë=
m_«me
;

5587 
	g°d
::
	tve˘‹
<
	tPå
<
	tITøckî
> > 
	tChûdªn
;

5588 
	g°d
::
°rög
 
m_«me
;

5589 
	gTøckîC⁄ãxt
& 
	gm_˘x
;

5590 
ITøckî
* 
	gm_∑ª¡
;

5591 
Chûdªn
 
	gm_chûdªn
;

5592 
Cy˛eSèã
 
	gm_runSèã
;

5593 
	gpublic
:

5594 
TøckîBa£
–
°d
::
°rög
 c⁄°& 
«me
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
 )

5595 : 
m_«me
–
«me
 ),

5596 
m_˘x
–
˘x
 ),

5597 
m_∑ª¡
–
∑ª¡
 ),

5598 
m_runSèã
–
NŸSèπed
 )

5600 
	gvútuÆ
 ~
TøckîBa£
();

5602 
vútuÆ
 
	g°d
::
°rög
 
«me
(Ëc⁄° 
CATCH_OVERRIDE
 {

5603  
m_«me
;

5605 
vútuÆ
 
boﬁ
 
isCom∂ëe
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

5606  
	gm_runSèã
 =
Com∂ëedSuc˚ssfuŒy
 || 
m_runSèã
 =
Faûed
;

5608 
vútuÆ
 
boﬁ
 
isSuc˚ssfuŒyCom∂ëed
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

5609  
	gm_runSèã
 =
Com∂ëedSuc˚ssfuŒy
;

5611 
vútuÆ
 
boﬁ
 
isO≥n
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

5612  
	gm_runSèã
 !
NŸSèπed
 && !
isCom∂ëe
();

5614 
vútuÆ
 
boﬁ
 
hasChûdªn
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

5615  !
	gm_chûdªn
.
em±y
();

5618 
vútuÆ
 
addChûd
–
På
<
ITøckî
> c⁄°& 
chûd
 ) 
	gCATCH_OVERRIDE
 {

5619 
	gm_chûdªn
.
push_back
–
chûd
 );

5622 
vútuÆ
 
ITøckî
* 
födChûd
–
°d
::
°rög
 c⁄°& 
«me
 ) 
CATCH_OVERRIDE
 {

5623 
Chûdªn
::
c⁄°_ôî©‹
 
ô
 = 
°d
::
föd_if
–
m_chûdªn
.
begö
(), m_chûdªn.
íd
(), 
TøckîHasName
–
«me
 ) );

5624 –
	gô
 !
m_chûdªn
.
íd
() )

5625 ? 
ô
->
gë
()

5626 : 
CATCH_NULL
;

5628 
vútuÆ
 
	gITøckî
& 
∑ª¡
(Ë
	gCATCH_OVERRIDE
 {

5629 
as£π
–
m_∑ª¡
 );

5630  *
	gm_∑ª¡
;

5633 
vútuÆ
 
›íChûd
(Ë
	gCATCH_OVERRIDE
 {

5634 if–
	gm_runSèã
 !
ExecutögChûdªn
 ) {

5635 
m_runSèã
 = 
ExecutögChûdªn
;

5636 if–
	gm_∑ª¡
 )

5637 
	gm_∑ª¡
->
›íChûd
();

5641 
vútuÆ
 
boﬁ
 
isSe˘i⁄Tøckî
(Ëc⁄° 
	gCATCH_OVERRIDE
 {  
	gÁl£
; }

5642 
vútuÆ
 
boﬁ
 
isIndexTøckî
(Ëc⁄° 
	gCATCH_OVERRIDE
 {  
	gÁl£
; }

5644 
›í
() {

5645 
	gm_runSèã
 = 
Executög
;

5646 
moveToThis
();

5647 if–
	gm_∑ª¡
 )

5648 
	gm_∑ª¡
->
›íChûd
();

5651 
vútuÆ
 
˛o£
(Ë
	gCATCH_OVERRIDE
 {

5654  &
	gm_˘x
.
cuºítTøckî
(Ë!
this
 )

5655 
m_˘x
.
cuºítTøckî
().
˛o£
();

5657  
	gm_runSèã
 ) {

5658 
	gNŸSèπed
:

5659 
Com∂ëedSuc˚ssfuŒy
:

5660 
Faûed
:

5661 
throw
 
°d
::
logic_îr‹
( "Illogical state" );

5663 
	gNìdsAnŸhîRun
:

5666 
	gExecutög
:

5667 
m_runSèã
 = 
Com∂ëedSuc˚ssfuŒy
;

5669 
	gExecutögChûdªn
:

5670 if–
m_chûdªn
.
em±y
(Ë|| m_chûdªn.
back
()->
isCom∂ëe
() )

5671 
m_runSèã
 = 
Com∂ëedSuc˚ssfuŒy
;

5675 
throw
 
°d
::
logic_îr‹
( "Unexpected state" );

5677 
moveToP¨ít
();

5678 
	gm_˘x
.
com∂ëeCy˛e
();

5680 
vútuÆ
 
Áû
(Ë
	gCATCH_OVERRIDE
 {

5681 
	gm_runSèã
 = 
Faûed
;

5682 if–
	gm_∑ª¡
 )

5683 
	gm_∑ª¡
->
m¨kAsNìdögAnŸhîRun
();

5684 
moveToP¨ít
();

5685 
	gm_˘x
.
com∂ëeCy˛e
();

5687 
vútuÆ
 
m¨kAsNìdögAnŸhîRun
(Ë
	gCATCH_OVERRIDE
 {

5688 
	gm_runSèã
 = 
NìdsAnŸhîRun
;

5690 
	g¥iv©e
:

5691 
moveToP¨ít
() {

5692 
as£π
–
m_∑ª¡
 );

5693 
	gm_˘x
.
£tCuºítTøckî
–
m_∑ª¡
 );

5695 
moveToThis
() {

5696 
	gm_˘x
.
£tCuºítTøckî
–
this
 );

5700 ˛as†
	cSe˘i⁄Tøckî
 : 
public
 
TøckîBa£
 {

5701 
public
:

5702 
Se˘i⁄Tøckî
–
°d
::
°rög
 c⁄°& 
«me
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
 )

5703 : 
TøckîBa£
–
«me
, 
˘x
, 
∑ª¡
 )

5705 
	gvútuÆ
 ~
Se˘i⁄Tøckî
();

5707 
vútuÆ
 
boﬁ
 
isSe˘i⁄Tøckî
(Ëc⁄° 
	gCATCH_OVERRIDE
 {  
	gåue
; }

5709 
	gSe˘i⁄Tøckî
& 
acquúe
–
TøckîC⁄ãxt
& 
˘x
, 
°d
::
°rög
 c⁄°& 
«me
 ) {

5710 
Se˘i⁄Tøckî
* 
£˘i⁄
 = 
CATCH_NULL
;

5712 
	gITøckî
& 
	gcuºítTøckî
 = 
˘x
.
cuºítTøckî
();

5713 if–
ITøckî
* 
	gchûdTøckî
 = 
cuºítTøckî
.
födChûd
–
«me
 ) ) {

5714 
as£π
–
chûdTøckî
 );

5715 
as£π
–
chûdTøckî
->
isSe˘i⁄Tøckî
() );

5716 
	g£˘i⁄
 = 
°©ic_ˇ°
<
Se˘i⁄Tøckî
*>–
chûdTøckî
 );

5719 
	g£˘i⁄
 = 
√w
 
Se˘i⁄Tøckî
–
«me
, 
˘x
, &
cuºítTøckî
 );

5720 
	gcuºítTøckî
.
addChûd
–
£˘i⁄
 );

5722 if–!
	g˘x
.
com∂ëedCy˛e
(Ë&& !
	g£˘i⁄
->
isCom∂ëe
() ) {

5724 
	g£˘i⁄
->
›í
();

5726  *
	g£˘i⁄
;

5730 ˛as†
	cIndexTøckî
 : 
public
 
TøckîBa£
 {

5731 
m_size
;

5732 
	gm_ödex
;

5733 
	gpublic
:

5734 
IndexTøckî
–
°d
::
°rög
 c⁄°& 
«me
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
, 
size
 )

5735 : 
TøckîBa£
–
«me
, 
˘x
, 
∑ª¡
 ),

5736 
m_size
–
size
 ),

5737 
m_ödex
( -1 )

5739 
	gvútuÆ
 ~
IndexTøckî
();

5741 
vútuÆ
 
boﬁ
 
isIndexTøckî
(Ëc⁄° 
	gCATCH_OVERRIDE
 {  
	gåue
; }

5743 
	gIndexTøckî
& 
acquúe
–
TøckîC⁄ãxt
& 
˘x
, 
°d
::
°rög
 c⁄°& 
«me
, 
size
 ) {

5744 
IndexTøckî
* 
	gåackî
 = 
CATCH_NULL
;

5746 
	gITøckî
& 
	gcuºítTøckî
 = 
˘x
.
cuºítTøckî
();

5747 if–
ITøckî
* 
	gchûdTøckî
 = 
cuºítTøckî
.
födChûd
–
«me
 ) ) {

5748 
as£π
–
chûdTøckî
 );

5749 
as£π
–
chûdTøckî
->
isIndexTøckî
() );

5750 
	gåackî
 = 
°©ic_ˇ°
<
IndexTøckî
*>–
chûdTøckî
 );

5753 
	gåackî
 = 
√w
 
IndexTøckî
–
«me
, 
˘x
, &
cuºítTøckî
, 
size
 );

5754 
	gcuºítTøckî
.
addChûd
–
åackî
 );

5757 if–!
	g˘x
.
com∂ëedCy˛e
(Ë&& !
	gåackî
->
isCom∂ëe
() ) {

5758 if–
	gåackî
->
	gm_runSèã
 !
ExecutögChûdªn
 && 
åackî
->
m_runSèã
 !
NìdsAnŸhîRun
 )

5759 
åackî
->
moveNext
();

5760 
	gåackî
->
›í
();

5763  *
	gåackî
;

5766 
ödex
(Ëc⁄° {  
	gm_ödex
; }

5768 
moveNext
() {

5769 
	gm_ödex
++;

5770 
	gm_chûdªn
.
˛ór
();

5773 
vútuÆ
 
˛o£
(Ë
	gCATCH_OVERRIDE
 {

5774 
	gTøckîBa£
::
˛o£
();

5775 if–
	gm_runSèã
 =
Com∂ëedSuc˚ssfuŒy
 && 
m_ödex
 < 
m_size
-1 )

5776 
m_runSèã
 = 
Executög
;

5780 
ölöe
 
	gITøckî
& 
	gTøckîC⁄ãxt
::
°¨tRun
() {

5781 
m_roŸTøckî
 = 
√w
 
Se˘i⁄Tøckî
–"{roŸ}", *
this
, 
CATCH_NULL
 );

5782 
	gm_cuºítTøckî
 = 
CATCH_NULL
;

5783 
	gm_runSèã
 = 
Executög
;

5784  *
	gm_roŸTøckî
;

5789 
usög
 
	gTe°Ca£Tøckög
::
ITøckî
;

5790 
usög
 
	gTe°Ca£Tøckög
::
TøckîC⁄ãxt
;

5791 
usög
 
	gTe°Ca£Tøckög
::
Se˘i⁄Tøckî
;

5792 
usög
 
	gTe°Ca£Tøckög
::
IndexTøckî
;

5797 
	#TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED


	)

5799 
«me•a˚
 
	gC©ch
 {

5802 
ölöe
 
Áèl
–
°d
::
°rög
 c⁄°& 
mesßge
, 
exôCode
 ) {

5803 
	gIC⁄ãxt
& 
	gc⁄ãxt
 = 
C©ch
::
gëCuºítC⁄ãxt
();

5804 
IResu…C≠tuª
* 
	gªsu…C≠tuª
 = 
c⁄ãxt
.
gëResu…C≠tuª
();

5805 
	gªsu…C≠tuª
->
h™dÀF©ÆEº‹C⁄dôi⁄
–
mesßge
 );

5807 if–
	gC©ch
::
ÆwaysTrue
() )

5808 
exô
–
exôCode
 );

5813 #i‡
	$deföed
 ( 
CATCH_PLATFORM_WINDOWS
 )

5815 
«me•a˚
 
C©ch
 {

5817 
	sF©ÆC⁄dôi⁄H™dÀr
 {

5818 
	`ª£t
() {}

5821 
	}
}

5825 
	~<sig«l.h
>

5827 
«me•a˚
 
	gC©ch
 {

5829 
	sSig«lDefs
 { 
	gid
; c⁄° * 
	g«me
; };

5830 
Sig«lDefs
 
sig«lDefs
[];

5831 
Sig«lDefs
 
	gsig«lDefs
[] = {

5832 { 
SIGINT
, "SIGINT - Terminal interrupt signal" },

5833 { 
SIGILL
, "SIGILL - Illegal instruction signal" },

5834 { 
SIGFPE
, "SIGFPE - FloatingÖointÉrror signal" },

5835 { 
SIGSEGV
, "SIGSEGV - Segmentation violation signal" },

5836 { 
SIGTERM
, "SIGTERM - TerminationÑequest signal" },

5837 { 
SIGABRT
, "SIGABRT - Abort (abnormalÅermination) signal" }

5840 
	sF©ÆC⁄dôi⁄H™dÀr
 {

5842 
h™dÀSig«l
–
sig
 ) {

5843  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gsig«lDefs
)/(
	gSig«lDefs
); ++i )

5844 if–
	gsig
 =
sig«lDefs
[
i
].
id
 )

5845 
Áèl
–
sig«lDefs
[
i
].
«me
, -
sig
 );

5846 
Áèl
–"<unknow¿sig«l>", -
sig
 );

5849 
F©ÆC⁄dôi⁄H™dÀr
(Ë: 
m_isSë
–
åue
 ) {

5850  
°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gsig«lDefs
)/(
	gSig«lDefs
); ++i )

5851 
sig«l
–
sig«lDefs
[
i
].
id
, 
h™dÀSig«l
 );

5853 ~
F©ÆC⁄dôi⁄H™dÀr
() {

5854 
ª£t
();

5856 
ª£t
() {

5857 if–
	gm_isSë
 ) {

5858  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gsig«lDefs
)/(
	gSig«lDefs
); ++i )

5859 
sig«l
–
sig«lDefs
[
i
].
id
, 
SIG_DFL
 );

5860 
	gm_isSë
 = 
Ál£
;

5864 
boﬁ
 
	gm_isSë
;

5871 
	~<£t
>

5872 
	~<°rög
>

5874 
«me•a˚
 
	gC©ch
 {

5876 ˛as†
	cSåómRedúe˘
 {

5878 
	gpublic
:

5879 
SåómRedúe˘
–
°d
::
o°ªam
& 
°ªam
, std::
°rög
& 
èrgëSåög
 )

5880 : 
m_°ªam
–
°ªam
 ),

5881 
m_¥evBuf
–
°ªam
.
rdbuf
() ),

5882 
m_èrgëSåög
–
èrgëSåög
 )

5884 
	g°ªam
.
rdbuf
–
m_oss
.rdbuf() );

5887 ~
SåómRedúe˘
() {

5888 
	gm_èrgëSåög
 +
m_oss
.
°r
();

5889 
	gm_°ªam
.
rdbuf
–
m_¥evBuf
 );

5892 
	g¥iv©e
:

5893 
°d
::
o°ªam
& 
m_°ªam
;

5894 
	g°d
::
°ªambuf
* 
m_¥evBuf
;

5895 
	g°d
::
o°rög°ªam
 
m_oss
;

5896 
	g°d
::
°rög
& 
m_èrgëSåög
;

5901 
˛ass
 
	gRunC⁄ãxt
 : 
public
 
IResu…C≠tuª
,Öubli¯
	gIRu¬î
 {

5903 
RunC⁄ãxt
( RunContext const& );

5904 
	g›î©‹
 =–
RunC⁄ãxt
 const& );

5906 
	gpublic
:

5908 
ex∂icô
 
RunC⁄ãxt
–
På
<
IC⁄fig
 c⁄°> c⁄°& 
_c⁄fig
, På<
ISåómögRï‹ãr
> c⁄°& 
ªp‹ãr
 )

5909 : 
m_runInfo
–
_c⁄fig
->
«me
() ),

5910 
m_c⁄ãxt
–
gëCuºítMuèbÀC⁄ãxt
() ),

5911 
m_a˘iveTe°Ca£
–
CATCH_NULL
 ),

5912 
m_c⁄fig
–
_c⁄fig
 ),

5913 
m_ªp‹ãr
–
ªp‹ãr
 )

5915 
	gm_c⁄ãxt
.
£tRu¬î
–
this
 );

5916 
	gm_c⁄ãxt
.
£tC⁄fig
–
m_c⁄fig
 );

5917 
	gm_c⁄ãxt
.
£tResu…C≠tuª
–
this
 );

5918 
	gm_ªp‹ãr
->
ã°RunSèπög
–
m_runInfo
 );

5921 
	gvútuÆ
 ~
RunC⁄ãxt
() {

5922 
	gm_ªp‹ãr
->
ã°RunEnded
–
Te°RunSèts
–
m_runInfo
, 
m_tŸÆs
, 
ab‹tög
() ) );

5925 
ã°GroupSèπög
–
°d
::
°rög
 c⁄°& 
ã°S≥c
, std::
size_t
 
groupIndex
, std::size_à
groupsCou¡
 ) {

5926 
m_ªp‹ãr
->
ã°GroupSèπög
–
GroupInfo
–
ã°S≥c
, 
groupIndex
, 
groupsCou¡
 ) );

5928 
ã°GroupEnded
–
°d
::
°rög
 c⁄°& 
ã°S≥c
, 
TŸÆs
 c⁄°& 
tŸÆs
, std::
size_t
 
groupIndex
, std::size_à
groupsCou¡
 ) {

5929 
m_ªp‹ãr
->
ã°GroupEnded
–
Te°GroupSèts
–
GroupInfo
–
ã°S≥c
, 
groupIndex
, 
groupsCou¡
 ), 
tŸÆs
, 
ab‹tög
() ) );

5932 
TŸÆs
 
runTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
 ) {

5933 
TŸÆs
 
	g¥evTŸÆs
 = 
m_tŸÆs
;

5935 
	g°d
::
°rög
 
ªdúe˘edCout
;

5936 
	g°d
::
°rög
 
ªdúe˘edCîr
;

5938 
Te°Ca£Info
 
	gã°Info
 = 
ã°Ca£
.
gëTe°Ca£Info
();

5940 
	gm_ªp‹ãr
->
ã°Ca£Sèπög
–
ã°Info
 );

5942 
	gm_a˘iveTe°Ca£
 = &
ã°Ca£
;

5945 
	gm_åackîC⁄ãxt
.
°¨tRun
();

5947 
	gm_åackîC⁄ãxt
.
°¨tCy˛e
();

5948 
	gm_ã°Ca£Tøckî
 = &
Se˘i⁄Tøckî
::
acquúe
–
m_åackîC⁄ãxt
, 
ã°Info
.
«me
 );

5949 
runCuºítTe°
–
ªdúe˘edCout
, 
ªdúe˘edCîr
 );

5951  !
	gm_ã°Ca£Tøckî
->
isSuc˚ssfuŒyCom∂ëed
(Ë&& !
ab‹tög
() );

5954  
gëCuºítC⁄ãxt
().
adv™˚Gíî©‹sF‹CuºítTe°
(Ë&& !
ab‹tög
() );

5956 
TŸÆs
 
	gdñèTŸÆs
 = 
m_tŸÆs
.
dñè
–
¥evTŸÆs
 );

5957 if–
	gã°Info
.
ex≥˘edToFaû
(Ë&& 
	gdñèTŸÆs
.
	gã°Ca£s
.
	g∑s£d
 > 0 ) {

5958 
	gdñèTŸÆs
.
	gas£πi⁄s
.
	gÁûed
++;

5959 
	gdñèTŸÆs
.
	gã°Ca£s
.
	g∑s£d
--;

5960 
	gdñèTŸÆs
.
	gã°Ca£s
.
	gÁûed
++;

5962 
	gm_tŸÆs
.
	gã°Ca£s
 +
dñèTŸÆs
.
ã°Ca£s
;

5963 
	gm_ªp‹ãr
->
ã°Ca£Ended
–
Te°Ca£Sèts
–
ã°Info
,

5964 
dñèTŸÆs
,

5965 
ªdúe˘edCout
,

5966 
ªdúe˘edCîr
,

5967 
ab‹tög
() ) );

5969 
	gm_a˘iveTe°Ca£
 = 
CATCH_NULL
;

5970 
	gm_ã°Ca£Tøckî
 = 
CATCH_NULL
;

5972  
	gdñèTŸÆs
;

5975 
	gPå
<
IC⁄fig
 c⁄°> 
c⁄fig
() const {

5976  
	gm_c⁄fig
;

5979 
	g¥iv©e
:

5981 
vútuÆ
 
as£πi⁄Ended
–
As£πi⁄Resu…
 c⁄°& 
ªsu…
 ) {

5982 if–
ªsu…
.
gëResu…Ty≥
(Ë=
Resu…Was
::
Ok
 ) {

5983 
m_tŸÆs
.
as£πi⁄s
.
∑s£d
++;

5985 if–!
	gªsu…
.
isOk
() ) {

5986 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûed
++;

5989 if–
	gm_ªp‹ãr
->
as£πi⁄Ended
–
As£πi⁄Sèts
–
ªsu…
, 
m_mesßges
, 
m_tŸÆs
 ) ) )

5990 
	gm_mesßges
.
˛ór
();

5993 
	gm_œ°As£πi⁄Info
 = 
As£πi⁄Info
–"", 
m_œ°As£πi⁄Info
.
löeInfo
, "{Unknow¿ex¥essi⁄á·îÅhêªp‹ãdÜöe}" , m_œ°As£πi⁄Info.
ªsu…Di•osôi⁄
 );

5994 
	gm_œ°Resu…
 = 
ªsu…
;

5997 
vútuÆ
 
boﬁ
 
£˘i⁄Sèπed
 (

5998 
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
,

5999 
Cou¡s
& 
as£πi⁄s


6002 
	g°d
::
o°rög°ªam
 
oss
;

6003 
	goss
 << 
	g£˘i⁄Info
.
	g«me
 << "@" << se˘i⁄Info.
	glöeInfo
;

6005 
	gITøckî
& 
	g£˘i⁄Tøckî
 = 
Se˘i⁄Tøckî
::
acquúe
–
m_åackîC⁄ãxt
, 
oss
.
°r
() );

6006 if–!
	g£˘i⁄Tøckî
.
isO≥n
() )

6007  
	gÁl£
;

6008 
	gm_a˘iveSe˘i⁄s
.
push_back
–&
£˘i⁄Tøckî
 );

6010 
	gm_œ°As£πi⁄Info
.
	glöeInfo
 = 
£˘i⁄Info
.
löeInfo
;

6012 
	gm_ªp‹ãr
->
£˘i⁄Sèπög
–
£˘i⁄Info
 );

6014 
	gas£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
;

6016  
	gåue
;

6018 
boﬁ
 
ã°F‹MissögAs£πi⁄s
–
Cou¡s
& 
as£πi⁄s
 ) {

6019 if–
	gas£πi⁄s
.
tŸÆ
() != 0 )

6020  
Ál£
;

6021 if–!
	gm_c⁄fig
->
w¨nAboutMissögAs£πi⁄s
() )

6022  
	gÁl£
;

6023 if–
	gm_åackîC⁄ãxt
.
cuºítTøckî
().
hasChûdªn
() )

6024  
	gÁl£
;

6025 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûed
++;

6026 
	gas£πi⁄s
.
	gÁûed
++;

6027  
	gåue
;

6030 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) {

6031 
Cou¡s
 
	gas£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
 - 
ídInfo
.
¥evAs£πi⁄s
;

6032 
boﬁ
 
	gmissögAs£πi⁄s
 = 
ã°F‹MissögAs£πi⁄s
–
as£πi⁄s
 );

6034 if–!
	gm_a˘iveSe˘i⁄s
.
em±y
() ) {

6035 
	gm_a˘iveSe˘i⁄s
.
back
()->
˛o£
();

6036 
	gm_a˘iveSe˘i⁄s
.
p›_back
();

6039 
	gm_ªp‹ãr
->
£˘i⁄Ended
–
Se˘i⁄Sèts
–
ídInfo
.
£˘i⁄Info
, 
as£πi⁄s
,ÉndInfo.
duøti⁄InSec⁄ds
, 
missögAs£πi⁄s
 ) );

6040 
	gm_mesßges
.
˛ór
();

6043 
vútuÆ
 
£˘i⁄EndedE¨ly
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) {

6044 if–
	gm_unföishedSe˘i⁄s
.
em±y
() )

6045 
	gm_a˘iveSe˘i⁄s
.
back
()->
Áû
();

6047 
	gm_a˘iveSe˘i⁄s
.
back
()->
˛o£
();

6048 
	gm_a˘iveSe˘i⁄s
.
p›_back
();

6050 
	gm_unföishedSe˘i⁄s
.
push_back
–
ídInfo
 );

6053 
vútuÆ
 
pushSc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) {

6054 
	gm_mesßges
.
push_back
–
mesßge
 );

6057 
vútuÆ
 
p›Sc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) {

6058 
	gm_mesßges
.
îa£
–
°d
::
ªmove
–
m_mesßges
.
begö
(), m_mesßges.
íd
(), 
mesßge
 ), m_messages.end() );

6061 
vútuÆ
 
	g°d
::
°rög
 
gëCuºítTe°Name
() const {

6062  
m_a˘iveTe°Ca£


6063 ? 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
().
«me


6067 
vútuÆ
 c⁄° 
As£πi⁄Resu…
* 
gëLa°Resu…
() const {

6068  &
	gm_œ°Resu…
;

6071 
vútuÆ
 
h™dÀF©ÆEº‹C⁄dôi⁄
–
°d
::
°rög
 c⁄°& 
mesßge
 ) {

6072 
Resu…Buûdî
 
ªsu…Buûdî
 = 
makeU√x≥˘edResu…Buûdî
();

6073 
	gªsu…Buûdî
.
£tResu…Ty≥
–
Resu…Was
::
F©ÆEº‹C⁄dôi⁄
 );

6074 
	gªsu…Buûdî
 << 
	gmesßge
;

6075 
	gªsu…Buûdî
.
ˇ±uªEx¥essi⁄
();

6077 
h™dÀUnföishedSe˘i⁄s
();

6080 
Te°Ca£Info
 c⁄°& 
	gã°Ca£Info
 = 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
();

6081 
Se˘i⁄Info
 
ã°Ca£Se˘i⁄
–
ã°Ca£Info
.
löeInfo
,Åe°Ca£Info.
«me
,Åe°Ca£Info.
des¸ùti⁄
 );

6083 
Cou¡s
 
	gas£πi⁄s
;

6084 
	gas£πi⁄s
.
	gÁûed
 = 1;

6085 
Se˘i⁄Sèts
 
ã°Ca£Se˘i⁄Sèts
–
ã°Ca£Se˘i⁄
, 
as£πi⁄s
, 0, 
Ál£
 );

6086 
	gm_ªp‹ãr
->
£˘i⁄Ended
–
ã°Ca£Se˘i⁄Sèts
 );

6088 
Te°Ca£Info
 
	gã°Info
 = 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
();

6090 
TŸÆs
 
	gdñèTŸÆs
;

6091 
	gdñèTŸÆs
.
	gã°Ca£s
.
	gÁûed
 = 1;

6092 
	gm_ªp‹ãr
->
ã°Ca£Ended
–
Te°Ca£Sèts
–
ã°Info
,

6093 
dñèTŸÆs
,

6096 
Ál£
 ) );

6097 
	gm_tŸÆs
.
	gã°Ca£s
.
	gÁûed
++;

6098 
ã°GroupEnded
–"", 
m_tŸÆs
, 1, 1 );

6099 
	gm_ªp‹ãr
->
ã°RunEnded
–
Te°RunSèts
–
m_runInfo
, 
m_tŸÆs
, 
Ál£
 ) );

6102 
	gpublic
:

6104 
boﬁ
 
ab‹tög
() const {

6105  
m_tŸÆs
.
as£πi⁄s
.
Áûed
 =
°©ic_ˇ°
<
°d
::
size_t
>–
m_c⁄fig
->
ab‹tA·î
() );

6108 
	g¥iv©e
:

6110 
runCuºítTe°
–
°d
::
°rög
& 
ªdúe˘edCout
, std::°rög& 
ªdúe˘edCîr
 ) {

6111 
Te°Ca£Info
 c⁄°& 
ã°Ca£Info
 = 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
();

6112 
Se˘i⁄Info
 
ã°Ca£Se˘i⁄
–
ã°Ca£Info
.
löeInfo
,Åe°Ca£Info.
«me
,Åe°Ca£Info.
des¸ùti⁄
 );

6113 
	gm_ªp‹ãr
->
£˘i⁄Sèπög
–
ã°Ca£Se˘i⁄
 );

6114 
Cou¡s
 
	g¥evAs£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
;

6115 
	gduøti⁄
 = 0;

6116 
	gåy
 {

6117 
	gm_œ°As£πi⁄Info
 = 
As£πi⁄Info
–"TEST_CASE", 
ã°Ca£Info
.
löeInfo
, "", 
Resu…Di•osôi⁄
::
N‹mÆ
 );

6119 
£edRng
–*
m_c⁄fig
 );

6121 
Timî
 
	gtimî
;

6122 
	gtimî
.
°¨t
();

6123 if–
	gm_ªp‹ãr
->
gëPª„ªn˚s
().
	gshouldRedúe˘StdOut
 ) {

6124 
SåómRedúe˘
 
coutRedú
–
C©ch
::
cout
(), 
ªdúe˘edCout
 );

6125 
SåómRedúe˘
 
˚ºRedú
–
C©ch
::
˚º
(), 
ªdúe˘edCîr
 );

6126 
övokeA˘iveTe°Ca£
();

6129 
övokeA˘iveTe°Ca£
();

6131 
	gduøti⁄
 = 
timî
.
gëEœp£dSec⁄ds
();

6133 
ˇtch
–
Te°FaûuªEx˚±i⁄
& ) {

6136 
ˇtch
(...) {

6137 
makeU√x≥˘edResu…Buûdî
().
u£A˘iveEx˚±i⁄
();

6139 
	gm_ã°Ca£Tøckî
->
˛o£
();

6140 
h™dÀUnföishedSe˘i⁄s
();

6141 
	gm_mesßges
.
˛ór
();

6143 
Cou¡s
 
	gas£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
 - 
¥evAs£πi⁄s
;

6144 
boﬁ
 
	gmissögAs£πi⁄s
 = 
ã°F‹MissögAs£πi⁄s
–
as£πi⁄s
 );

6146 if–
	gã°Ca£Info
.
okToFaû
() ) {

6147 
	g°d
::
sw≠
–
as£πi⁄s
.
ÁûedButOk
,ás£πi⁄s.
Áûed
 );

6148 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûed
 -
as£πi⁄s
.
ÁûedButOk
;

6149 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûedButOk
 +
as£πi⁄s
.
ÁûedButOk
;

6152 
Se˘i⁄Sèts
 
ã°Ca£Se˘i⁄Sèts
–
ã°Ca£Se˘i⁄
, 
as£πi⁄s
, 
duøti⁄
, 
missögAs£πi⁄s
 );

6153 
	gm_ªp‹ãr
->
£˘i⁄Ended
–
ã°Ca£Se˘i⁄Sèts
 );

6156 
övokeA˘iveTe°Ca£
() {

6157 
F©ÆC⁄dôi⁄H™dÀr
 
	gÁèlC⁄dôi⁄H™dÀr
;

6158 
	gm_a˘iveTe°Ca£
->
övoke
();

6159 
	gÁèlC⁄dôi⁄H™dÀr
.
ª£t
();

6162 
	g¥iv©e
:

6164 
Resu…Buûdî
 
makeU√x≥˘edResu…Buûdî
() const {

6165  
Resu…Buûdî
–
m_œ°As£πi⁄Info
.
ma¸oName
.
c_°r
(),

6166 
m_œ°As£πi⁄Info
.
löeInfo
,

6167 
m_œ°As£πi⁄Info
.
ˇ±uªdEx¥essi⁄
.
c_°r
(),

6168 
m_œ°As£πi⁄Info
.
ªsu…Di•osôi⁄
 );

6171 
h™dÀUnföishedSe˘i⁄s
() {

6174  
	g°d
::
ve˘‹
<
Se˘i⁄EndInfo
>::
c⁄°_ªvî£_ôî©‹
 
ô
 = 
m_unföishedSe˘i⁄s
.
rbegö
(),

6175 
	gôEnd
 = 
m_unföishedSe˘i⁄s
.
ªnd
();

6176 
	gô
 !
ôEnd
;

6177 ++
	gô
 )

6178 
£˘i⁄Ended
–*
ô
 );

6179 
	gm_unföishedSe˘i⁄s
.
˛ór
();

6182 
Te°RunInfo
 
	gm_runInfo
;

6183 
	gIMuèbÀC⁄ãxt
& 
	gm_c⁄ãxt
;

6184 
Te°Ca£
 c⁄°* 
	gm_a˘iveTe°Ca£
;

6185 
ITøckî
* 
	gm_ã°Ca£Tøckî
;

6186 
ITøckî
* 
	gm_cuºítSe˘i⁄Tøckî
;

6187 
As£πi⁄Resu…
 
	gm_œ°Resu…
;

6189 
	gPå
<
IC⁄fig
 c⁄°> 
	gm_c⁄fig
;

6190 
TŸÆs
 
	gm_tŸÆs
;

6191 
	gPå
<
	gISåómögRï‹ãr
> 
	gm_ªp‹ãr
;

6192 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
m_mesßges
;

6193 
As£πi⁄Info
 
	gm_œ°As£πi⁄Info
;

6194 
	g°d
::
ve˘‹
<
Se˘i⁄EndInfo
> 
m_unföishedSe˘i⁄s
;

6195 
	g°d
::
ve˘‹
<
ITøckî
*> 
m_a˘iveSe˘i⁄s
;

6196 
TøckîC⁄ãxt
 
	gm_åackîC⁄ãxt
;

6199 
	gIResu…C≠tuª
& 
gëResu…C≠tuª
() {

6200 if–
IResu…C≠tuª
* 
	gˇ±uª
 = 
gëCuºítC⁄ãxt
().
gëResu…C≠tuª
() )

6201  *
ˇ±uª
;

6203 
throw
 
	g°d
::
logic_îr‹
( "NoÑesult capture instance" );

6209 
	#TWOBLUECUBES_CATCH_VERSION_H_INCLUDED


	)

6211 
«me•a˚
 
	gC©ch
 {

6214 
	sVîsi⁄
 {

6215 
Vîsi⁄
–
_maj‹Vîsi⁄
,

6216 
_mö‹Vîsi⁄
,

6217 
_∑tchNumbî
,

6218 
°d
::
°rög
 c⁄°& 
_bønchName
,

6219 
_buûdNumbî
 );

6221 c⁄° 
	gmaj‹Vîsi⁄
;

6222 c⁄° 
	gmö‹Vîsi⁄
;

6223 c⁄° 
	g∑tchNumbî
;

6226 
	g°d
::
°rög
 c⁄° 
bønchName
;

6227 c⁄° 
	gbuûdNumbî
;

6229 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Vîsi⁄
 c⁄°& 
	gvîsi⁄
 );

6231 
	g¥iv©e
:

6232 
›î©‹
=–
Vîsi⁄
 const& );

6235 
Vîsi⁄
 
libøryVîsi⁄
;

6238 
	~<f°ªam
>

6239 
	~<°dlib.h
>

6240 
	~<limôs
>

6242 
«me•a˚
 
	gC©ch
 {

6244 
	gPå
<
	gISåómögRï‹ãr
> 
¸óãRï‹ãr
–
°d
::
°rög
 c⁄°& 
ªp‹ãrName
, 
På
<
C⁄fig
> c⁄°& 
c⁄fig
 ) {

6245 
	gPå
<
	gISåómögRï‹ãr
> 
	gªp‹ãr
 = 
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
¸óã
–
ªp‹ãrName
, 
c⁄fig
.
gë
() );

6246 if–!
	gªp‹ãr
 ) {

6247 
	g°d
::
o°rög°ªam
 
oss
;

6248 
	goss
 << "Nÿªp‹ã∏ªgi°îed wôhÇame: '" << 
	gªp‹ãrName
 << "'";

6249 
throw
 
	g°d
::
domaö_îr‹
–
oss
.
°r
() );

6251  
	gªp‹ãr
;

6254 
	gPå
<
	gISåómögRï‹ãr
> 
makeRï‹ãr
–
På
<
C⁄fig
> c⁄°& 
c⁄fig
 ) {

6255 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ªp‹ãrs
 = 
c⁄fig
->
gëRï‹ãrNames
();

6256 if–
	gªp‹ãrs
.
em±y
() )

6257 
	gªp‹ãrs
.
push_back
( "console" );

6259 
	gPå
<
	gISåómögRï‹ãr
> 
	gªp‹ãr
;

6260  
	g°d
::
ve˘‹
<
°d
::
°rög
>::
c⁄°_ôî©‹
 
ô
 = 
ªp‹ãrs
.
begö
(), 
	gôEnd
 =Ñï‹ãrs.
íd
();

6261 
	gô
 !
ôEnd
;

6262 ++
	gô
 )

6263 
	gªp‹ãr
 = 
addRï‹ãr
–
ªp‹ãr
, 
¸óãRï‹ãr
–*
ô
, 
c⁄fig
 ) );

6264  
	gªp‹ãr
;

6266 
	gPå
<
	gISåómögRï‹ãr
> 
addLi°íîs
–
På
<
IC⁄fig
 c⁄°> c⁄°& 
c⁄fig
, På<
ISåómögRï‹ãr
> 
ªp‹ãrs
 ) {

6267 
	gIRï‹ãrRegi°ry
::
Li°íîs
 
li°íîs
 = 
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
gëLi°íîs
();

6268  
	gIRï‹ãrRegi°ry
::
Li°íîs
::
c⁄°_ôî©‹
 
ô
 = 
li°íîs
.
begö
(), 
	gôEnd
 =Üi°íîs.
íd
();

6269 
	gô
 !
ôEnd
;

6270 ++
	gô
 )

6271 
	gªp‹ãrs
 = 
addRï‹ãr
(
ªp‹ãrs
, (*
ô
)->
¸óã
–
Rï‹ãrC⁄fig
–
c⁄fig
 ) ) );

6272  
	gªp‹ãrs
;

6275 
TŸÆs
 
runTe°s
–
På
<
C⁄fig
> c⁄°& 
c⁄fig
 ) {

6277 
	gPå
<
IC⁄fig
 c⁄°> 
	gic⁄fig
 = 
c⁄fig
.
gë
();

6279 
	gPå
<
	gISåómögRï‹ãr
> 
	gªp‹ãr
 = 
makeRï‹ãr
–
c⁄fig
 );

6280 
	gªp‹ãr
 = 
addLi°íîs
–
ic⁄fig
, 
ªp‹ãr
 );

6282 
RunC⁄ãxt
 
c⁄ãxt
–
ic⁄fig
, 
ªp‹ãr
 );

6284 
TŸÆs
 
	gtŸÆs
;

6286 
	gc⁄ãxt
.
ã°GroupSèπög
–
c⁄fig
->
«me
(), 1, 1 );

6288 
Te°S≥c
 
	gã°S≥c
 = 
c⁄fig
->
ã°S≥c
();

6289 if–!
	gã°S≥c
.
hasFûãrs
() )

6290 
	gã°S≥c
 = 
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
::
gë
(Ë).
∑r£
–"~[.]" ).
ã°S≥c
();

6292 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
ÆlTe°Ca£s
 = 
gëAŒTe°Ca£sS‹ãd
–*
ic⁄fig
 );

6293  
	g°d
::
ve˘‹
<
Te°Ca£
>::
c⁄°_ôî©‹
 
ô
 = 
ÆlTe°Ca£s
.
begö
(), 
	gôEnd
 =áŒTe°Ca£s.
íd
();

6294 
	gô
 !
ôEnd
;

6295 ++
	gô
 ) {

6296 if–!
	gc⁄ãxt
.
ab‹tög
(Ë&& 
m©chTe°
–*
ô
, 
ã°S≥c
, *
ic⁄fig
 ) )

6297 
	gtŸÆs
 +
c⁄ãxt
.
runTe°
–*
ô
 );

6299 
	gªp‹ãr
->
skùTe°
–*
ô
 );

6302 
	gc⁄ãxt
.
ã°GroupEnded
–
ic⁄fig
->
«me
(), 
tŸÆs
, 1, 1 );

6303  
	gtŸÆs
;

6306 
≠∂yFûíamesAsTags
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

6307 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
ã°s
 = 
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 );

6308 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gã°s
.
size
(); ++i ) {

6309 
	gTe°Ca£
& 
	gã°
 = 
c⁄°_ˇ°
<
Te°Ca£
&>–
ã°s
[
i
] );

6310 
	g°d
::
£t
<
°d
::
°rög
> 
ègs
 = 
ã°
.tags;

6312 
	g°d
::
°rög
 
fûíame
 = 
ã°
.
löeInfo
.
fûe
;

6313 
	g°d
::
°rög
::
size_ty≥
 
œ°Sœsh
 = 
fûíame
.
föd_œ°_of
( "\\/" );

6314 if–
	gœ°Sœsh
 !
°d
::
°rög
::
≈os
 )

6315 
fûíame
 = fûíame.
sub°r
–
œ°Sœsh
+1 );

6317 
	g°d
::
°rög
::
size_ty≥
 
œ°DŸ
 = 
fûíame
.
föd_œ°_of
( "." );

6318 if–
	gœ°DŸ
 !
°d
::
°rög
::
≈os
 )

6319 
fûíame
 = fûíame.
sub°r
–0, 
œ°DŸ
 );

6321 
	gègs
.
ö£π
–"#" + 
fûíame
 );

6322 
£tTags
–
ã°
, 
ègs
 );

6326 ˛as†
	cSessi⁄
 : 
N⁄C›yabÀ
 {

6327 
boﬁ
 
ÆªadyIn°™tüãd
;

6329 
	gpublic
:

6331 
	sOnUnu£dO±i⁄s
 { 
	eDoWh©
 { 
Ign‹e
, 
	gFaû
 }; };

6333 
Sessi⁄
()

6334 : 
m_˛i
–
makeComm™dLöeP¨£r
() ) {

6335 if–
ÆªadyIn°™tüãd
 ) {

6336 
°d
::
°rög
 
msg
 = "Only one instance of Catch::Session canÉver be used";

6337 
	gC©ch
::
˚º
(Ë<< 
msg
 << 
°d
::
ídl
;

6338 
throw
 
	g°d
::
logic_îr‹
–
msg
 );

6340 
	gÆªadyIn°™tüãd
 = 
åue
;

6342 ~
Sessi⁄
() {

6343 
	gC©ch
::
˛ónUp
();

6346 
showHñp
–
°d
::
°rög
 c⁄°& 
¥o˚ssName
 ) {

6347 
C©ch
::
cout
(Ë<< "\nC©ch v" << 
libøryVîsi⁄
 << "\n";

6349 
	gm_˛i
.
ußge
–
C©ch
::
cout
(), 
¥o˚ssName
 );

6350 
	gC©ch
::
cout
(Ë<< "F‹ m‹êdëaû ußgê∂ó£ sìÅhê¥oje˘ docs\n" << 
°d
::
ídl
;

6353 
≠∂yComm™dLöe
–
¨gc
, c⁄°* c⁄°* c⁄° 
¨gv
, 
OnUnu£dO±i⁄s
::
DoWh©
 
unu£dO±i⁄Behaviour
 = OnUnu£dO±i⁄s::
Faû
 ) {

6354 
åy
 {

6355 
m_˛i
.
£tThrowOnUƒecogni£dTokís
–
unu£dO±i⁄Behaviour
 =
OnUnu£dO±i⁄s
::
Faû
 );

6356 
	gm_unu£dTokís
 = 
m_˛i
.
∑r£I¡o
–
Cœø
::
¨gsToVe˘‹
–
¨gc
, 
¨gv
 ), 
m_c⁄figD©a
 );

6357 if–
	gm_c⁄figD©a
.
	gshowHñp
 )

6358 
showHñp
–
m_c⁄figD©a
.
¥o˚ssName
 );

6359 
	gm_c⁄fig
.
ª£t
();

6361 
ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

6363 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Red
 );

6364 
	gC©ch
::
˚º
()

6366 << 
Text
–
ex
.
wh©
(), 
TextAâribuãs
().
£tIndít
(2) )

6369 
	gm_˛i
.
ußge
–
C©ch
::
cout
(), 
m_c⁄figD©a
.
¥o˚ssName
 );

6370  (
	g°d
::
numîic_limôs
<>::
max
)();

6375 
u£C⁄figD©a
–
C⁄figD©a
 c⁄°& 
_c⁄figD©a
 ) {

6376 
	gm_c⁄figD©a
 = 
_c⁄figD©a
;

6377 
	gm_c⁄fig
.
ª£t
();

6380 
run
–
¨gc
, c⁄°* c⁄°* c⁄° 
¨gv
 ) {

6382 
	gªtu∫Code
 = 
≠∂yComm™dLöe
–
¨gc
, 
¨gv
 );

6383 if–
	gªtu∫Code
 == 0 )

6384 
ªtu∫Code
 = 
run
();

6385  
	gªtu∫Code
;

6388 
run
() {

6389 if–
	gm_c⁄figD©a
.
	gshowHñp
 )

6392 
	gåy


6394 
c⁄fig
();

6396 
£edRng
–*
m_c⁄fig
 );

6398 if–
	gm_c⁄figD©a
.
	gfûíamesAsTags
 )

6399 
≠∂yFûíamesAsTags
–*
m_c⁄fig
 );

6402 if–
	gO±i⁄
<
	g°d
::
size_t
> 
li°ed
 = 
li°
–
c⁄fig
() ) )

6403  
°©ic_ˇ°
<>–*
li°ed
 );

6405  
	g°©ic_ˇ°
<>–
runTe°s
–
m_c⁄fig
 ).
	gas£πi⁄s
.
	gÁûed
 );

6407 
ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

6408 
C©ch
::
˚º
(Ë<< 
ex
.
wh©
(Ë<< 
°d
::
ídl
;

6409  (
	g°d
::
numîic_limôs
<>::
max
)();

6413 
	gCœø
::
Comm™dLöe
<
C⁄figD©a
> c⁄°& 
˛i
() const {

6414  
m_˛i
;

6416 
	g°d
::
ve˘‹
<
Cœø
::
P¨£r
::
Tokí
> c⁄°& 
unu£dTokís
() const {

6417  
m_unu£dTokís
;

6419 
	gC⁄figD©a
& 
c⁄figD©a
() {

6420  
	gm_c⁄figD©a
;

6422 
	gC⁄fig
& 
c⁄fig
() {

6423 if–!
	gm_c⁄fig
 )

6424 
	gm_c⁄fig
 = 
√w
 
C⁄fig
–
m_c⁄figD©a
 );

6425  *
	gm_c⁄fig
;

6427 
	g¥iv©e
:

6428 
Cœø
::
Comm™dLöe
<
C⁄figD©a
> 
m_˛i
;

6429 
	g°d
::
ve˘‹
<
Cœø
::
P¨£r
::
Tokí
> 
m_unu£dTokís
;

6430 
C⁄figD©a
 
	gm_c⁄figD©a
;

6431 
	gPå
<
	gC⁄fig
> 
	gm_c⁄fig
;

6434 
boﬁ
 
	gSessi⁄
::
ÆªadyIn°™tüãd
 = 
Ál£
;

6439 
	#TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED


	)

6442 
	#TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED


	)

6444 
	~<ve˘‹
>

6445 
	~<£t
>

6446 
	~<s°ªam
>

6447 
	~<io°ªam
>

6448 
	~<Æg‹ôhm
>

6450 #ifde‡
CATCH_CPP14_OR_GREATER


6451 
	~<øndom
>

6454 
«me•a˚
 
	gC©ch
 {

6456 
	sR™domNumbîGíî©‹
 {

6457 
	tªsu…_ty≥
;

6459 
ªsu…_ty≥
 
›î©‹
()–ªsu…_ty≥ 
	gn
 ) c⁄° {  
	g°d
::
ønd
(Ë% 
n
; }

6461 #ifde‡
CATCH_CPP14_OR_GREATER


6462 
c⁄°ex¥
 
ªsu…_ty≥
 
mö
() {  0; }

6463 
c⁄°ex¥
 
ªsu…_ty≥
 
max
() {  1000000; }

6464 
ªsu…_ty≥
 
›î©‹
()(Ëc⁄° {  
	g°d
::
ønd
(Ë% 
max
(); }

6466 
	gãm∂©e
<
ty≥«me
 
	gV
>

6467 
shufÊe
–
V
& 
ve˘‹
 ) {

6468 
R™domNumbîGíî©‹
 
	g∫g
;

6469 #ifde‡
CATCH_CPP14_OR_GREATER


6470 
	g°d
::
shufÊe
–
ve˘‹
.
begö
(), ve˘‹.
íd
(), 
∫g
 );

6472 
	g°d
::
øndom_shufÊe
–
ve˘‹
.
begö
(), ve˘‹.
íd
(), 
∫g
 );

6477 
ölöe
 
	g°d
::
ve˘‹
<
Te°Ca£
> 
s‹tTe°s
–
IC⁄fig
 c⁄°& 
c⁄fig
, 
°d
::ve˘‹<Te°Ca£> c⁄°& 
uns‹ãdTe°Ca£s
 ) {

6479 
°d
::
ve˘‹
<
Te°Ca£
> 
s‹ãd
 = 
uns‹ãdTe°Ca£s
;

6481  
	gc⁄fig
.
runOrdî
() ) {

6482 
	gRunTe°s
::
InLexicogøphiˇlOrdî
:

6483 
°d
::
s‹t
–
s‹ãd
.
begö
(), s‹ãd.
íd
() );

6485 
	gRunTe°s
::
InR™domOrdî
:

6487 
£edRng
–
c⁄fig
 );

6488 
	gR™domNumbîGíî©‹
::
shufÊe
–
s‹ãd
 );

6491 
	gRunTe°s
::
InDe˛¨©i⁄Ordî
:

6495  
	gs‹ãd
;

6497 
boﬁ
 
m©chTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

6498  
	gã°S≥c
.
m©ches
–
ã°Ca£
 ) && ( 
	gc⁄fig
.
ÆlowThrows
(Ë|| !
	gã°Ca£
.
throws
() );

6501 
íf‹˚NoDu∂iˇãTe°Ca£s
–
°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
fun˘i⁄s
 ) {

6502 
°d
::
£t
<
Te°Ca£
> 
£íFun˘i⁄s
;

6503  
	g°d
::
ve˘‹
<
Te°Ca£
>::
c⁄°_ôî©‹
 
ô
 = 
fun˘i⁄s
.
begö
(), 
	gôEnd
 = fun˘i⁄s.
íd
();

6504 
	gô
 !
ôEnd
;

6505 ++
	gô
 ) {

6506 
	g°d
::
∑ú
<
°d
::
£t
<
Te°Ca£
>::
c⁄°_ôî©‹
, 
	gboﬁ
> 
	g¥ev
 = 
£íFun˘i⁄s
.
ö£π
–*
ô
 );

6507 if–!
	g¥ev
.
	g£c⁄d
 ) {

6508 
	g°d
::
o°rög°ªam
 
ss
;

6510 
	gss
 << 
Cﬁour
–Cﬁour::
Red
 )

6511 << "îr‹: TEST_CASE–\"" << 
ô
->
«me
 << "\" )álready defined.\n"

6512 << "\tFú° sì¿© " << 
¥ev
.
fú°
->
gëTe°Ca£Info
().
löeInfo
 << "\n"

6513 << "\tRedeföedáà" << 
ô
->
gëTe°Ca£Info
().
löeInfo
 << 
°d
::
ídl
;

6515 
throw
 
	g°d
::
ru¡ime_îr‹
(
ss
.
°r
());

6520 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãrTe°s
–
°d
::ve˘‹<Te°Ca£> c⁄°& 
ã°Ca£s
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

6521 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãªd
;

6522 
	gfûãªd
.
ª£rve
–
ã°Ca£s
.
size
() );

6523  
	g°d
::
ve˘‹
<
Te°Ca£
>::
c⁄°_ôî©‹
 
ô
 = 
ã°Ca£s
.
begö
(), 
	gôEnd
 =Åe°Ca£s.
íd
();

6524 
	gô
 !
ôEnd
;

6525 ++
	gô
 )

6526 if–
m©chTe°
–*
ô
, 
ã°S≥c
, 
c⁄fig
 ) )

6527 
	gfûãªd
.
push_back
–*
ô
 );

6528  
	gfûãªd
;

6530 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°Ca£sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

6531  
gëRegi°ryHub
().
gëTe°Ca£Regi°ry
().
gëAŒTe°sS‹ãd
–
c⁄fig
 );

6534 ˛as†
	cTe°Regi°ry
 : 
public
 
ITe°Ca£Regi°ry
 {

6535 
public
:

6536 
Te°Regi°ry
()

6537 : 
m_cuºítS‹tOrdî
–
RunTe°s
::
InDe˛¨©i⁄Ordî
 ),

6538 
m_u¬amedCou¡
( 0 )

6540 
	gvútuÆ
 ~
Te°Regi°ry
();

6542 
vútuÆ
 
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
 ) {

6543 
	g°d
::
°rög
 
«me
 = 
ã°Ca£
.
gëTe°Ca£Info
().name;

6544 if–
	g«me
 == "" ) {

6545 
°d
::
o°rög°ªam
 
oss
;

6546 
	goss
 << "An⁄ymou†ã° ca£ " << ++
	gm_u¬amedCou¡
;

6547  
ªgi°îTe°
–
ã°Ca£
.
wôhName
–
oss
.
°r
() ) );

6549 
	gm_fun˘i⁄s
.
push_back
–
ã°Ca£
 );

6552 
vútuÆ
 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°s
() const {

6553  
m_fun˘i⁄s
;

6555 
vútuÆ
 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) const {

6556 if–
m_s‹ãdFun˘i⁄s
.
em±y
() )

6557 
íf‹˚NoDu∂iˇãTe°Ca£s
–
m_fun˘i⁄s
 );

6559 if–
	gm_cuºítS‹tOrdî
 !
c⁄fig
.
runOrdî
(Ë|| 
m_s‹ãdFun˘i⁄s
.
em±y
() ) {

6560 
m_s‹ãdFun˘i⁄s
 = 
s‹tTe°s
–
c⁄fig
, 
m_fun˘i⁄s
 );

6561 
	gm_cuºítS‹tOrdî
 = 
c⁄fig
.
runOrdî
();

6563  
	gm_s‹ãdFun˘i⁄s
;

6566 
	g¥iv©e
:

6567 
°d
::
ve˘‹
<
Te°Ca£
> 
m_fun˘i⁄s
;

6568 
muèbÀ
 
	gRunTe°s
::
InWh©Ordî
 
m_cuºítS‹tOrdî
;

6569 
muèbÀ
 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m_s‹ãdFun˘i⁄s
;

6570 
size_t
 
	gm_u¬amedCou¡
;

6571 
	g°d
::
ios_ba£
::
Inô
 
m_o°ªamInô
;

6576 
˛ass
 
	gFªeFun˘i⁄Te°Ca£
 : 
public
 
Sh¨edIm∂
<
ITe°Ca£
> {

6577 
public
:

6579 
FªeFun˘i⁄Te°Ca£
–
Te°Fun˘i⁄
 
fun
 ) : 
m_fun
( fun ) {}

6581 
vútuÆ
 
övoke
() const {

6582 
m_fun
();

6585 
	g¥iv©e
:

6586 
vútuÆ
 ~
FªeFun˘i⁄Te°Ca£
();

6588 
Te°Fun˘i⁄
 
	gm_fun
;

6591 
ölöe
 
	g°d
::
°rög
 
exåa˘CœssName
–
°d
::°rög c⁄°& 
˛assOrQuÆifõdMëhodName
 ) {

6592 
°d
::
°rög
 
˛assName
 = 
˛assOrQuÆifõdMëhodName
;

6593 if–
°¨tsWôh
–
˛assName
, "&" ) )

6595 
	g°d
::
size_t
 
œ°Cﬁ⁄s
 = 
˛assName
.
rföd
( "::" );

6596 
	g°d
::
size_t
 
≥nu…im©eCﬁ⁄s
 = 
˛assName
.
rföd
–"::", 
œ°Cﬁ⁄s
-1 );

6597 if–
	g≥nu…im©eCﬁ⁄s
 =
°d
::
°rög
::
≈os
 )

6598 
≥nu…im©eCﬁ⁄s
 = 1;

6599 
	g˛assName
 = 
˛assName
.
sub°r
–
≥nu…im©eCﬁ⁄s
, 
œ°Cﬁ⁄s
-penultimateColons );

6601  
	g˛assName
;

6604 
	gªgi°îTe°Ca£


6605 –
ITe°Ca£
* 
	gã°Ca£
,

6606 c⁄°* 
	g˛assOrQuÆifõdMëhodName
,

6607 
NameAndDesc
 c⁄°& 
	g«meAndDesc
,

6608 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
 ) {

6610 
gëMuèbÀRegi°ryHub
().
	gªgi°îTe°


6611 –
	gmakeTe°Ca£


6612 –
	gã°Ca£
,

6613 
exåa˘CœssName
–
˛assOrQuÆifõdMëhodName
 ),

6614 
	g«meAndDesc
.
	g«me
,

6615 
	g«meAndDesc
.
	gdes¸ùti⁄
,

6616 
	glöeInfo
 ) );

6618 
	gªgi°îTe°Ca£Fun˘i⁄


6619 –
Te°Fun˘i⁄
 
	gfun˘i⁄
,

6620 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
,

6621 
NameAndDesc
 c⁄°& 
	g«meAndDesc
 ) {

6622 
ªgi°îTe°Ca£
–
√w
 
FªeFun˘i⁄Te°Ca£
–
fun˘i⁄
 ), "", 
«meAndDesc
, 
löeInfo
 );

6627 
	gAutoReg
::
AutoReg


6628 –
Te°Fun˘i⁄
 
fun˘i⁄
,

6629 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
,

6630 
NameAndDesc
 c⁄°& 
	g«meAndDesc
 ) {

6631 
ªgi°îTe°Ca£Fun˘i⁄
–
fun˘i⁄
, 
löeInfo
, 
«meAndDesc
 );

6634 
	gAutoReg
::~
AutoReg
() {}

6639 
	#TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED


	)

6641 
	~<m≠
>

6643 
«me•a˚
 
C©ch
 {

6645 ˛as†
	cRï‹ãrRegi°ry
 : 
public
 
IRï‹ãrRegi°ry
 {

6647 
public
:

6649 
vútuÆ
 ~
Rï‹ãrRegi°ry
(Ë
CATCH_OVERRIDE
 {}

6651 
vútuÆ
 
ISåómögRï‹ãr
* 
¸óã
–
°d
::
°rög
 c⁄°& 
«me
, 
På
<
IC⁄fig
 c⁄°> c⁄°& 
c⁄fig
 ) c⁄° 
	gCATCH_OVERRIDE
 {

6652 
	gFa˘‹yM≠
::
c⁄°_ôî©‹
 
ô
 = 
m_Á˘‹õs
.
föd
–
«me
 );

6653 if–
	gô
 =
m_Á˘‹õs
.
íd
() )

6654  
CATCH_NULL
;

6655  
	gô
->
	g£c⁄d
->
¸óã
–
Rï‹ãrC⁄fig
–
c⁄fig
 ) );

6658 
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
På
<
IRï‹ãrFa˘‹y
> c⁄°& 
Á˘‹y
 ) {

6659 
	gm_Á˘‹õs
.
ö£π
–
°d
::
make_∑ú
–
«me
, 
Á˘‹y
 ) );

6661 
ªgi°îLi°íî
–
På
<
IRï‹ãrFa˘‹y
> c⁄°& 
Á˘‹y
 ) {

6662 
	gm_li°íîs
.
push_back
–
Á˘‹y
 );

6665 
vútuÆ
 
Fa˘‹yM≠
 c⁄°& 
gëFa˘‹õs
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

6666  
	gm_Á˘‹õs
;

6668 
vútuÆ
 
Li°íîs
 c⁄°& 
gëLi°íîs
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

6669  
	gm_li°íîs
;

6672 
	g¥iv©e
:

6673 
Fa˘‹yM≠
 
m_Á˘‹õs
;

6674 
Li°íîs
 
	gm_li°íîs
;

6679 
	#TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED


	)

6681 #ifde‡
__OBJC__


6685 
«me•a˚
 
	gC©ch
 {

6687 ˛as†
	cEx˚±i⁄Tøn¶©‹Regi°ry
 : 
public
 
IEx˚±i⁄Tøn¶©‹Regi°ry
 {

6688 
public
:

6689 ~
Ex˚±i⁄Tøn¶©‹Regi°ry
() {

6690 
dñëeAŒ
–
m_å™¶©‹s
 );

6693 
vútuÆ
 
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 ) {

6694 
	gm_å™¶©‹s
.
push_back
–
å™¶©‹
 );

6697 
vútuÆ
 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
() const {

6698 
åy
 {

6699 #ifde‡
__OBJC__


6701 @
åy
 {

6702  
åyTøn¶©‹s
();

6704 @
ˇtch
 (
NSEx˚±i⁄
 *
ex˚±i⁄
) {

6705  
	gC©ch
::
toSåög
–[
ex˚±i⁄
 
des¸ùti⁄
] );

6708  
åyTøn¶©‹s
();

6711 
ˇtch
–
Te°FaûuªEx˚±i⁄
& ) {

6712 
	gthrow
;

6714 
ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

6715  
ex
.
wh©
();

6717 
ˇtch
–
°d
::
°rög
& 
msg
 ) {

6718  
msg
;

6720 
ˇtch
–c⁄° * 
msg
 ) {

6721  
	gmsg
;

6723 
ˇtch
(...) {

6728 
	g°d
::
°rög
 
åyTøn¶©‹s
() const {

6729 if–
m_å™¶©‹s
.
em±y
() )

6730 
throw
;

6732  
	gm_å™¶©‹s
[0]->
å™¶©e
–
m_å™¶©‹s
.
begö
()+1, m_å™¶©‹s.
íd
() );

6735 
	g¥iv©e
:

6736 
°d
::
ve˘‹
<c⁄° 
IEx˚±i⁄Tøn¶©‹
*> 
m_å™¶©‹s
;

6740 
«me•a˚
 
	gC©ch
 {

6742 
	g«me•a˚
 {

6744 
˛ass
 
	gRegi°ryHub
 : 
public
 
IRegi°ryHub
,Öubli¯
	gIMuèbÀRegi°ryHub
 {

6746 
Regi°ryHub
( RegistryHub const& );

6747 
	g›î©‹
=–
Regi°ryHub
 const& );

6749 
	gpublic
:

6750 
Regi°ryHub
() {

6752 
vútuÆ
 
IRï‹ãrRegi°ry
 c⁄°& 
gëRï‹ãrRegi°ry
(Ëc⁄° 
CATCH_OVERRIDE
 {

6753  
m_ªp‹ãrRegi°ry
;

6755 
vútuÆ
 
ITe°Ca£Regi°ry
 c⁄°& 
gëTe°Ca£Regi°ry
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

6756  
	gm_ã°Ca£Regi°ry
;

6758 
vútuÆ
 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
& 
gëEx˚±i⁄Tøn¶©‹Regi°ry
(Ë
	gCATCH_OVERRIDE
 {

6759  
	gm_ex˚±i⁄Tøn¶©‹Regi°ry
;

6762 
	gpublic
:

6763 
vútuÆ
 
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
På
<
IRï‹ãrFa˘‹y
> c⁄°& 
Á˘‹y
 ) 
	gCATCH_OVERRIDE
 {

6764 
	gm_ªp‹ãrRegi°ry
.
ªgi°îRï‹ãr
–
«me
, 
Á˘‹y
 );

6766 
vútuÆ
 
ªgi°îLi°íî
–
På
<
IRï‹ãrFa˘‹y
> c⁄°& 
Á˘‹y
 ) 
	gCATCH_OVERRIDE
 {

6767 
	gm_ªp‹ãrRegi°ry
.
ªgi°îLi°íî
–
Á˘‹y
 );

6769 
vútuÆ
 
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Info
 ) 
	gCATCH_OVERRIDE
 {

6770 
	gm_ã°Ca£Regi°ry
.
ªgi°îTe°
–
ã°Info
 );

6772 
vútuÆ
 
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 ) 
	gCATCH_OVERRIDE
 {

6773 
	gm_ex˚±i⁄Tøn¶©‹Regi°ry
.
ªgi°îTøn¶©‹
–
å™¶©‹
 );

6776 
	g¥iv©e
:

6777 
Te°Regi°ry
 
m_ã°Ca£Regi°ry
;

6778 
Rï‹ãrRegi°ry
 
	gm_ªp‹ãrRegi°ry
;

6779 
Ex˚±i⁄Tøn¶©‹Regi°ry
 
	gm_ex˚±i⁄Tøn¶©‹Regi°ry
;

6783 
ölöe
 
	gRegi°ryHub
*& 
gëTheRegi°ryHub
() {

6784 
Regi°ryHub
* 
	gtheRegi°ryHub
 = 
CATCH_NULL
;

6785 if–!
	gtheRegi°ryHub
 )

6786 
	gtheRegi°ryHub
 = 
√w
 
Regi°ryHub
();

6787  
	gtheRegi°ryHub
;

6791 
	gIRegi°ryHub
& 
gëRegi°ryHub
() {

6792  *
gëTheRegi°ryHub
();

6794 
	gIMuèbÀRegi°ryHub
& 
gëMuèbÀRegi°ryHub
() {

6795  *
gëTheRegi°ryHub
();

6797 
˛ónUp
() {

6798 
dñëe
 
gëTheRegi°ryHub
();

6799 
gëTheRegi°ryHub
(Ë
CATCH_NULL
;

6800 
˛ónUpC⁄ãxt
();

6802 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
() {

6803  
gëRegi°ryHub
().
gëEx˚±i⁄Tøn¶©‹Regi°ry
().
å™¶©eA˘iveEx˚±i⁄
();

6809 
	#TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED


	)

6811 
	~<o°ªam
>

6813 
«me•a˚
 
	gC©ch
 {

6815 
	gNŸIm∂emíãdEx˚±i⁄
::
NŸIm∂emíãdEx˚±i⁄
–
Sour˚LöeInfo
 c⁄°& 
löeInfo
 )

6816 : 
m_löeInfo
–
löeInfo
 ) {

6817 
°d
::
o°rög°ªam
 
oss
;

6818 
	goss
 << 
	glöeInfo
 << ": function ";

6819 
	goss
 << "not implemented";

6820 
	gm_wh©
 = 
oss
.
°r
();

6823 c⁄° * 
	gNŸIm∂emíãdEx˚±i⁄
::
wh©
(Ëc⁄° 
CATCH_NOEXCEPT
 {

6824  
m_wh©
.
c_°r
();

6830 
	#TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED


	)

6833 
	#TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED


	)

6835 
	~<°dex˚±
>

6836 
	~<c°dio
>

6837 
	~<io°ªam
>

6839 
«me•a˚
 
	gC©ch
 {

6841 
	gãm∂©e
<
ty≥«me
 
	gWrôîF
, 
size_t
 
	gbuf„rSize
=256>

6842 ˛as†
	cSåómBufIm∂
 : 
public
 
SåómBufBa£
 {

6843 
d©a
[
buf„rSize
];

6844 
WrôîF
 
	gm_wrôî
;

6846 
	gpublic
:

6847 
SåómBufIm∂
() {

6848 
£ç
–
d©a
, data + (data) );

6851 ~
SåómBufIm∂
(Ë
	gCATCH_NOEXCEPT
 {

6852 
sync
();

6855 
	g¥iv©e
:

6856 
ovîÊow
–
c
 ) {

6857 
sync
();

6859 if–
	gc
 !
EOF
 ) {

6860 if–
pba£
(Ë=
ï±r
() )

6861 
m_wrôî
–
°d
::
°rög
–1, 
°©ic_ˇ°
<>–
c
 ) ) );

6863 
•utc
–
°©ic_ˇ°
<>–
c
 ) );

6868 
sync
() {

6869 if–
pba£
(Ë!
µå
() ) {

6870 
m_wrôî
–
°d
::
°rög
–
pba£
(), 
°©ic_ˇ°
<°d::°rög::
size_ty≥
>–
µå
() -Öbase() ) ) );

6871 
£ç
–
pba£
(), 
ï±r
() );

6879 
	gFûeSåóm
::
FûeSåóm
–
°d
::
°rög
 c⁄°& 
fûíame
 ) {

6880 
m_ofs
.
›í
–
fûíame
.
c_°r
() );

6881 if–
	gm_ofs
.
Áû
() ) {

6882 
	g°d
::
o°rög°ªam
 
oss
;

6883 
	goss
 << "U«bÀÅÿ›í fûe: '" << 
	gfûíame
 << "'";

6884 
throw
 
	g°d
::
domaö_îr‹
–
oss
.
°r
() );

6888 
	g°d
::
o°ªam
& 
FûeSåóm
::
°ªam
() const {

6889  
m_ofs
;

6892 
	sOuçutDebugWrôî
 {

6894 
›î©‹
()–
	g°d
::
°rög
 c⁄°&
°r
 ) {

6895 
wrôeToDebugC⁄sﬁe
–
°r
 );

6899 
	gDebugOutSåóm
::
DebugOutSåóm
()

6900 : 
m_°ªamBuf
–
√w
 
SåómBufIm∂
<
OuçutDebugWrôî
>() ),

6901 
m_os
–
m_°ªamBuf
.
gë
() )

6904 
	g°d
::
o°ªam
& 
DebugOutSåóm
::
°ªam
() const {

6905  
m_os
;

6910 
	gCoutSåóm
::
CoutSåóm
()

6911 : 
m_os
–
C©ch
::
cout
().
rdbuf
() )

6914 
°d
::
o°ªam
& 
CoutSåóm
::
°ªam
() const {

6915  
m_os
;

6918 #i‚de‡
CATCH_CONFIG_NOSTDOUT


6919 
	g°d
::
o°ªam
& 
cout
() {

6920  
°d
::
cout
;

6922 
	g°d
::
o°ªam
& 
˚º
() {

6923  
°d
::
˚º
;

6928 
«me•a˚
 
	gC©ch
 {

6930 ˛as†
	cC⁄ãxt
 : 
public
 
IMuèbÀC⁄ãxt
 {

6932 
C⁄ãxt
(Ë: 
m_c⁄fig
–
CATCH_NULL
 ), 
m_ru¬î
–CATCH_NULL ), 
m_ªsu…C≠tuª
( CATCH_NULL ) {}

6933 
C⁄ãxt
( Context const& );

6934 
	g›î©‹
=–
C⁄ãxt
 const& );

6936 
	gpublic
:

6937 
vútuÆ
 
IResu…C≠tuª
* 
gëResu…C≠tuª
() {

6938  
m_ªsu…C≠tuª
;

6940 
vútuÆ
 
IRu¬î
* 
gëRu¬î
() {

6941  
	gm_ru¬î
;

6943 
vútuÆ
 
size_t
 
gëGíî©‹Index
–
°d
::
°rög
 c⁄°& 
fûeInfo
, size_à
tŸÆSize
 ) {

6944  
gëGíî©‹sF‹CuºítTe°
()

6945 .
gëGíî©‹Info
–
fûeInfo
, 
tŸÆSize
 )

6946 .
gëCuºítIndex
();

6948 
vútuÆ
 
boﬁ
 
adv™˚Gíî©‹sF‹CuºítTe°
() {

6949 
IGíî©‹sF‹Te°
* 
	ggíî©‹s
 = 
födGíî©‹sF‹CuºítTe°
();

6950  
	ggíî©‹s
 && gíî©‹s->
moveNext
();

6953 
vútuÆ
 
	gPå
<
IC⁄fig
 c⁄°> 
gëC⁄fig
() const {

6954  
	gm_c⁄fig
;

6957 
	gpublic
:

6958 
vútuÆ
 
£tResu…C≠tuª
–
IResu…C≠tuª
* 
ªsu…C≠tuª
 ) {

6959 
m_ªsu…C≠tuª
 = 
ªsu…C≠tuª
;

6961 
vútuÆ
 
£tRu¬î
–
IRu¬î
* 
ru¬î
 ) {

6962 
	gm_ru¬î
 = 
ru¬î
;

6964 
vútuÆ
 
£tC⁄fig
–
På
<
IC⁄fig
 c⁄°> c⁄°& 
c⁄fig
 ) {

6965 
	gm_c⁄fig
 = 
c⁄fig
;

6968 
‰õnd
 
	gIMuèbÀC⁄ãxt
& 
gëCuºítMuèbÀC⁄ãxt
();

6970 
	g¥iv©e
:

6971 
IGíî©‹sF‹Te°
* 
födGíî©‹sF‹CuºítTe°
() {

6972 
°d
::
°rög
 
ã°Name
 = 
gëResu…C≠tuª
()->
gëCuºítTe°Name
();

6974 
	g°d
::
m≠
<
°d
::
°rög
, 
	gIGíî©‹sF‹Te°
*>::
c⁄°_ôî©‹
 
ô
 =

6975 
m_gíî©‹sByTe°Name
.
föd
–
ã°Name
 );

6976  
	gô
 !
m_gíî©‹sByTe°Name
.
íd
()

6977 ? 
ô
->
£c⁄d


6978 : 
CATCH_NULL
;

6981 
	gIGíî©‹sF‹Te°
& 
gëGíî©‹sF‹CuºítTe°
() {

6982 
IGíî©‹sF‹Te°
* 
	ggíî©‹s
 = 
födGíî©‹sF‹CuºítTe°
();

6983 if–!
	ggíî©‹s
 ) {

6984 
	g°d
::
°rög
 
ã°Name
 = 
gëResu…C≠tuª
()->
gëCuºítTe°Name
();

6985 
	ggíî©‹s
 = 
¸óãGíî©‹sF‹Te°
();

6986 
	gm_gíî©‹sByTe°Name
.
ö£π
–
°d
::
make_∑ú
–
ã°Name
, 
gíî©‹s
 ) );

6988  *
	ggíî©‹s
;

6991 
	g¥iv©e
:

6992 
På
<
IC⁄fig
 c⁄°> 
m_c⁄fig
;

6993 
IRu¬î
* 
	gm_ru¬î
;

6994 
IResu…C≠tuª
* 
	gm_ªsu…C≠tuª
;

6995 
	g°d
::
m≠
<
°d
::
°rög
, 
	gIGíî©‹sF‹Te°
*> 
	gm_gíî©‹sByTe°Name
;

6998 
	g«me•a˚
 {

6999 
C⁄ãxt
* 
	gcuºítC⁄ãxt
 = 
CATCH_NULL
;

7001 
	gIMuèbÀC⁄ãxt
& 
gëCuºítMuèbÀC⁄ãxt
() {

7002 if–!
	gcuºítC⁄ãxt
 )

7003 
	gcuºítC⁄ãxt
 = 
√w
 
C⁄ãxt
();

7004  *
	gcuºítC⁄ãxt
;

7006 
	gIC⁄ãxt
& 
gëCuºítC⁄ãxt
() {

7007  
gëCuºítMuèbÀC⁄ãxt
();

7010 
˛ónUpC⁄ãxt
() {

7011 
dñëe
 
	gcuºítC⁄ãxt
;

7012 
	gcuºítC⁄ãxt
 = 
CATCH_NULL
;

7017 
	#TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED


	)

7019 
«me•a˚
 
	gC©ch
 {

7020 
	g«me•a˚
 {

7022 
	sICﬁourIm∂
 {

7023 
	gvútuÆ
 ~
ICﬁourIm∂
() {}

7024 
vútuÆ
 
u£
–
Cﬁour
::
Code
 
_cﬁourCode
 ) = 0;

7027 
	gNoCﬁourIm∂
 : 
ICﬁourIm∂
 {

7028 
u£
–
Cﬁour
::
Code
 ) {}

7030 
ICﬁourIm∂
* 
ö°™˚
() {

7031 
NoCﬁourIm∂
 
s_ö°™˚
;

7032  &
	gs_ö°™˚
;

7039 #i‡!
deföed
–
CATCH_CONFIG_COLOUR_NONE
 ) && !deföed–
CATCH_CONFIG_COLOUR_WINDOWS
 ) && !
	$deföed
–
CATCH_CONFIG_COLOUR_ANSI
 )

7040 #ifde‡
CATCH_PLATFORM_WINDOWS


7041 
	#CATCH_CONFIG_COLOUR_WINDOWS


	)

7043 
	#CATCH_CONFIG_COLOUR_ANSI


	)

7047 #i‡
	$deföed
 ( 
CATCH_CONFIG_COLOUR_WINDOWS
 )

7049 #i‚de‡
NOMINMAX


7050 
	#NOMINMAX


	)

7053 #ifde‡
__AFXDLL


7054 
	~<AfxWö.h
>

7056 
	~<wödows.h
>

7059 
«me•a˚
 
C©ch
 {

7060 
«me•a˚
 {

7062 ˛as†
	cWö32CﬁourIm∂
 : 
public
 
ICﬁourIm∂
 {

7063 
public
:

7064 
	`Wö32CﬁourIm∂
(Ë: 
	`°doutH™dÀ
–
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
) )

7066 
CONSOLE_SCREEN_BUFFER_INFO
 
csbiInfo
;

7067 
	`GëC⁄sﬁeS¸ìnBuf„rInfo
–
°doutH™dÀ
, &
csbiInfo
 );

7068 
‹igöÆF‹egroundAâribuãs
 = 
csbiInfo
.
wAâribuãs
 & ~–
BACKGROUND_GREEN
 | 
BACKGROUND_RED
 | 
BACKGROUND_BLUE
 | 
BACKGROUND_INTENSITY
 );

7069 
‹igöÆBackgroundAâribuãs
 = 
csbiInfo
.
wAâribuãs
 & ~–
FOREGROUND_GREEN
 | 
FOREGROUND_RED
 | 
FOREGROUND_BLUE
 | 
FOREGROUND_INTENSITY
 );

7072 
vútuÆ
 
	`u£
–
Cﬁour
::
Code
 
_cﬁourCode
 ) {

7073  
_cﬁourCode
 ) {

7074 
Cﬁour
::
N⁄e
:  
	`£tTextAâribuã
–
‹igöÆF‹egroundAâribuãs
 );

7075 
Cﬁour
::
Whôe
:  
	`£tTextAâribuã
–
FOREGROUND_GREEN
 | 
FOREGROUND_RED
 | 
FOREGROUND_BLUE
 );

7076 
Cﬁour
::
Red
:  
	`£tTextAâribuã
–
FOREGROUND_RED
 );

7077 
Cﬁour
::
Gªí
:  
	`£tTextAâribuã
–
FOREGROUND_GREEN
 );

7078 
Cﬁour
::
Blue
:  
	`£tTextAâribuã
–
FOREGROUND_BLUE
 );

7079 
Cﬁour
::
Cy™
:  
	`£tTextAâribuã
–
FOREGROUND_BLUE
 | 
FOREGROUND_GREEN
 );

7080 
Cﬁour
::
Yñlow
:  
	`£tTextAâribuã
–
FOREGROUND_RED
 | 
FOREGROUND_GREEN
 );

7081 
Cﬁour
::
Gªy
:  
	`£tTextAâribuã
( 0 );

7083 
Cﬁour
::
LightGªy
:  
	`£tTextAâribuã
–
FOREGROUND_INTENSITY
 );

7084 
Cﬁour
::
BrightRed
:  
	`£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_RED
 );

7085 
Cﬁour
::
BrightGªí
:  
	`£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_GREEN
 );

7086 
Cﬁour
::
BrightWhôe
:  
	`£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_GREEN
 | 
FOREGROUND_RED
 | 
FOREGROUND_BLUE
 );

7088 
Cﬁour
::
Bright
: 
throw
 
°d
::
	`logic_îr‹
( "notá colour" );

7092 
¥iv©e
:

7093 
	`£tTextAâribuã
–
WORD
 
_ãxtAâribuã
 ) {

7094 
	`SëC⁄sﬁeTextAâribuã
–
°doutH™dÀ
, 
_ãxtAâribuã
 | 
‹igöÆBackgroundAâribuãs
 );

7096 
HANDLE
 
°doutH™dÀ
;

7097 
WORD
 
‹igöÆF‹egroundAâribuãs
;

7098 
WORD
 
‹igöÆBackgroundAâribuãs
;

7101 
ICﬁourIm∂
* 
	`∂©f‹mCﬁourIn°™˚
() {

7102 
Wö32CﬁourIm∂
 
s_ö°™˚
;

7104 
På
<
IC⁄fig
 c⁄°> 
c⁄fig
 = 
	`gëCuºítC⁄ãxt
().
	`gëC⁄fig
();

7105 
U£Cﬁour
::
YesOrNo
 
cﬁourMode
 = 
c⁄fig


7106 ? 
c⁄fig
->
	`u£Cﬁour
()

7107 : 
U£Cﬁour
::
Auto
;

7108 if–
cﬁourMode
 =
U£Cﬁour
::
Auto
 )

7109 
cﬁourMode
 = !
	`isDebuggîA˘ive
()

7110 ? 
U£Cﬁour
::
Yes


7111 : 
U£Cﬁour
::
No
;

7112  
cﬁourMode
 =
U£Cﬁour
::
Yes


7113 ? &
s_ö°™˚


7114 : 
NoCﬁourIm∂
::
	`ö°™˚
();

7118 
	}
}

7120 #ñi‡
	$deföed
–
CATCH_CONFIG_COLOUR_ANSI
 )

7122 
	~<uni°d.h
>

7124 
«me•a˚
 
C©ch
 {

7125 
«me•a˚
 {

7131 ˛as†
	cPosixCﬁourIm∂
 : 
public
 
ICﬁourIm∂
 {

7132 
public
:

7133 
vútuÆ
 
	`u£
–
Cﬁour
::
Code
 
_cﬁourCode
 ) {

7134  
_cﬁourCode
 ) {

7135 
Cﬁour
::
N⁄e
:

7136 
Cﬁour
::
Whôe
:  
	`£tCﬁour
( "[0m" );

7137 
Cﬁour
::
Red
:  
	`£tCﬁour
( "[0;31m" );

7138 
Cﬁour
::
Gªí
:  
	`£tCﬁour
( "[0;32m" );

7139 
Cﬁour
::
Blue
:  
	`£tCﬁour
( "[0:34m" );

7140 
Cﬁour
::
Cy™
:  
	`£tCﬁour
( "[0;36m" );

7141 
Cﬁour
::
Yñlow
:  
	`£tCﬁour
( "[0;33m" );

7142 
Cﬁour
::
Gªy
:  
	`£tCﬁour
( "[1;30m" );

7144 
Cﬁour
::
LightGªy
:  
	`£tCﬁour
( "[0;37m" );

7145 
Cﬁour
::
BrightRed
:  
	`£tCﬁour
( "[1;31m" );

7146 
Cﬁour
::
BrightGªí
:  
	`£tCﬁour
( "[1;32m" );

7147 
Cﬁour
::
BrightWhôe
:  
	`£tCﬁour
( "[1;37m" );

7149 
Cﬁour
::
Bright
: 
throw
 
°d
::
	`logic_îr‹
( "notá colour" );

7152 
ICﬁourIm∂
* 
	`ö°™˚
() {

7153 
PosixCﬁourIm∂
 
s_ö°™˚
;

7154  &
s_ö°™˚
;

7157 
¥iv©e
:

7158 
	`£tCﬁour
–c⁄° * 
_esˇ≥Code
 ) {

7159 
C©ch
::
	`cout
(Ë<< '\033' << 
_esˇ≥Code
;

7163 
ICﬁourIm∂
* 
	`∂©f‹mCﬁourIn°™˚
() {

7164 
På
<
IC⁄fig
 c⁄°> 
c⁄fig
 = 
	`gëCuºítC⁄ãxt
().
	`gëC⁄fig
();

7165 
U£Cﬁour
::
YesOrNo
 
cﬁourMode
 = 
c⁄fig


7166 ? 
c⁄fig
->
	`u£Cﬁour
()

7167 : 
U£Cﬁour
::
Auto
;

7168 if–
cﬁourMode
 =
U£Cﬁour
::
Auto
 )

7169 
cﬁourMode
 = (!
	`isDebuggîA˘ive
(Ë&& 
	`ißây
(
STDOUT_FILENO
) )

7170 ? 
U£Cﬁour
::
Yes


7171 : 
U£Cﬁour
::
No
;

7172  
cﬁourMode
 =
U£Cﬁour
::
Yes


7173 ? 
PosixCﬁourIm∂
::
	`ö°™˚
()

7174 : 
NoCﬁourIm∂
::
	`ö°™˚
();

7178 
	}
}

7182 
«me•a˚
 
	gC©ch
 {

7184 
ICﬁourIm∂
* 
∂©f‹mCﬁourIn°™˚
(Ë{  
	gNoCﬁourIm∂
::
ö°™˚
(); }

7190 
«me•a˚
 
	gC©ch
 {

7192 
	gCﬁour
::
Cﬁour
–
Code
 
_cﬁourCode
 ) : 
m_moved
–
Ál£
 ) { 
u£
( _colourCode ); }

7193 
	gCﬁour
::
Cﬁour
–Cﬁou∏c⁄°& 
_Ÿhî
 ) : 
m_moved
–
Ál£
 ) { 
c⁄°_ˇ°
<Cﬁour&>–_Ÿhî ).m_moved = 
åue
; }

7194 
	gCﬁour
::~
Cﬁour
(){ if–!
m_moved
 ) 
u£
–
N⁄e
 ); }

7196 
	gCﬁour
::
u£
–
Code
 
_cﬁourCode
 ) {

7197 
ICﬁourIm∂
* 
im∂
 = 
∂©f‹mCﬁourIn°™˚
();

7198 
	gim∂
->
u£
–
_cﬁourCode
 );

7204 
	#TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED


	)

7206 
	~<ve˘‹
>

7207 
	~<°rög
>

7208 
	~<m≠
>

7210 
«me•a˚
 
	gC©ch
 {

7212 
	gGíî©‹Info
 : 
IGíî©‹Info
 {

7214 
Gíî©‹Info
–
°d
::
size_t
 
size
 )

7215 : 
m_size
–
size
 ),

7216 
m_cuºítIndex
( 0 )

7219 
boﬁ
 
moveNext
() {

7220 if–++
	gm_cuºítIndex
 =
m_size
 ) {

7221 
m_cuºítIndex
 = 0;

7222  
	gÁl£
;

7224  
	gåue
;

7227 
	g°d
::
size_t
 
gëCuºítIndex
() const {

7228  
m_cuºítIndex
;

7231 
	g°d
::
size_t
 
m_size
;

7232 
	g°d
::
size_t
 
m_cuºítIndex
;

7237 ˛as†
	cGíî©‹sF‹Te°
 : 
public
 
IGíî©‹sF‹Te°
 {

7239 
public
:

7240 ~
Gíî©‹sF‹Te°
() {

7241 
dñëeAŒ
–
m_gíî©‹sInOrdî
 );

7244 
	gIGíî©‹Info
& 
gëGíî©‹Info
–
°d
::
°rög
 c⁄°& 
fûeInfo
, std::
size_t
 
size
 ) {

7245 
°d
::
m≠
<°d::
°rög
, 
	gIGíî©‹Info
*>::
c⁄°_ôî©‹
 
ô
 = 
m_gíî©‹sByName
.
föd
–
fûeInfo
 );

7246 if–
	gô
 =
m_gíî©‹sByName
.
íd
() ) {

7247 
IGíî©‹Info
* 
öfo
 = 
√w
 
Gíî©‹Info
–
size
 );

7248 
	gm_gíî©‹sByName
.
ö£π
–
°d
::
make_∑ú
–
fûeInfo
, 
öfo
 ) );

7249 
	gm_gíî©‹sInOrdî
.
push_back
–
öfo
 );

7250  *
	göfo
;

7252  *
	gô
->
	g£c⁄d
;

7255 
boﬁ
 
moveNext
() {

7256 
	g°d
::
ve˘‹
<
IGíî©‹Info
*>::
c⁄°_ôî©‹
 
ô
 = 
m_gíî©‹sInOrdî
.
begö
();

7257 
	g°d
::
ve˘‹
<
IGíî©‹Info
*>::
c⁄°_ôî©‹
 
ôEnd
 = 
m_gíî©‹sInOrdî
.
íd
();

7258 ; 
	gô
 !
ôEnd
; ++it ) {

7259 if–(*
	gô
)->
moveNext
() )

7260  
	gåue
;

7262  
	gÁl£
;

7265 
	g¥iv©e
:

7266 
°d
::
m≠
<°d::
°rög
, 
	gIGíî©‹Info
*> 
	gm_gíî©‹sByName
;

7267 
	g°d
::
ve˘‹
<
IGíî©‹Info
*> 
m_gíî©‹sInOrdî
;

7270 
IGíî©‹sF‹Te°
* 
¸óãGíî©‹sF‹Te°
()

7272  
√w
 
Gíî©‹sF‹Te°
();

7278 
	#TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED


	)

7280 
«me•a˚
 
	gC©ch
 {

7282 
	gAs£πi⁄Info
::
As£πi⁄Info
–
°d
::
°rög
 c⁄°& 
_ma¸oName
,

7283 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

7284 
°d
::
°rög
 c⁄°& 
_ˇ±uªdEx¥essi⁄
,

7285 
Resu…Di•osôi⁄
::
Fœgs
 
_ªsu…Di•osôi⁄
 )

7286 : 
ma¸oName
–
_ma¸oName
 ),

7287 
löeInfo
–
_löeInfo
 ),

7288 
ˇ±uªdEx¥essi⁄
–
_ˇ±uªdEx¥essi⁄
 ),

7289 
ªsu…Di•osôi⁄
–
_ªsu…Di•osôi⁄
 )

7292 
	gAs£πi⁄Resu…
::
As£πi⁄Resu…
() {}

7294 
As£πi⁄Resu…
::As£πi⁄Resu…–
As£πi⁄Info
 c⁄°& 
öfo
, 
As£πi⁄Resu…D©a
 c⁄°& 
d©a
 )

7295 : 
m_öfo
–
öfo
 ),

7296 
m_ªsu…D©a
–
d©a
 )

7299 
	gAs£πi⁄Resu…
::~
As£πi⁄Resu…
() {}

7302 
boﬁ
 
As£πi⁄Resu…
::
suc˚eded
() const {

7303  
C©ch
::
isOk
–
m_ªsu…D©a
.
ªsu…Ty≥
 );

7307 
boﬁ
 
	gAs£πi⁄Resu…
::
isOk
() const {

7308  
C©ch
::
isOk
–
m_ªsu…D©a
.
ªsu…Ty≥
 ) || 
shouldSuµªssFaûuª
–
m_öfo
.
ªsu…Di•osôi⁄
 );

7311 
	gResu…Was
::
OfTy≥
 
As£πi⁄Resu…
::
gëResu…Ty≥
() const {

7312  
m_ªsu…D©a
.
ªsu…Ty≥
;

7315 
boﬁ
 
	gAs£πi⁄Resu…
::
hasEx¥essi⁄
() const {

7316  !
m_öfo
.
ˇ±uªdEx¥essi⁄
.
em±y
();

7319 
boﬁ
 
	gAs£πi⁄Resu…
::
hasMesßge
() const {

7320  !
m_ªsu…D©a
.
mesßge
.
em±y
();

7323 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëEx¥essi⁄
() const {

7324 if–
isFÆ£Te°
–
m_öfo
.
ªsu…Di•osôi⁄
 ) )

7325  "!" + 
m_öfo
.
ˇ±uªdEx¥essi⁄
;

7327  
	gm_öfo
.
	gˇ±uªdEx¥essi⁄
;

7329 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëEx¥essi⁄InMa¸o
() const {

7330 if–
m_öfo
.
ma¸oName
.
em±y
() )

7331  
m_öfo
.
ˇ±uªdEx¥essi⁄
;

7333  
	gm_öfo
.
	gma¸oName
 + "–" + m_öfo.
	gˇ±uªdEx¥essi⁄
 + " )";

7336 
boﬁ
 
	gAs£πi⁄Resu…
::
hasEx∑ndedEx¥essi⁄
() const {

7337  
hasEx¥essi⁄
(Ë&& 
gëEx∑ndedEx¥essi⁄
(Ë!
gëEx¥essi⁄
();

7340 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëEx∑ndedEx¥essi⁄
() const {

7341  
m_ªsu…D©a
.
ªc⁄°ru˘edEx¥essi⁄
;

7344 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëMesßge
() const {

7345  
m_ªsu…D©a
.
mesßge
;

7347 
Sour˚LöeInfo
 
	gAs£πi⁄Resu…
::
gëSour˚Info
() const {

7348  
m_öfo
.
löeInfo
;

7351 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëTe°Ma¸oName
() const {

7352  
m_öfo
.
ma¸oName
;

7358 
	#TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED


	)

7360 
«me•a˚
 
	gC©ch
 {

7362 
ölöe
 
	gTe°Ca£Info
::
S≥cülPr›îtõs
 
∑r£S≥cülTag
–
°d
::
°rög
 c⁄°& 
èg
 ) {

7363 if–
°¨tsWôh
–
èg
, "." ) ||

7364 
	gèg
 == "hide" ||

7365 
èg
 == "!hide" )

7366  
Te°Ca£Info
::
IsHiddí
;

7367 if–
	gèg
 == "!throws" )

7368  
Te°Ca£Info
::
Throws
;

7369 if–
	gèg
 == "!shouldfail" )

7370  
Te°Ca£Info
::
ShouldFaû
;

7371 if–
	gèg
 == "!mayfail" )

7372  
Te°Ca£Info
::
MayFaû
;

7374  
	gTe°Ca£Info
::
N⁄e
;

7376 
ölöe
 
boﬁ
 
isRe£rvedTag
–
°d
::
°rög
 c⁄°& 
èg
 ) {

7377  
∑r£S≥cülTag
–
èg
 ) =
Te°Ca£Info
::
N⁄e
 &&Åag.
size
(Ë> 0 && !
iß um
(Åag[0] );

7379 
ölöe
 
íf‹˚NŸRe£rvedTag
–
°d
::
°rög
 c⁄°& 
èg
, 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 ) {

7380 if–
isRe£rvedTag
–
èg
 ) ) {

7382 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Red
 );

7383 
	gC©ch
::
˚º
()

7384 << "TagÇamê[" << 
èg
 << "]Çotállowed.\n"

7388 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
FûeName
 );

7389 
	gC©ch
::
˚º
(Ë<< 
_löeInfo
 << 
°d
::
ídl
;

7391 
exô
(1);

7395 
Te°Ca£
 
makeTe°Ca£
–
ITe°Ca£
* 
_ã°Ca£
,

7396 
°d
::
°rög
 c⁄°& 
_˛assName
,

7397 
°d
::
°rög
 c⁄°& 
_«me
,

7398 
°d
::
°rög
 c⁄°& 
_descOrTags
,

7399 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 )

7401 
boﬁ
 
isHiddí
–
°¨tsWôh
–
_«me
, "./" ) );

7404 
	g°d
::
£t
<
°d
::
°rög
> 
ègs
;

7405 
	g°d
::
°rög
 
desc
, 
	gèg
;

7406 
boﬁ
 
	göTag
 = 
Ál£
;

7407  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	g_descOrTags
.
size
(); ++i ) {

7408 
	gc
 = 
_descOrTags
[
i
];

7409 if–!
	göTag
 ) {

7410 if–
	gc
 == '[' )

7411 
öTag
 = 
åue
;

7413 
	gdesc
 +
c
;

7416 if–
	gc
 == ']' ) {

7417 
Te°Ca£Info
::
S≥cülPr›îtõs
 
¥›
 = 
∑r£S≥cülTag
–
èg
 );

7418 if–
	g¥›
 =
Te°Ca£Info
::
IsHiddí
 )

7419 
isHiddí
 = 
åue
;

7420 if–
	g¥›
 =
Te°Ca£Info
::
N⁄e
 )

7421 
íf‹˚NŸRe£rvedTag
–
èg
, 
_löeInfo
 );

7423 
	gègs
.
ö£π
–
èg
 );

7424 
	gèg
.
˛ór
();

7425 
	göTag
 = 
Ál£
;

7428 
	gèg
 +
c
;

7431 if–
	gisHiddí
 ) {

7432 
	gègs
.
ö£π
( "hide" );

7433 
	gègs
.
ö£π
( "." );

7436 
Te°Ca£Info
 
öfo
–
_«me
, 
_˛assName
, 
desc
, 
ègs
, 
_löeInfo
 );

7437  
Te°Ca£
–
_ã°Ca£
, 
öfo
 );

7440 
£tTags
–
Te°Ca£Info
& 
ã°Ca£Info
, 
°d
::
£t
<°d::
°rög
> c⁄°& 
ègs
 )

7442 
ã°Ca£Info
.
ègs
 =Åags;

7443 
	gã°Ca£Info
.
	glˇ£Tags
.
˛ór
();

7445 
	g°d
::
o°rög°ªam
 
oss
;

7446  
	g°d
::
£t
<
°d
::
°rög
>::
c⁄°_ôî©‹
 
ô
 = 
ègs
.
begö
(), 
	gôEnd
 =Åags.
íd
(); 
	gô
 !
ôEnd
; ++it ) {

7447 
	goss
 << "[" << *
	gô
 << "]";

7448 
	g°d
::
°rög
 
lˇ£Tag
 = 
toLowî
–*
ô
 );

7449 
	gã°Ca£Info
.
	g¥›îtõs
 = 
°©ic_ˇ°
<
Te°Ca£Info
::
S≥cülPr›îtõs
>–
ã°Ca£Info
.
¥›îtõs
 | 
∑r£S≥cülTag
–
lˇ£Tag
 ) );

7450 
	gã°Ca£Info
.
	glˇ£Tags
.
ö£π
–
lˇ£Tag
 );

7452 
	gã°Ca£Info
.
	gègsAsSåög
 = 
oss
.
°r
();

7455 
	gTe°Ca£Info
::
Te°Ca£Info
–
°d
::
°rög
 c⁄°& 
_«me
,

7456 
°d
::
°rög
 c⁄°& 
_˛assName
,

7457 
°d
::
°rög
 c⁄°& 
_des¸ùti⁄
,

7458 
°d
::
£t
<°d::
°rög
> c⁄°& 
_ègs
,

7459 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 )

7460 : 
«me
–
_«me
 ),

7461 
˛assName
–
_˛assName
 ),

7462 
des¸ùti⁄
–
_des¸ùti⁄
 ),

7463 
löeInfo
–
_löeInfo
 ),

7464 
¥›îtõs
–
N⁄e
 )

7466 
£tTags
–*
this
, 
_ègs
 );

7469 
	gTe°Ca£Info
::
Te°Ca£Info
–Te°Ca£Infÿc⁄°& 
Ÿhî
 )

7470 : 
«me
–
Ÿhî
.name ),

7471 
˛assName
–
Ÿhî
.className ),

7472 
des¸ùti⁄
–
Ÿhî
.description ),

7473 
ègs
–
Ÿhî
.tags ),

7474 
lˇ£Tags
–
Ÿhî
.lcaseTags ),

7475 
ègsAsSåög
–
Ÿhî
.tagsAsString ),

7476 
löeInfo
–
Ÿhî
.lineInfo ),

7477 
¥›îtõs
–
Ÿhî
.properties )

7480 
boﬁ
 
	gTe°Ca£Info
::
isHiddí
() const {

7481  ( 
¥›îtõs
 & 
IsHiddí
 ) != 0;

7483 
boﬁ
 
	gTe°Ca£Info
::
throws
() const {

7484  ( 
¥›îtõs
 & 
Throws
 ) != 0;

7486 
boﬁ
 
	gTe°Ca£Info
::
okToFaû
() const {

7487  ( 
¥›îtõs
 & (
ShouldFaû
 | 
MayFaû
 ) ) != 0;

7489 
boﬁ
 
	gTe°Ca£Info
::
ex≥˘edToFaû
() const {

7490  ( 
¥›îtõs
 & (
ShouldFaû
 ) ) != 0;

7493 
	gTe°Ca£
::
Te°Ca£
–
ITe°Ca£
* 
ã°Ca£
, 
Te°Ca£Info
 c⁄°& 
öfo
 ) : Te°Ca£Info–öfÿ), 
ã°
(ÅestCase ) {}

7495 
	gTe°Ca£
::
Te°Ca£
–Te°Ca£ c⁄°& 
Ÿhî
 )

7496 : 
Te°Ca£Info
–
Ÿhî
 ),

7497 
ã°
–
Ÿhî
.test )

7500 
Te°Ca£
 
	gTe°Ca£
::
wôhName
–
°d
::
°rög
 c⁄°& 
_√wName
 ) const {

7501 
Te°Ca£
 
Ÿhî
–*
this
 );

7502 
	gŸhî
.
	g«me
 = 
_√wName
;

7503  
	gŸhî
;

7506 
	gTe°Ca£
::
sw≠
–
Te°Ca£
& 
Ÿhî
 ) {

7507 
ã°
.
sw≠
–
Ÿhî
.test );

7508 
	g«me
.
sw≠
–
Ÿhî
.
«me
 );

7509 
	g˛assName
.
sw≠
–
Ÿhî
.
˛assName
 );

7510 
	gdes¸ùti⁄
.
sw≠
–
Ÿhî
.
des¸ùti⁄
 );

7511 
	gègs
.
sw≠
–
Ÿhî
.
ègs
 );

7512 
	glˇ£Tags
.
sw≠
–
Ÿhî
.
lˇ£Tags
 );

7513 
	gègsAsSåög
.
sw≠
–
Ÿhî
.
ègsAsSåög
 );

7514 
	g°d
::
sw≠
–
Te°Ca£Info
::
¥›îtõs
, 
°©ic_ˇ°
<Te°Ca£Info&>–
Ÿhî
 ).properties );

7515 
	g°d
::
sw≠
–
löeInfo
, 
Ÿhî
.lineInfo );

7518 
	gTe°Ca£
::
övoke
() const {

7519 
ã°
->
övoke
();

7522 
boﬁ
 
	gTe°Ca£
::
›î©‹
 =–
Te°Ca£
 c⁄°& 
Ÿhî
 ) const {

7523  
ã°
.
gë
(Ë=
Ÿhî
.test.get() &&

7524 
«me
 =
Ÿhî
.name &&

7525 
˛assName
 =
Ÿhî
.className;

7528 
boﬁ
 
	gTe°Ca£
::
›î©‹
 < ( 
Te°Ca£
 c⁄°& 
Ÿhî
 ) const {

7529  
«me
 < 
Ÿhî
.name;

7531 
	gTe°Ca£
& Te°Ca£::
›î©‹
 = ( 
Te°Ca£
 c⁄°& 
Ÿhî
 ) {

7532 
Te°Ca£
 
ãmp
–
Ÿhî
 );

7533 
sw≠
–
ãmp
 );

7534  *
	gthis
;

7537 
Te°Ca£Info
 c⁄°& 
	gTe°Ca£
::
gëTe°Ca£Info
() const

7539  *
this
;

7545 
	#TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED


	)

7547 
«me•a˚
 
	gC©ch
 {

7549 
	gVîsi⁄
::
Vîsi⁄


7550 –
_maj‹Vîsi⁄
,

7551 
	g_mö‹Vîsi⁄
,

7552 
	g_∑tchNumbî
,

7553 
	g°d
::
°rög
 c⁄°& 
_bønchName
,

7554 
	g_buûdNumbî
 )

7555 : 
maj‹Vîsi⁄
–
_maj‹Vîsi⁄
 ),

7556 
mö‹Vîsi⁄
–
_mö‹Vîsi⁄
 ),

7557 
∑tchNumbî
–
_∑tchNumbî
 ),

7558 
bønchName
–
_bønchName
 ),

7559 
buûdNumbî
–
_buûdNumbî
 )

7562 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Vîsi⁄
 c⁄°& 
	gvîsi⁄
 ) {

7563 
	gos
 << 
	gvîsi⁄
.
	gmaj‹Vîsi⁄
 << "."

7564 << 
	gvîsi⁄
.
	gmö‹Vîsi⁄
 << "."

7565 << 
	gvîsi⁄
.
	g∑tchNumbî
;

7567 if–!
	gvîsi⁄
.
	gbønchName
.
em±y
() ) {

7568 
	gos
 << "-" << 
	gvîsi⁄
.
	gbønchName


7569 << "." << 
	gvîsi⁄
.
	gbuûdNumbî
;

7571  
	gos
;

7574 
Vîsi⁄
 
libøryVîsi⁄
( 1, 5, 6, "", 0 );

7579 
	#TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED


	)

7581 
«me•a˚
 
	gC©ch
 {

7583 
	gMesßgeInfo
::
MesßgeInfo
–
°d
::
°rög
 c⁄°& 
_ma¸oName
,

7584 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

7585 
Resu…Was
::
OfTy≥
 
_ty≥
 )

7586 : 
ma¸oName
–
_ma¸oName
 ),

7587 
löeInfo
–
_löeInfo
 ),

7588 
ty≥
–
_ty≥
 ),

7589 
£quí˚
–++
globÆCou¡
 )

7593 
	gMesßgeInfo
::
globÆCou¡
 = 0;

7597 
	gSc›edMesßge
::
Sc›edMesßge
–
MesßgeBuûdî
 c⁄°& 
buûdî
 )

7598 : 
m_öfo
–
buûdî
.m_info )

7600 
m_öfo
.
mesßge
 = 
buûdî
.
m_°ªam
.
°r
();

7601 
gëResu…C≠tuª
().
pushSc›edMesßge
–
m_öfo
 );

7603 
	gSc›edMesßge
::
Sc›edMesßge
–Sc›edMesßgêc⁄°& 
Ÿhî
 )

7604 : 
m_öfo
–
Ÿhî
.m_info )

7607 
Sc›edMesßge
::~ScopedMessage() {

7608 
gëResu…C≠tuª
().
p›Sc›edMesßge
–
m_öfo
 );

7614 
	#TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED


	)

7617 
	#TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED


	)

7619 
«me•a˚
 
	gC©ch


7622 
	gIRï‹ãr
 : 
ISh¨ed
 {

7623 
vútuÆ
 ~
IRï‹ãr
();

7625 
vútuÆ
 
boﬁ
 
shouldRedúe˘Stdout
() const = 0;

7627 
vútuÆ
 
SèπTe°ög
() = 0;

7628 
vútuÆ
 
EndTe°ög
–
TŸÆs
 c⁄°& 
tŸÆs
 ) = 0;

7629 
vútuÆ
 
SèπGroup
–
°d
::
°rög
 c⁄°& 
groupName
 ) = 0;

7630 
vútuÆ
 
EndGroup
–
°d
::
°rög
 c⁄°& 
groupName
, 
TŸÆs
 c⁄°& 
tŸÆs
 ) = 0;

7631 
vútuÆ
 
SèπTe°Ca£
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) = 0;

7632 
vútuÆ
 
EndTe°Ca£
–
Te°Ca£Info
 c⁄°& 
ã°Info
, 
TŸÆs
 c⁄°& 
tŸÆs
, 
°d
::
°rög
 c⁄°& 
°dOut
, std::°rög c⁄°& 
°dEº
 ) = 0;

7633 
vútuÆ
 
SèπSe˘i⁄
–
°d
::
°rög
 c⁄°& 
£˘i⁄Name
, std::°rög c⁄°& 
des¸ùti⁄
 ) = 0;

7634 
vútuÆ
 
EndSe˘i⁄
–
°d
::
°rög
 c⁄°& 
£˘i⁄Name
, 
Cou¡s
 c⁄°& 
as£πi⁄s
 ) = 0;

7635 
vútuÆ
 
NoAs£πi⁄sInSe˘i⁄
–
°d
::
°rög
 c⁄°& 
£˘i⁄Name
 ) = 0;

7636 
vútuÆ
 
NoAs£πi⁄sInTe°Ca£
–
°d
::
°rög
 c⁄°& 
ã°Name
 ) = 0;

7637 
vútuÆ
 
Ab‹ãd
() = 0;

7638 
vútuÆ
 
Resu…
–
As£πi⁄Resu…
 c⁄°& 
ªsu…
 ) = 0;

7641 
˛ass
 
	gLegacyRï‹ãrAd≠ãr
 : 
public
 
Sh¨edIm∂
<
ISåómögRï‹ãr
>

7643 
public
:

7644 
LegacyRï‹ãrAd≠ãr
–
På
<
IRï‹ãr
> c⁄°& 
ÀgacyRï‹ãr
 );

7645 
	gvútuÆ
 ~
LegacyRï‹ãrAd≠ãr
();

7647 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
() const;

7648 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 const& );

7649 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 const& );

7650 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 );

7651 
vútuÆ
 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 );

7652 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 );

7653 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 const& );

7654 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 );

7655 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 );

7656 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 );

7657 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 );

7658 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 );

7659 
vútuÆ
 
skùTe°
–
Te°Ca£Info
 const& );

7661 
	g¥iv©e
:

7662 
På
<
IRï‹ãr
> 
m_ÀgacyRï‹ãr
;

7666 
«me•a˚
 
	gC©ch


7668 
	gLegacyRï‹ãrAd≠ãr
::
LegacyRï‹ãrAd≠ãr
–
På
<
IRï‹ãr
> c⁄°& 
ÀgacyRï‹ãr
 )

7669 : 
m_ÀgacyRï‹ãr
–
ÀgacyRï‹ãr
 )

7671 
LegacyRï‹ãrAd≠ãr
::~LegacyReporterAdapter() {}

7673 
Rï‹ãrPª„ªn˚s
 
LegacyRï‹ãrAd≠ãr
::
gëPª„ªn˚s
() const {

7674 
Rï‹ãrPª„ªn˚s
 
¥efs
;

7675 
	g¥efs
.
	gshouldRedúe˘StdOut
 = 
m_ÀgacyRï‹ãr
->
shouldRedúe˘Stdout
();

7676  
	g¥efs
;

7679 
	gLegacyRï‹ãrAd≠ãr
::
noM©chögTe°Ca£s
–
°d
::
°rög
 const& ) {}

7680 
LegacyRï‹ãrAd≠ãr
::
ã°RunSèπög
–
Te°RunInfo
 const& ) {

7681 
m_ÀgacyRï‹ãr
->
SèπTe°ög
();

7683 
	gLegacyRï‹ãrAd≠ãr
::
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) {

7684 
m_ÀgacyRï‹ãr
->
SèπGroup
–
groupInfo
.
«me
 );

7686 
	gLegacyRï‹ãrAd≠ãr
::
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) {

7687 
m_ÀgacyRï‹ãr
->
SèπTe°Ca£
–
ã°Info
 );

7689 
	gLegacyRï‹ãrAd≠ãr
::
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) {

7690 
m_ÀgacyRï‹ãr
->
SèπSe˘i⁄
–
£˘i⁄Info
.
«me
, se˘i⁄Info.
des¸ùti⁄
 );

7692 
	gLegacyRï‹ãrAd≠ãr
::
as£πi⁄Sèπög
–
As£πi⁄Info
 const& ) {

7696 
boﬁ
 
LegacyRï‹ãrAd≠ãr
::
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) {

7697 if–
as£πi⁄Sèts
.
as£πi⁄Resu…
.
gëResu…Ty≥
(Ë!
Resu…Was
::
Ok
 ) {

7698  
°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ô
 = 
as£πi⁄Sèts
.
öfoMesßges
.
begö
(), 
	gôEnd
 =ás£πi⁄Sèts.öfoMesßges.
íd
();

7699 
	gô
 !
ôEnd
;

7700 ++
	gô
 ) {

7701 if–
	gô
->
	gty≥
 =
Resu…Was
::
Info
 ) {

7702 
Resu…Buûdî
 
rb
–
ô
->
ma¸oName
.
c_°r
(), it->
löeInfo
, "", 
Resu…Di•osôi⁄
::
N‹mÆ
 );

7703 
	grb
 << 
	gô
->
	gmesßge
;

7704 
	grb
.
£tResu…Ty≥
–
Resu…Was
::
Info
 );

7705 
As£πi⁄Resu…
 
	gªsu…
 = 
rb
.
buûd
();

7706 
	gm_ÀgacyRï‹ãr
->
Resu…
–
ªsu…
 );

7710 
	gm_ÀgacyRï‹ãr
->
Resu…
–
as£πi⁄Sèts
.
as£πi⁄Resu…
 );

7711  
	gåue
;

7713 
	gLegacyRï‹ãrAd≠ãr
::
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) {

7714 if–
£˘i⁄Sèts
.
missögAs£πi⁄s
 )

7715 
m_ÀgacyRï‹ãr
->
NoAs£πi⁄sInSe˘i⁄
–
£˘i⁄Sèts
.
£˘i⁄Info
.
«me
 );

7716 
	gm_ÀgacyRï‹ãr
->
EndSe˘i⁄
–
£˘i⁄Sèts
.
£˘i⁄Info
.
«me
, se˘i⁄Sèts.
as£πi⁄s
 );

7718 
	gLegacyRï‹ãrAd≠ãr
::
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) {

7719 
m_ÀgacyRï‹ãr
->
EndTe°Ca£


7720 –
ã°Ca£Sèts
.
ã°Info
,

7721 
	gã°Ca£Sèts
.
	gtŸÆs
,

7722 
	gã°Ca£Sèts
.
	g°dOut
,

7723 
	gã°Ca£Sèts
.
	g°dEº
 );

7725 
	gLegacyRï‹ãrAd≠ãr
::
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) {

7726 if–
ã°GroupSèts
.
ab‹tög
 )

7727 
m_ÀgacyRï‹ãr
->
Ab‹ãd
();

7728 
	gm_ÀgacyRï‹ãr
->
EndGroup
–
ã°GroupSèts
.
groupInfo
.
«me
,Åe°GroupSèts.
tŸÆs
 );

7730 
	gLegacyRï‹ãrAd≠ãr
::
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) {

7731 
m_ÀgacyRï‹ãr
->
EndTe°ög
–
ã°RunSèts
.
tŸÆs
 );

7733 
	gLegacyRï‹ãrAd≠ãr
::
skùTe°
–
Te°Ca£Info
 const& ) {

7739 #ifde‡
__˛™g__


7740 #¥agm®
˛™g
 
dügno°ic
 
push


7741 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wc++11-long-long"

7744 #ifde‡
CATCH_PLATFORM_WINDOWS


7745 
	~<wödows.h
>

7747 
	~<sys/time.h
>

7750 
«me•a˚
 
C©ch
 {

7752 
«me•a˚
 {

7753 #ifde‡
CATCH_PLATFORM_WINDOWS


7754 
uöt64_t
 
gëCuºítTicks
() {

7755 
uöt64_t
 
hz
=0, 
	ghzo
=0;

7756 i‡(!
	ghz
) {

7757 
QuîyPîf‹m™˚Fªquícy
–
ªöãΩªt_ˇ°
<
LARGE_INTEGER
*>–&
hz
 ) );

7758 
QuîyPîf‹m™˚Cou¡î
–
ªöãΩªt_ˇ°
<
LARGE_INTEGER
*>–&
hzo
 ) );

7760 
uöt64_t
 
	gt
;

7761 
QuîyPîf‹m™˚Cou¡î
–
ªöãΩªt_ˇ°
<
LARGE_INTEGER
*>–&
t
 ) );

7762  ((
	gt
-
	ghzo
)*1000000)/
	ghz
;

7765 
uöt64_t
 
gëCuºítTicks
() {

7766 
timevÆ
 
	gt
;

7767 
gëtimeofday
(&
t
,
CATCH_NULL
);

7768  
	g°©ic_ˇ°
<
	guöt64_t
>–
	gt
.
	gtv_£c
 ) * 1000000uŒ + sètic_ˇ°<uöt64_t>–t.
	gtv_u£c
 );

7773 
	gTimî
::
°¨t
() {

7774 
m_ticks
 = 
gëCuºítTicks
();

7776 
	gTimî
::
gëEœp£dMi¸o£c⁄ds
() const {

7777  
°©ic_ˇ°
<>(
gëCuºítTicks
(Ë- 
m_ticks
);

7779 
	gTimî
::
gëEœp£dMûli£c⁄ds
() const {

7780  
°©ic_ˇ°
<>(
gëEœp£dMi¸o£c⁄ds
()/1000);

7782 
	gTimî
::
gëEœp£dSec⁄ds
() const {

7783  
gëEœp£dMi¸o£c⁄ds
()/1000000.0;

7788 #ifde‡
__˛™g__


7789 #¥agm®
˛™g
 
dügno°ic
 
p›


7792 
	#TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED


	)

7794 
«me•a˚
 
	gC©ch
 {

7796 
boﬁ
 
°¨tsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
¥efix
 ) {

7797  
s
.
size
(Ë>
¥efix
.size(Ë&& s.
sub°r
( 0,Örefix.size() ) ==Örefix;

7799 
boﬁ
 
ídsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
suffix
 ) {

7800  
s
.
size
(Ë>
suffix
.size(Ë&& s.
sub°r
( s.size()-suffix.size(), suffix.size() ) == suffix;

7802 
boﬁ
 
c⁄èös
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
öfix
 ) {

7803  
s
.
föd
–
öfix
 ) !
°d
::
°rög
::
≈os
;

7805 
toLowîInPœ˚
–
°d
::
°rög
& 
s
 ) {

7806 
°d
::
å™sf‹m
–
s
.
begö
(), s.
íd
(), s.begö(), ::
tﬁowî
 );

7808 
	g°d
::
°rög
 
toLowî
–
°d
::°rög c⁄°& 
s
 ) {

7809 
°d
::
°rög
 
lc
 = 
s
;

7810 
toLowîInPœ˚
–
lc
 );

7811  
	glc
;

7813 
	g°d
::
°rög
 
åim
–
°d
::°rög c⁄°& 
°r
 ) {

7814 c⁄°* 
whôe•a˚Ch¨s
 = "\n\r\t ";

7815 
	g°d
::
°rög
::
size_ty≥
 
°¨t
 = 
°r
.
föd_fú°_nŸ_of
–
whôe•a˚Ch¨s
 );

7816 
	g°d
::
°rög
::
size_ty≥
 
íd
 = 
°r
.
föd_œ°_nŸ_of
–
whôe•a˚Ch¨s
 );

7818  
	g°¨t
 !
°d
::
°rög
::
≈os
 ? 
°r
.
sub°r
–
°¨t
, 1+
íd
-start ) : "";

7821 
boﬁ
 
ª∂a˚InPœ˚
–
°d
::
°rög
& 
°r
, std::°rög c⁄°& 
ª∂a˚This
, std::°rög c⁄°& 
wôhThis
 ) {

7822 
boﬁ
 
ª∂a˚d
 = 
Ál£
;

7823 
	g°d
::
size_t
 
i
 = 
°r
.
föd
–
ª∂a˚This
 );

7824  
	gi
 !
°d
::
°rög
::
≈os
 ) {

7825 
ª∂a˚d
 = 
åue
;

7826 
	g°r
 = 
°r
.
sub°r
–0, 
i
 ) + 
	gwôhThis
 + så.sub°r–i+
ª∂a˚This
.
size
() );

7827 if–
	gi
 < 
	g°r
.
size
()-
	gwôhThis
.size() )

7828 
	gi
 = 
°r
.
föd
–
ª∂a˚This
, 
i
+
wôhThis
.
size
() );

7830 
	gi
 = 
°d
::
°rög
::
≈os
;

7832  
	gª∂a˚d
;

7835 
	g∂uøli£
::
∂uøli£
–
°d
::
size_t
 
cou¡
, std::
°rög
 c⁄°& 
œbñ
 )

7836 : 
m_cou¡
–
cou¡
 ),

7837 
m_œbñ
–
œbñ
 )

7840 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
∂uøli£
 c⁄°& 
	g∂uøli£r
 ) {

7841 
	gos
 << 
	g∂uøli£r
.
	gm_cou¡
 << " " <<Öluøli£r.
	gm_œbñ
;

7842 if–
	g∂uøli£r
.
	gm_cou¡
 != 1 )

7843 
os
 << "s";

7844  
	gos
;

7847 
	gSour˚LöeInfo
::
Sour˚LöeInfo
(Ë: 
löe
( 0 ){}

7848 
Sour˚LöeInfo
::Sour˚LöeInfo–c⁄°* 
_fûe
, 
°d
::
size_t
 
_löe
 )

7849 : 
fûe
–
_fûe
 ),

7850 
löe
–
_löe
 )

7852 
	gSour˚LöeInfo
::
Sour˚LöeInfo
–Sour˚LöeInfÿc⁄°& 
Ÿhî
 )

7853 : 
fûe
–
Ÿhî
.file ),

7854 
löe
–
Ÿhî
.line )

7856 
boﬁ
 
	gSour˚LöeInfo
::
em±y
() const {

7857  
fûe
.
em±y
();

7859 
boﬁ
 
	gSour˚LöeInfo
::
›î©‹
 =–
Sour˚LöeInfo
 c⁄°& 
Ÿhî
 ) const {

7860  
löe
 =
Ÿhî
.löê&& 
fûe
 == other.file;

7862 
boﬁ
 
	gSour˚LöeInfo
::
›î©‹
 < ( 
Sour˚LöeInfo
 c⁄°& 
Ÿhî
 ) const {

7863  
löe
 < 
Ÿhî
.löê|| (Üöê=Ÿhî.löê&& 
fûe
 < other.file );

7866 
£edRng
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

7867 if–
	gc⁄fig
.
∫gSìd
() != 0 )

7868 
°d
::
§™d
–
c⁄fig
.
∫gSìd
() );

7870 
∫gSìd
() {

7871  
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
∫gSìd
();

7874 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Sour˚LöeInfo
 c⁄°& 
	göfo
 ) {

7875 #i‚de‡
__GNUG__


7876 
	gos
 << 
	göfo
.
	gfûe
 << "(" << info.
	glöe
 << ")";

7878 
	gos
 << 
	göfo
.
	gfûe
 << ":" << info.
	glöe
;

7880  
	gos
;

7883 
throwLogicEº‹
–
°d
::
°rög
 c⁄°& 
mesßge
, 
Sour˚LöeInfo
 c⁄°& 
loˇti⁄Info
 ) {

7884 
	g°d
::
o°rög°ªam
 
oss
;

7885 
	goss
 << 
	gloˇti⁄Info
 << ": I¡î«»C©chÉº‹: '" << 
	gmesßge
 << "'";

7886 if–
ÆwaysTrue
() )

7887 
throw
 
	g°d
::
logic_îr‹
–
oss
.
°r
() );

7892 
	#TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED


	)

7894 
«me•a˚
 
	gC©ch
 {

7896 
	gSe˘i⁄Info
::
Se˘i⁄Info


7897 –
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

7898 
	g°d
::
°rög
 c⁄°& 
_«me
,

7899 
	g°d
::
°rög
 c⁄°& 
_des¸ùti⁄
 )

7900 : 
«me
–
_«me
 ),

7901 
des¸ùti⁄
–
_des¸ùti⁄
 ),

7902 
löeInfo
–
_löeInfo
 )

7905 
	gSe˘i⁄
::
Se˘i⁄
–
Se˘i⁄Info
 c⁄°& 
öfo
 )

7906 : 
m_öfo
–
öfo
 ),

7907 
m_£˘i⁄In˛uded
–
gëResu…C≠tuª
().
£˘i⁄Sèπed
–
m_öfo
, 
m_as£πi⁄s
 ) )

7909 
	gm_timî
.
°¨t
();

7912 
	gSe˘i⁄
::~
Se˘i⁄
() {

7913 if–
m_£˘i⁄In˛uded
 ) {

7914 
Se˘i⁄EndInfo
 
ídInfo
–
m_öfo
, 
m_as£πi⁄s
, 
m_timî
.
gëEœp£dSec⁄ds
() );

7915 if–
	g°d
::
unˇught_ex˚±i⁄
() )

7916 
gëResu…C≠tuª
().
£˘i⁄EndedE¨ly
–
ídInfo
 );

7918 
gëResu…C≠tuª
().
£˘i⁄Ended
–
ídInfo
 );

7923 
	gSe˘i⁄
::
›î©‹
 
boﬁ
() const {

7924  
m_£˘i⁄In˛uded
;

7930 
	#TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED


	)

7932 
	~<io°ªam
>

7934 #ifde‡
CATCH_PLATFORM_MAC


7936 
	~<as£π.h
>

7937 
	~<°dboﬁ.h
>

7938 
	~<sys/ty≥s.h
>

7939 
	~<uni°d.h
>

7940 
	~<sys/sys˘l.h
>

7942 
«me•a˚
 
	gC©ch
{

7949 
boﬁ
 
isDebuggîA˘ive
(){

7951 
	gmib
[4];

7952 
köfo_¥oc
 
	göfo
;

7953 
size_t
 
	gsize
;

7958 
	göfo
.
	gkp_¥oc
.
	gp_Êag
 = 0;

7963 
	gmib
[0] = 
CTL_KERN
;

7964 
	gmib
[1] = 
KERN_PROC
;

7965 
	gmib
[2] = 
KERN_PROC_PID
;

7966 
	gmib
[3] = 
gëpid
();

7970 
	gsize
 = (
öfo
);

7971 if–
sys˘l
(
mib
, (mibË/ (*mib), &
öfo
, &
size
, 
CATCH_NULL
, 0) != 0 ) {

7972 
C©ch
::
˚º
(Ë<< "\n** CÆ»tÿsys˘»Áûed - u«bÀÅÿdëîmöêi‡debuggî i†a˘ivê**\n" << 
°d
::
ídl
;

7973  
	gÁl£
;

7978  ( (
	göfo
.
	gkp_¥oc
.
	gp_Êag
 & 
	gP_TRACED
) != 0 );

7982 #ñi‡
	$deföed
(
_MSC_VER
)

7983 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`IsDebuggîPª£¡
();

7984 
«me•a˚
 
C©ch
 {

7985 
boﬁ
 
	`isDebuggîA˘ive
() {

7986  
	`IsDebuggîPª£¡
() != 0;

7988 
	}
}

7989 #ñi‡
	$deföed
(
__MINGW32__
)

7990 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`IsDebuggîPª£¡
();

7991 
«me•a˚
 
C©ch
 {

7992 
boﬁ
 
	`isDebuggîA˘ive
() {

7993  
	`IsDebuggîPª£¡
() != 0;

7995 
	}
}

7997 
«me•a˚
 
	gC©ch
 {

7998 
ölöe
 
boﬁ
 
isDebuggîA˘ive
(Ë{  
	gÁl£
; }

8002 #ifde‡
CATCH_PLATFORM_WINDOWS


8003 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`OuçutDebugSåögA
( const * );

8004 
«me•a˚
 
C©ch
 {

8005 
	`wrôeToDebugC⁄sﬁe
–
°d
::
°rög
 c⁄°& 
ãxt
 ) {

8006 ::
	`OuçutDebugSåögA
–
ãxt
.
	`c_°r
() );

8008 
	}
}

8010 
«me•a˚
 
	gC©ch
 {

8011 
wrôeToDebugC⁄sﬁe
–
°d
::
°rög
 c⁄°& 
ãxt
 ) {

8013 
C©ch
::
cout
(Ë<< 
ãxt
;

8019 
	#TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED


	)

8021 
«me•a˚
 
	gC©ch
 {

8023 
«me•a˚
 
	gDëaû
 {

8025 c⁄° 
	g°d
::
°rög
 
u≈röèbÀSåög
 = "{?}";

8027 
	g«me•a˚
 {

8028 c⁄° 
	ghexThªshﬁd
 = 255;

8030 
	sEndü¬ess
 {

8031 
	eArch
 { 
	gBig
, 
	gLôée
 };

8033 
Arch
 
which
() {

8034 
	u_
{

8035 
	gasI¡
;

8036 
	gasCh¨
[ ()];

8037 } 
	gu
;

8039 
	gu
.
	gasI¡
 = 1;

8040  ( 
	gu
.
	gasCh¨
[()-1] =1 ) ? 
Big
 : 
Lôée
;

8045 
	g°d
::
°rög
 
øwMem‹yToSåög
–c⁄° *
obje˘
, 
°d
::
size_t
 
size
 )

8048 
i
 = 0, 
	gíd
 = 
°©ic_ˇ°
<>–
size
 ), 
	göc
 = 1;

8049 if–
	gEndü¬ess
::
which
(Ë=
Endü¬ess
::
Lôée
 ) {

8050 
i
 = 
íd
-1;

8051 
	gíd
 = 
öc
 = -1;

8054 c⁄° *
	gbyãs
 = 
°©ic_ˇ°
<c⁄° *>(
obje˘
);

8055 
	g°d
::
o°rög°ªam
 
os
;

8056 
	gos
 << "0x" << 
	g°d
::
£tfûl
('0'Ë<< 
°d
::
hex
;

8057  ; 
	gi
 !
íd
; i +
öc
 )

8058 
os
 << 
°d
::
£tw
(2Ë<< 
°©ic_ˇ°
<>(
byãs
[
i
]);

8059  
	gos
.
°r
();

8063 
	g°d
::
°rög
 
toSåög
–
°d
::°rög c⁄°& 
vÆue
 ) {

8064 
°d
::
°rög
 
s
 = 
vÆue
;

8065 if–
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
showInvisibÀs
() ) {

8066 
size_t
 
	gi
 = 0; i < 
	gs
.
size
(); ++i ) {

8067 
	g°d
::
°rög
 
subs
;

8068  
	gs
[
i
] ) {

8069 '\n': 
subs
 = "\\n"; ;

8070 '\t': 
subs
 = "\\t"; ;

8073 if–!
	gsubs
.
em±y
() ) {

8074 
	gs
 = 
s
.
sub°r
–0, 
i
 ) + 
	gsubs
 + s.substr( i+1 );

8075 ++
	gi
;

8079  "\"" + 
	gs
 + "\"";

8081 
	g°d
::
°rög
 
toSåög
–
°d
::
w°rög
 c⁄°& 
vÆue
 ) {

8083 
°d
::
°rög
 
s
;

8084 
	gs
.
ª£rve
–
vÆue
.
size
() );

8085 
size_t
 
	gi
 = 0; i < 
	gvÆue
.
size
(); ++i )

8086 
	gs
 +
vÆue
[
i
] <0xf‡? 
°©ic_ˇ°
<>( value[i] ) : '?';

8087  
	gC©ch
::
toSåög
–
s
 );

8090 
	g°d
::
°rög
 
toSåög
–c⁄° * c⁄° 
vÆue
 ) {

8091  
vÆue
 ? 
C©ch
::
toSåög
–
°d
::
°rög
( value ) ) : std::string( "{null string}" );

8094 
	g°d
::
°rög
 
toSåög
–* c⁄° 
vÆue
 ) {

8095  
C©ch
::
toSåög
–
°©ic_ˇ°
<c⁄° *>–
vÆue
 ) );

8098 
	g°d
::
°rög
 
toSåög
–c⁄° 
wch¨_t
* c⁄° 
vÆue
 )

8100  
vÆue
 ? 
C©ch
::
toSåög
–
°d
::
w°rög
(vÆueËË: std::
°rög
( "{null string}" );

8103 
	g°d
::
°rög
 
toSåög
–
wch¨_t
* c⁄° 
vÆue
 )

8105  
C©ch
::
toSåög
–
°©ic_ˇ°
<c⁄° 
wch¨_t
*>–
vÆue
 ) );

8108 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8109 
°d
::
o°rög°ªam
 
oss
;

8110 
	goss
 << 
	gvÆue
;

8111 if–
	gvÆue
 > 
	gDëaû
::
hexThªshﬁd
 )

8112 
oss
 << " (0x" << 
°d
::
hex
 << 
vÆue
 << ")";

8113  
	goss
.
°r
();

8116 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8117 
°d
::
o°rög°ªam
 
oss
;

8118 
	goss
 << 
	gvÆue
;

8119 if–
	gvÆue
 > 
	gDëaû
::
hexThªshﬁd
 )

8120 
oss
 << " (0x" << 
°d
::
hex
 << 
vÆue
 << ")";

8121  
	goss
.
°r
();

8124 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8125  
C©ch
::
toSåög
–
°©ic_ˇ°
<>–
vÆue
 ) );

8128 
	gãm∂©e
<
ty≥«me
 
	gT
>

8129 
	g°d
::
°rög
 
ÂToSåög
–
T
 
vÆue
, 
¥ecisi⁄
 ) {

8130 
	g°d
::
o°rög°ªam
 
oss
;

8131 
	goss
 << 
	g°d
::
£çªcisi⁄
–
¥ecisi⁄
 )

8132 << 
°d
::
fixed


8133 << 
vÆue
;

8134 
	g°d
::
°rög
 
d
 = 
oss
.
°r
();

8135 
	g°d
::
size_t
 
i
 = 
d
.
föd_œ°_nŸ_of
( '0' );

8136 if–
	gi
 !
°d
::
°rög
::
≈os
 && 
i
 !
d
.
size
()-1 ) {

8137 if–
d
[
i
] == '.' )

8138 
i
++;

8139 
	gd
 = 
d
.
sub°r
–0, 
i
+1 );

8141  
	gd
;

8144 
	g°d
::
°rög
 
toSåög
–c⁄° 
vÆue
 ) {

8145  
ÂToSåög
–
vÆue
, 10 );

8147 
	g°d
::
°rög
 
toSåög
–c⁄° 
vÆue
 ) {

8148  
ÂToSåög
–
vÆue
, 5 ) + "f";

8151 
	g°d
::
°rög
 
toSåög
–
boﬁ
 
vÆue
 ) {

8152  
vÆue
 ? "true" : "false";

8155 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8156  
vÆue
 < ' '

8157 ? 
toSåög
–
°©ic_ˇ°
<>–
vÆue
 ) )

8158 : 
Dëaû
::
makeSåög
–
vÆue
 );

8161 
	g°d
::
°rög
 
toSåög
–sig√d 
vÆue
 ) {

8162  
toSåög
–
°©ic_ˇ°
<>–
vÆue
 ) );

8165 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8166  
toSåög
–
°©ic_ˇ°
<>–
vÆue
 ) );

8169 #ifde‡
CATCH_CONFIG_CPP11_LONG_LONG


8170 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8171 
°d
::
o°rög°ªam
 
oss
;

8172 
	goss
 << 
	gvÆue
;

8173 if–
	gvÆue
 > 
	gDëaû
::
hexThªshﬁd
 )

8174 
oss
 << " (0x" << 
°d
::
hex
 << 
vÆue
 << ")";

8175  
	goss
.
°r
();

8177 
	g°d
::
°rög
 
toSåög
–
vÆue
 ) {

8178 
°d
::
o°rög°ªam
 
oss
;

8179 
	goss
 << 
	gvÆue
;

8180 if–
	gvÆue
 > 
	gDëaû
::
hexThªshﬁd
 )

8181 
oss
 << " (0x" << 
°d
::
hex
 << 
vÆue
 << ")";

8182  
	goss
.
°r
();

8186 #ifde‡
CATCH_CONFIG_CPP11_NULLPTR


8187 
	g°d
::
°rög
 
toSåög
–
°d
::
nuŒ±r_t
 ) {

8192 #ifde‡
__OBJC__


8193 
	g°d
::
°rög
 
toSåög
–
NSSåög
 c⁄° * c⁄°& 
ns°rög
 ) {

8194 if–!
ns°rög
 )

8196  "@" + 
toSåög
([
ns°rög
 
UTF8Såög
]);

8198 
	g°d
::
°rög
 
toSåög
–
NSSåög
 * 
CATCH_ARC_STRONG
 c⁄°& 
ns°rög
 ) {

8199 if–!
ns°rög
 )

8201  "@" + 
toSåög
([
ns°rög
 
UTF8Såög
]);

8203 
	g°d
::
°rög
 
toSåög
–
NSObje˘
* c⁄°& 
nsObje˘
 ) {

8204  
toSåög
–[
nsObje˘
 
des¸ùti⁄
] );

8211 
	#TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED


	)

8213 
«me•a˚
 
	gC©ch
 {

8215 
	g°d
::
°rög
 
ˇ±uªdEx¥essi⁄WôhSec⁄dArgumít
–
°d
::°rög c⁄°& 
ˇ±uªdEx¥essi⁄
, std::°rög c⁄°& 
£c⁄dArg
 ) {

8216  
£c⁄dArg
.
em±y
() || secondArg == "\"\""

8217 ? 
ˇ±uªdEx¥essi⁄


8218 : 
ˇ±uªdEx¥essi⁄
 + ", " + 
£c⁄dArg
;

8220 
	gResu…Buûdî
::
Resu…Buûdî
–c⁄°* 
ma¸oName
,

8221 
Sour˚LöeInfo
 c⁄°& 
löeInfo
,

8222 c⁄°* 
ˇ±uªdEx¥essi⁄
,

8223 
Resu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
,

8224 c⁄°* 
£c⁄dArg
 )

8225 : 
m_as£πi⁄Info
–
ma¸oName
, 
löeInfo
, 
ˇ±uªdEx¥essi⁄WôhSec⁄dArgumít
–
ˇ±uªdEx¥essi⁄
, 
£c⁄dArg
 ), 
ªsu…Di•osôi⁄
 ),

8226 
m_shouldDebugBªak
–
Ál£
 ),

8227 
m_shouldThrow
–
Ál£
 )

8230 
	gResu…Buûdî
& Resu…Buûdî::
£tResu…Ty≥
–
Resu…Was
::
OfTy≥
 
ªsu…
 ) {

8231 
m_d©a
.
ªsu…Ty≥
 = 
ªsu…
;

8232  *
	gthis
;

8234 
	gResu…Buûdî
& Resu…Buûdî::
£tResu…Ty≥
–
boﬁ
 
ªsu…
 ) {

8235 
m_d©a
.
ªsu…Ty≥
 = 
ªsu…
 ? 
Resu…Was
::
Ok
 : Resu…Was::
Ex¥essi⁄Faûed
;

8236  *
	gthis
;

8238 
	gResu…Buûdî
& Resu…Buûdî::
£tLhs
–
°d
::
°rög
 c⁄°& 
lhs
 ) {

8239 
m_ex¥Comp⁄íts
.
lhs
 =Ühs;

8240  *
	gthis
;

8242 
	gResu…Buûdî
& Resu…Buûdî::
£tRhs
–
°d
::
°rög
 c⁄°& 
rhs
 ) {

8243 
m_ex¥Comp⁄íts
.
rhs
 =Ñhs;

8244  *
	gthis
;

8246 
	gResu…Buûdî
& Resu…Buûdî::
£tOp
–
°d
::
°rög
 c⁄°& 
›
 ) {

8247 
m_ex¥Comp⁄íts
.
›
 = op;

8248  *
	gthis
;

8251 
	gResu…Buûdî
::
ídEx¥essi⁄
() {

8252 
m_ex¥Comp⁄íts
.
ã°FÆ£
 = 
isFÆ£Te°
–
m_as£πi⁄Info
.
ªsu…Di•osôi⁄
 );

8253 
ˇ±uªEx¥essi⁄
();

8256 
	gResu…Buûdî
::
u£A˘iveEx˚±i⁄
–
Resu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
 ) {

8257 
m_as£πi⁄Info
.
ªsu…Di•osôi⁄
 =ÑesultDisposition;

8258 
	gm_°ªam
.
	goss
 << 
	gC©ch
::
å™¶©eA˘iveEx˚±i⁄
();

8259 
ˇ±uªResu…
–
Resu…Was
::
ThªwEx˚±i⁄
 );

8262 
	gResu…Buûdî
::
ˇ±uªResu…
–
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
 ) {

8263 
£tResu…Ty≥
–
ªsu…Ty≥
 );

8264 
ˇ±uªEx¥essi⁄
();

8266 
	gResu…Buûdî
::
ˇ±uªEx≥˘edEx˚±i⁄
–
°d
::
°rög
 c⁄°& 
ex≥˘edMesßge
 ) {

8267 if–
ex≥˘edMesßge
.
em±y
() )

8268 
ˇ±uªEx≥˘edEx˚±i⁄
–
M©chîs
::
Im∂
::
Gíîic
::
AŒOf
<
°d
::
°rög
>() );

8270 
ˇ±uªEx≥˘edEx˚±i⁄
–
M©chîs
::
EquÆs
–
ex≥˘edMesßge
 ) );

8273 
	gResu…Buûdî
::
ˇ±uªEx≥˘edEx˚±i⁄
–
M©chîs
::
Im∂
::
M©chî
<
°d
::
°rög
> c⁄°& 
m©chî
 ) {

8275 
as£π
–
m_ex¥Comp⁄íts
.
ã°FÆ£
 =
Ál£
 );

8276 
As£πi⁄Resu…D©a
 
	gd©a
 = 
m_d©a
;

8277 
	gd©a
.
	gªsu…Ty≥
 = 
Resu…Was
::
Ok
;

8278 
	gd©a
.
	gªc⁄°ru˘edEx¥essi⁄
 = 
m_as£πi⁄Info
.
ˇ±uªdEx¥essi⁄
;

8280 
	g°d
::
°rög
 
a˘uÆMesßge
 = 
C©ch
::
å™¶©eA˘iveEx˚±i⁄
();

8281 if–!
	gm©chî
.
m©ch
–
a˘uÆMesßge
 ) ) {

8282 
	gd©a
.
	gªsu…Ty≥
 = 
Resu…Was
::
Ex¥essi⁄Faûed
;

8283 
	gd©a
.
	gªc⁄°ru˘edEx¥essi⁄
 = 
a˘uÆMesßge
;

8285 
As£πi⁄Resu…
 
ªsu…
–
m_as£πi⁄Info
, 
d©a
 );

8286 
h™dÀResu…
–
ªsu…
 );

8289 
	gResu…Buûdî
::
ˇ±uªEx¥essi⁄
() {

8290 
As£πi⁄Resu…
 
ªsu…
 = 
buûd
();

8291 
h™dÀResu…
–
ªsu…
 );

8293 
	gResu…Buûdî
::
h™dÀResu…
–
As£πi⁄Resu…
 c⁄°& 
ªsu…
 )

8295 
gëResu…C≠tuª
().
as£πi⁄Ended
–
ªsu…
 );

8297 if–!
	gªsu…
.
isOk
() ) {

8298 if–
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
shouldDebugBªak
() )

8299 
	gm_shouldDebugBªak
 = 
åue
;

8300 if–
gëCuºítC⁄ãxt
().
gëRu¬î
()->
ab‹tög
(Ë|| (
	gm_as£πi⁄Info
.
	gªsu…Di•osôi⁄
 & 
	gResu…Di•osôi⁄
::
N‹mÆ
) )

8301 
m_shouldThrow
 = 
åue
;

8304 
	gResu…Buûdî
::
ªa˘
() {

8305 if–
m_shouldThrow
 )

8306 
throw
 
C©ch
::
Te°FaûuªEx˚±i⁄
();

8309 
boﬁ
 
	gResu…Buûdî
::
shouldDebugBªak
(Ëc⁄° {  
m_shouldDebugBªak
; }

8310 
boﬁ
 
	gResu…Buûdî
::
ÆlowThrows
(Ëc⁄° {  
gëCuºítC⁄ãxt
().
gëC⁄fig
()->allowThrows(); }

8312 
As£πi⁄Resu…
 
	gResu…Buûdî
::
buûd
() const

8314 
as£π
–
m_d©a
.
ªsu…Ty≥
 !
Resu…Was
::
Unknown
 );

8316 
As£πi⁄Resu…D©a
 
	gd©a
 = 
m_d©a
;

8319 if–
	gm_ex¥Comp⁄íts
.
	gã°FÆ£
 ) {

8320 if–
	gd©a
.
	gªsu…Ty≥
 =
Resu…Was
::
Ok
 )

8321 
d©a
.
ªsu…Ty≥
 = 
Resu…Was
::
Ex¥essi⁄Faûed
;

8322 if–
	gd©a
.
	gªsu…Ty≥
 =
Resu…Was
::
Ex¥essi⁄Faûed
 )

8323 
d©a
.
ªsu…Ty≥
 = 
Resu…Was
::
Ok
;

8326 
	gd©a
.
	gmesßge
 = 
m_°ªam
.
oss
.
°r
();

8327 
	gd©a
.
	gªc⁄°ru˘edEx¥essi⁄
 = 
ªc⁄°ru˘Ex¥essi⁄
();

8328 if–
	gm_ex¥Comp⁄íts
.
	gã°FÆ£
 ) {

8329 if–
	gm_ex¥Comp⁄íts
.
	g›
 == "" )

8330 
d©a
.
ªc⁄°ru˘edEx¥essi⁄
 = "!" + data.reconstructedExpression;

8332 
	gd©a
.
	gªc⁄°ru˘edEx¥essi⁄
 = "!(" + 
d©a
.
ªc⁄°ru˘edEx¥essi⁄
 + ")";

8334  
As£πi⁄Resu…
–
m_as£πi⁄Info
, 
d©a
 );

8336 
	g°d
::
°rög
 
Resu…Buûdî
::
ªc⁄°ru˘Ex¥essi⁄
() const {

8337 if–
m_ex¥Comp⁄íts
.
›
 == "" )

8338  
m_ex¥Comp⁄íts
.
lhs
.
em±y
(Ë? 
m_as£πi⁄Info
.
ˇ±uªdEx¥essi⁄
 : m_ex¥Comp⁄íts.
›
 + m_exprComponents.lhs;

8339 if–
	gm_ex¥Comp⁄íts
.
	g›
 == "matches" )

8340  
m_ex¥Comp⁄íts
.
lhs
 + " " + m_ex¥Comp⁄íts.
rhs
;

8341 if–
	gm_ex¥Comp⁄íts
.
	g›
 != "!" ) {

8342 if–
m_ex¥Comp⁄íts
.
lhs
.
size
(Ë+ m_ex¥Comp⁄íts.
rhs
.size() < 40 &&

8343 
m_ex¥Comp⁄íts
.
lhs
.
föd
("\n"Ë=
°d
::
°rög
::
≈os
 &&

8344 
m_ex¥Comp⁄íts
.
rhs
.
föd
("\n"Ë=
°d
::
°rög
::
≈os
 )

8345  
m_ex¥Comp⁄íts
.
lhs
 + " " + m_ex¥Comp⁄íts.
›
 + " " + m_ex¥Comp⁄íts.
rhs
;

8347  
	gm_ex¥Comp⁄íts
.
	glhs
 + "\n" + m_ex¥Comp⁄íts.
	g›
 + "\n" + m_ex¥Comp⁄íts.
	grhs
;

8350  "{ˇn'àex∑nd - u£ " + 
	gm_as£πi⁄Info
.
	gma¸oName
 + "_FALSE–" + m_as£πi⁄Info.
	gˇ±uªdEx¥essi⁄
.
sub°r
(1) + " ) instead of " + m_assertionInfo.macroName + "( " + m_assertionInfo.capturedExpression + " ) for better diagnostics}";

8356 
	#TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED


	)

8359 
	#TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED


	)

8361 
	~<m≠
>

8363 
«me•a˚
 
	gC©ch
 {

8365 ˛as†
	cTagAlüsRegi°ry
 : 
public
 
ITagAlüsRegi°ry
 {

8366 
public
:

8367 
vútuÆ
 ~
TagAlüsRegi°ry
();

8368 
vútuÆ
 
	gO±i⁄
<
	gTagAlüs
> 
föd
–
°d
::
°rög
 c⁄°& 
Æüs
 ) const;

8369 
vútuÆ
 
	g°d
::
°rög
 
ex∑ndAlü£s
–
°d
::°rög c⁄°& 
u√x∑ndedTe°S≥c
 ) const;

8370 
add
–c⁄°* 
Æüs
, c⁄°* 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

8371 
	gTagAlüsRegi°ry
& 
gë
();

8373 
	g¥iv©e
:

8374 
°d
::
m≠
<°d::
°rög
, 
	gTagAlüs
> 
	gm_ªgi°ry
;

8379 
	~<m≠
>

8380 
	~<io°ªam
>

8382 
«me•a˚
 
	gC©ch
 {

8384 
	gTagAlüsRegi°ry
::~
TagAlüsRegi°ry
() {}

8386 
O±i⁄
<
TagAlüs
> 
TagAlüsRegi°ry
::
föd
–
°d
::
°rög
 c⁄°& 
Æüs
 ) const {

8387 
°d
::
m≠
<°d::
°rög
, 
	gTagAlüs
>::
c⁄°_ôî©‹
 
ô
 = 
m_ªgi°ry
.
föd
–
Æüs
 );

8388 if–
	gô
 !
m_ªgi°ry
.
íd
() )

8389  
ô
->
£c⁄d
;

8391  
	gO±i⁄
<
	gTagAlüs
>();

8394 
	g°d
::
°rög
 
TagAlüsRegi°ry
::
ex∑ndAlü£s
–
°d
::°rög c⁄°& 
u√x∑ndedTe°S≥c
 ) const {

8395 
°d
::
°rög
 
ex∑ndedTe°S≥c
 = 
u√x∑ndedTe°S≥c
;

8396  
	g°d
::
m≠
<
°d
::
°rög
, 
	gTagAlüs
>::
c⁄°_ôî©‹
 
ô
 = 
m_ªgi°ry
.
begö
(), 
	gôEnd
 = m_ªgi°ry.
íd
();

8397 
	gô
 !
ôEnd
;

8398 ++
	gô
 ) {

8399 
	g°d
::
size_t
 
pos
 = 
ex∑ndedTe°S≥c
.
föd
–
ô
->
fú°
 );

8400 if–
	gpos
 !
°d
::
°rög
::
≈os
 ) {

8401 
ex∑ndedTe°S≥c
 =Éx∑ndedTe°S≥c.
sub°r
–0, 
pos
 ) +

8402 
	gô
->
	g£c⁄d
.
	gèg
 +

8403 
	gex∑ndedTe°S≥c
.
sub°r
–
pos
 + 
ô
->
fú°
.
size
() );

8406  
	gex∑ndedTe°S≥c
;

8409 
	gTagAlüsRegi°ry
::
add
–c⁄°* 
Æüs
, c⁄°* 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 ) {

8411 if–!
°¨tsWôh
–
Æüs
, "[@" ) || !
ídsWôh
(álias, "]" ) ) {

8412 
	g°d
::
o°rög°ªam
 
oss
;

8413 
	goss
 << "îr‹:Åagálüs, \"" << 
	gÆüs
 << "\" i†nŸ o‡thêf‹m [@Æü†«me].\n" << 
	glöeInfo
;

8414 
throw
 
	g°d
::
domaö_îr‹
–
oss
.
°r
().
c_°r
() );

8416 if–!
	gm_ªgi°ry
.
ö£π
–
°d
::
make_∑ú
–
Æüs
, 
TagAlüs
–
èg
, 
löeInfo
 ) ) ).
	g£c⁄d
 ) {

8417 
	g°d
::
o°rög°ªam
 
oss
;

8418 
	goss
 << "îr‹:Åagálüs, \"" << 
	gÆüs
 << "\"álreadyÑegistered.\n"

8419 << "\tFú° sì¿© " << 
föd
(
Æüs
)->
	glöeInfo
 << "\n"

8420 << "\tRedeföedáà" << 
	glöeInfo
;

8421 
throw
 
	g°d
::
domaö_îr‹
–
oss
.
°r
().
c_°r
() );

8425 
	gTagAlüsRegi°ry
& TagAlüsRegi°ry::
gë
() {

8426 
TagAlüsRegi°ry
 
ö°™˚
;

8427  
	gö°™˚
;

8431 
	gITagAlüsRegi°ry
::~
ITagAlüsRegi°ry
() {}

8432 
ITagAlüsRegi°ry
 c⁄°& ITagAlüsRegi°ry::
gë
(Ë{  
TagAlüsRegi°ry
::get(); }

8434 
	gRegi°ørF‹TagAlü£s
::
Regi°ørF‹TagAlü£s
–c⁄°* 
Æüs
, c⁄°* 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 ) {

8435 
	gåy
 {

8436 
	gTagAlüsRegi°ry
::
gë
().
add
–
Æüs
, 
èg
, 
löeInfo
 );

8438 
ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

8439 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Red
 );

8440 
	gC©ch
::
˚º
(Ë<< 
ex
.
wh©
(Ë<< 
°d
::
ídl
;

8441 
exô
(1);

8448 
	#TWOBLUECUBES_CATCH_REPORTER_MULTI_HPP_INCLUDED


	)

8450 
«me•a˚
 
	gC©ch
 {

8452 
˛ass
 
	gMu…ùÀRï‹ãrs
 : 
public
 
Sh¨edIm∂
<
ISåómögRï‹ãr
> {

8453 
°d
::
	tve˘‹
<
	tPå
<
	tISåómögRï‹ãr
> > 
	tRï‹ãrs
;

8454 
Rï‹ãrs
 
	gm_ªp‹ãrs
;

8456 
	gpublic
:

8457 
add
–
På
<
ISåómögRï‹ãr
> c⁄°& 
ªp‹ãr
 ) {

8458 
m_ªp‹ãrs
.
push_back
–
ªp‹ãr
 );

8461 
	gpublic
:

8463 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
CATCH_OVERRIDE
 {

8464  
m_ªp‹ãrs
[0]->
gëPª„ªn˚s
();

8467 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) 
CATCH_OVERRIDE
 {

8468  
Rï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8469 
	gô
 !
ôEnd
;

8470 ++
	gô
 )

8471 (*
	gô
)->
noM©chögTe°Ca£s
–
•ec
 );

8474 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°RunInfo
 ) 
	gCATCH_OVERRIDE
 {

8475  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8476 
	gô
 !
ôEnd
;

8477 ++
	gô
 )

8478 (*
	gô
)->
ã°RunSèπög
–
ã°RunInfo
 );

8481 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) 
	gCATCH_OVERRIDE
 {

8482  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8483 
	gô
 !
ôEnd
;

8484 ++
	gô
 )

8485 (*
	gô
)->
ã°GroupSèπög
–
groupInfo
 );

8488 
vútuÆ
 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) 
	gCATCH_OVERRIDE
 {

8489  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8490 
	gô
 !
ôEnd
;

8491 ++
	gô
 )

8492 (*
	gô
)->
ã°Ca£Sèπög
–
ã°Info
 );

8495 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) 
	gCATCH_OVERRIDE
 {

8496  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8497 
	gô
 !
ôEnd
;

8498 ++
	gô
 )

8499 (*
	gô
)->
£˘i⁄Sèπög
–
£˘i⁄Info
 );

8502 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& 
as£πi⁄Info
 ) 
	gCATCH_OVERRIDE
 {

8503  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8504 
	gô
 !
ôEnd
;

8505 ++
	gô
 )

8506 (*
	gô
)->
as£πi⁄Sèπög
–
as£πi⁄Info
 );

8510 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

8511 
boﬁ
 
	g˛órBuf„r
 = 
Ál£
;

8512  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8513 
	gô
 !
ôEnd
;

8514 ++
	gô
 )

8515 
	g˛órBuf„r
 |(*
ô
)->
as£πi⁄Ended
–
as£πi⁄Sèts
 );

8516  
	g˛órBuf„r
;

8519 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

8520  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8521 
	gô
 !
ôEnd
;

8522 ++
	gô
 )

8523 (*
	gô
)->
£˘i⁄Ended
–
£˘i⁄Sèts
 );

8526 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) 
	gCATCH_OVERRIDE
 {

8527  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8528 
	gô
 !
ôEnd
;

8529 ++
	gô
 )

8530 (*
	gô
)->
ã°Ca£Ended
–
ã°Ca£Sèts
 );

8533 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) 
	gCATCH_OVERRIDE
 {

8534  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8535 
	gô
 !
ôEnd
;

8536 ++
	gô
 )

8537 (*
	gô
)->
ã°GroupEnded
–
ã°GroupSèts
 );

8540 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) 
	gCATCH_OVERRIDE
 {

8541  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8542 
	gô
 !
ôEnd
;

8543 ++
	gô
 )

8544 (*
	gô
)->
ã°RunEnded
–
ã°RunSèts
 );

8547 
vútuÆ
 
skùTe°
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) 
	gCATCH_OVERRIDE
 {

8548  
	gRï‹ãrs
::
c⁄°_ôî©‹
 
ô
 = 
m_ªp‹ãrs
.
begö
(), 
	gôEnd
 = m_ªp‹ãrs.
íd
();

8549 
	gô
 !
ôEnd
;

8550 ++
	gô
 )

8551 (*
	gô
)->
skùTe°
–
ã°Info
 );

8554 
vútuÆ
 
Mu…ùÀRï‹ãrs
* 
åyAsMu…i
(Ë
	gCATCH_OVERRIDE
 {

8555  
	gthis
;

8560 
	gPå
<
	gISåómögRï‹ãr
> 
addRï‹ãr
–
På
<
ISåómögRï‹ãr
> c⁄°& 
exi°ögRï‹ãr
, På<ISåómögRï‹ãr> c⁄°& 
addôi⁄ÆRï‹ãr
 ) {

8561 
	gPå
<
	gISåómögRï‹ãr
> 
	gªsu…ögRï‹ãr
;

8563 if–
	gexi°ögRï‹ãr
 ) {

8564 
Mu…ùÀRï‹ãrs
* 
	gmu…i
 = 
exi°ögRï‹ãr
->
åyAsMu…i
();

8565 if–!
	gmu…i
 ) {

8566 
	gmu…i
 = 
√w
 
Mu…ùÀRï‹ãrs
;

8567 
	gªsu…ögRï‹ãr
 = 
På
<
ISåómögRï‹ãr
>–
mu…i
 );

8568 if–
	gexi°ögRï‹ãr
 )

8569 
	gmu…i
->
add
–
exi°ögRï‹ãr
 );

8572 
	gªsu…ögRï‹ãr
 = 
exi°ögRï‹ãr
;

8573 
	gmu…i
->
add
–
addôi⁄ÆRï‹ãr
 );

8576 
	gªsu…ögRï‹ãr
 = 
addôi⁄ÆRï‹ãr
;

8578  
	gªsu…ögRï‹ãr
;

8584 
	#TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED


	)

8587 
	#TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED


	)

8589 
	~<c°rög
>

8591 
«me•a˚
 
	gC©ch
 {

8593 
	gSåómögRï‹ãrBa£
 : 
Sh¨edIm∂
<
ISåómögRï‹ãr
> {

8595 
SåómögRï‹ãrBa£
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

8596 : 
m_c⁄fig
–
_c⁄fig
.
fuŒC⁄fig
() ),

8597 
°ªam
–
_c⁄fig
.stream() )

8599 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
Ál£
;

8602 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

8603  
	gm_ªp‹ãrPªfs
;

8606 
	gvútuÆ
 ~
SåómögRï‹ãrBa£
(Ë
	gCATCH_OVERRIDE
;

8608 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& ) 
CATCH_OVERRIDE
 {}

8610 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
_ã°RunInfo
 ) 
CATCH_OVERRIDE
 {

8611 
cuºítTe°RunInfo
 = 
_ã°RunInfo
;

8613 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
_groupInfo
 ) 
	gCATCH_OVERRIDE
 {

8614 
	gcuºítGroupInfo
 = 
_groupInfo
;

8617 
vútuÆ
 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
_ã°Info
 ) 
	gCATCH_OVERRIDE
 {

8618 
	gcuºítTe°Ca£Info
 = 
_ã°Info
;

8620 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
 ) 
	gCATCH_OVERRIDE
 {

8621 
	gm_£˘i⁄Sèck
.
push_back
–
_£˘i⁄Info
 );

8624 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& ) 
	gCATCH_OVERRIDE
 {

8625 
	gm_£˘i⁄Sèck
.
p›_back
();

8627 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& ) 
	gCATCH_OVERRIDE
 {

8628 
	gcuºítTe°Ca£Info
.
ª£t
();

8630 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& ) 
	gCATCH_OVERRIDE
 {

8631 
	gcuºítGroupInfo
.
ª£t
();

8633 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& ) 
	gCATCH_OVERRIDE
 {

8634 
	gcuºítTe°Ca£Info
.
ª£t
();

8635 
	gcuºítGroupInfo
.
ª£t
();

8636 
	gcuºítTe°RunInfo
.
ª£t
();

8639 
vútuÆ
 
skùTe°
–
Te°Ca£Info
 c⁄°& ) 
	gCATCH_OVERRIDE
 {

8644 
	gPå
<
IC⁄fig
 c⁄°> 
	gm_c⁄fig
;

8645 
	g°d
::
o°ªam
& 
°ªam
;

8647 
	gLazySèt
<
	gTe°RunInfo
> 
	gcuºítTe°RunInfo
;

8648 
	gLazySèt
<
	gGroupInfo
> 
	gcuºítGroupInfo
;

8649 
	gLazySèt
<
	gTe°Ca£Info
> 
	gcuºítTe°Ca£Info
;

8651 
	g°d
::
ve˘‹
<
Se˘i⁄Info
> 
m_£˘i⁄Sèck
;

8652 
Rï‹ãrPª„ªn˚s
 
	gm_ªp‹ãrPªfs
;

8655 
	gCumuœtiveRï‹ãrBa£
 : 
Sh¨edIm∂
<
ISåómögRï‹ãr
> {

8656 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
	gChûdNodeT
>

8657 
	gNode
 : 
Sh¨edIm∂
<> {

8658 
ex∂icô
 
Node
–
T
 c⁄°& 
_vÆue
 ) : 
vÆue
( _value ) {}

8659 
vútuÆ
 ~
Node
() {}

8661 
°d
::
	tve˘‹
<
	tPå
<
	tChûdNodeT
> > 
	tChûdNodes
;

8662 
T
 
	gvÆue
;

8663 
ChûdNodes
 
	gchûdªn
;

8665 
	gSe˘i⁄Node
 : 
Sh¨edIm∂
<> {

8666 
ex∂icô
 
Se˘i⁄Node
–
Se˘i⁄Sèts
 c⁄°& 
_°©s
 ) : 
°©s
( _stats ) {}

8667 
vútuÆ
 ~
Se˘i⁄Node
();

8669 
boﬁ
 
	g›î©‹
 =–
Se˘i⁄Node
 c⁄°& 
Ÿhî
 ) const {

8670  
°©s
.
£˘i⁄Info
.
löeInfo
 =
Ÿhî
.stats.sectionInfo.lineInfo;

8672 
boﬁ
 
	g›î©‹
 =–
På
<
Se˘i⁄Node
> c⁄°& 
Ÿhî
 ) const {

8673  
›î©‹
==–*
Ÿhî
 );

8676 
Se˘i⁄Sèts
 
	g°©s
;

8677 
	g°d
::
	tve˘‹
<
	tPå
<
	tSe˘i⁄Node
> > 
	tChûdSe˘i⁄s
;

8678 
	g°d
::
	tve˘‹
<
	tAs£πi⁄Sèts
> 
	tAs£πi⁄s
;

8679 
ChûdSe˘i⁄s
 
	gchûdSe˘i⁄s
;

8680 
As£πi⁄s
 
	gas£πi⁄s
;

8681 
	g°d
::
°rög
 
°dOut
;

8682 
	g°d
::
°rög
 
°dEº
;

8685 
	sBySe˘i⁄Info
 {

8686 
BySe˘i⁄Info
–
Se˘i⁄Info
 c⁄°& 
Ÿhî
 ) : 
m_Ÿhî
( other ) {}

8687 
BySe˘i⁄Info
–BySe˘i⁄Infÿc⁄°& 
Ÿhî
 ) : 
m_Ÿhî
( other.m_other ) {}

8688 
boﬁ
 
›î©‹
(Ë–
På
<
Se˘i⁄Node
> c⁄°& 
node
 ) const {

8689  
node
->
°©s
.
£˘i⁄Info
.
löeInfo
 =
m_Ÿhî
.lineInfo;

8691 
	g¥iv©e
:

8692 
›î©‹
=–
BySe˘i⁄Info
 const& );

8693 
Se˘i⁄Info
 c⁄°& 
	gm_Ÿhî
;

8696 
	gNode
<
	tTe°Ca£Sèts
, 
	tSe˘i⁄Node
> 
	tTe°Ca£Node
;

8697 
	gNode
<
	tTe°GroupSèts
, 
	tTe°Ca£Node
> 
	tTe°GroupNode
;

8698 
	gNode
<
	tTe°RunSèts
, 
	tTe°GroupNode
> 
	tTe°RunNode
;

8700 
CumuœtiveRï‹ãrBa£
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

8701 : 
m_c⁄fig
–
_c⁄fig
.
fuŒC⁄fig
() ),

8702 
°ªam
–
_c⁄fig
.stream() )

8704 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
Ál£
;

8706 ~
CumuœtiveRï‹ãrBa£
();

8708 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
	gCATCH_OVERRIDE
 {

8709  
	gm_ªp‹ãrPªfs
;

8712 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& ) 
	gCATCH_OVERRIDE
 {}

8713 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& ) 
	gCATCH_OVERRIDE
 {}

8715 
vútuÆ
 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& ) 
	gCATCH_OVERRIDE
 {}

8717 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) 
	gCATCH_OVERRIDE
 {

8718 
Se˘i⁄Sèts
 
öcom∂ëeSèts
–
£˘i⁄Info
, 
Cou¡s
(), 0, 
Ál£
 );

8719 
	gPå
<
	gSe˘i⁄Node
> 
	gnode
;

8720 if–
	gm_£˘i⁄Sèck
.
em±y
() ) {

8721 if–!
	gm_roŸSe˘i⁄
 )

8722 
	gm_roŸSe˘i⁄
 = 
√w
 
Se˘i⁄Node
–
öcom∂ëeSèts
 );

8723 
	gnode
 = 
m_roŸSe˘i⁄
;

8726 
	gSe˘i⁄Node
& 
	g∑ª¡Node
 = *
m_£˘i⁄Sèck
.
back
();

8727 
	gSe˘i⁄Node
::
ChûdSe˘i⁄s
::
c⁄°_ôî©‹
 
ô
 =

8728 
°d
::
föd_if
–
∑ª¡Node
.
chûdSe˘i⁄s
.
begö
(),

8729 
∑ª¡Node
.
chûdSe˘i⁄s
.
íd
(),

8730 
BySe˘i⁄Info
–
£˘i⁄Info
 ) );

8731 if–
	gô
 =
∑ª¡Node
.
chûdSe˘i⁄s
.
íd
() ) {

8732 
node
 = 
√w
 
Se˘i⁄Node
–
öcom∂ëeSèts
 );

8733 
	g∑ª¡Node
.
	gchûdSe˘i⁄s
.
push_back
–
node
 );

8736 
	gnode
 = *
ô
;

8738 
	gm_£˘i⁄Sèck
.
push_back
–
node
 );

8739 
	gm_dì≥°Se˘i⁄
 = 
node
;

8742 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& ) 
	gCATCH_OVERRIDE
 {}

8744 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

8745 
as£π
–!
m_£˘i⁄Sèck
.
em±y
() );

8746 
	gSe˘i⁄Node
& 
	g£˘i⁄Node
 = *
m_£˘i⁄Sèck
.
back
();

8747 
	g£˘i⁄Node
.
	gas£πi⁄s
.
push_back
–
as£πi⁄Sèts
 );

8748  
	gåue
;

8750 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

8751 
as£π
–!
m_£˘i⁄Sèck
.
em±y
() );

8752 
	gSe˘i⁄Node
& 
	gnode
 = *
m_£˘i⁄Sèck
.
back
();

8753 
	gnode
.
	g°©s
 = 
£˘i⁄Sèts
;

8754 
	gm_£˘i⁄Sèck
.
p›_back
();

8756 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) 
	gCATCH_OVERRIDE
 {

8757 
	gPå
<
	gTe°Ca£Node
> 
	gnode
 = 
√w
 
Te°Ca£Node
–
ã°Ca£Sèts
 );

8758 
as£π
–
m_£˘i⁄Sèck
.
size
() == 0 );

8759 
	gnode
->
	gchûdªn
.
push_back
–
m_roŸSe˘i⁄
 );

8760 
	gm_ã°Ca£s
.
push_back
–
node
 );

8761 
	gm_roŸSe˘i⁄
.
ª£t
();

8763 
as£π
–
m_dì≥°Se˘i⁄
 );

8764 
	gm_dì≥°Se˘i⁄
->
	g°dOut
 = 
ã°Ca£Sèts
.
°dOut
;

8765 
	gm_dì≥°Se˘i⁄
->
	g°dEº
 = 
ã°Ca£Sèts
.
°dEº
;

8767 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) 
	gCATCH_OVERRIDE
 {

8768 
	gPå
<
	gTe°GroupNode
> 
	gnode
 = 
√w
 
Te°GroupNode
–
ã°GroupSèts
 );

8769 
	gnode
->
	gchûdªn
.
sw≠
–
m_ã°Ca£s
 );

8770 
	gm_ã°Groups
.
push_back
–
node
 );

8772 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) 
	gCATCH_OVERRIDE
 {

8773 
	gPå
<
	gTe°RunNode
> 
	gnode
 = 
√w
 
Te°RunNode
–
ã°RunSèts
 );

8774 
	gnode
->
	gchûdªn
.
sw≠
–
m_ã°Groups
 );

8775 
	gm_ã°Runs
.
push_back
–
node
 );

8776 
ã°RunEndedCumuœtive
();

8778 
vútuÆ
 
ã°RunEndedCumuœtive
() = 0;

8780 
vútuÆ
 
skùTe°
–
Te°Ca£Info
 c⁄°& ) 
	gCATCH_OVERRIDE
 {}

8782 
	gPå
<
IC⁄fig
 c⁄°> 
	gm_c⁄fig
;

8783 
	g°d
::
o°ªam
& 
°ªam
;

8784 
	g°d
::
ve˘‹
<
As£πi⁄Sèts
> 
m_as£πi⁄s
;

8785 
	g°d
::
ve˘‹
<
°d
::ve˘‹<
På
<
Se˘i⁄Node
> > > 
m_£˘i⁄s
;

8786 
	g°d
::
ve˘‹
<
På
<
Te°Ca£Node
> > 
m_ã°Ca£s
;

8787 
	g°d
::
ve˘‹
<
På
<
Te°GroupNode
> > 
m_ã°Groups
;

8789 
	g°d
::
ve˘‹
<
På
<
Te°RunNode
> > 
m_ã°Runs
;

8791 
	gPå
<
	gSe˘i⁄Node
> 
	gm_roŸSe˘i⁄
;

8792 
	gPå
<
	gSe˘i⁄Node
> 
	gm_dì≥°Se˘i⁄
;

8793 
	g°d
::
ve˘‹
<
På
<
Se˘i⁄Node
> > 
m_£˘i⁄Sèck
;

8794 
Rï‹ãrPª„ªn˚s
 
	gm_ªp‹ãrPªfs
;

8798 
	gãm∂©e
<
	gC
>

8799 c⁄°* 
gëLöeOfCh¨s
() {

8800 
	glöe
[
CATCH_CONFIG_CONSOLE_WIDTH
] = {0};

8801 if–!*
	glöe
 ) {

8802 
mem£t
–
löe
, 
C
, 
CATCH_CONFIG_CONSOLE_WIDTH
-1 );

8803 
	glöe
[
CATCH_CONFIG_CONSOLE_WIDTH
-1] = 0;

8805  
	glöe
;

8808 
	gTe°EvítLi°íîBa£
 : 
SåómögRï‹ãrBa£
 {

8809 
Te°EvítLi°íîBa£
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

8810 : 
SåómögRï‹ãrBa£
–
_c⁄fig
 )

8813 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& ) 
CATCH_OVERRIDE
 {}

8814 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& ) 
CATCH_OVERRIDE
 {

8815  
Ál£
;

8822 
	#TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED


	)

8824 
«me•a˚
 
	gC©ch
 {

8826 
	gãm∂©e
<
ty≥«me
 
	gT
>

8827 ˛as†
	cLegacyRï‹ãrRegi°ør
 {

8829 ˛as†
	cRï‹ãrFa˘‹y
 : 
public
 
IRï‹ãrFa˘‹y
 {

8830 
vútuÆ
 
ISåómögRï‹ãr
* 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) const {

8831  
√w
 
LegacyRï‹ãrAd≠ãr
–√w 
T
–
c⁄fig
 ) );

8834 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
() const {

8835  
T
::
gëDes¸ùti⁄
();

8839 
	gpublic
:

8841 
LegacyRï‹ãrRegi°ør
–
°d
::
°rög
 c⁄°& 
«me
 ) {

8842 
gëMuèbÀRegi°ryHub
().
ªgi°îRï‹ãr
–
«me
, 
√w
 
Rï‹ãrFa˘‹y
() );

8846 
	gãm∂©e
<
ty≥«me
 
	gT
>

8847 ˛as†
	cRï‹ãrRegi°ør
 {

8849 
˛ass
 
	gRï‹ãrFa˘‹y
 : 
public
 
Sh¨edIm∂
<
IRï‹ãrFa˘‹y
> {

8862 
vútuÆ
 
ISåómögRï‹ãr
* 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) const {

8863  
√w
 
T
–
c⁄fig
 );

8866 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
() const {

8867  
T
::
gëDes¸ùti⁄
();

8871 
	gpublic
:

8873 
Rï‹ãrRegi°ør
–
°d
::
°rög
 c⁄°& 
«me
 ) {

8874 
gëMuèbÀRegi°ryHub
().
ªgi°îRï‹ãr
–
«me
, 
√w
 
Rï‹ãrFa˘‹y
() );

8878 
	gãm∂©e
<
ty≥«me
 
	gT
>

8879 ˛as†
	cLi°íîRegi°ør
 {

8881 
˛ass
 
	gLi°íîFa˘‹y
 : 
public
 
Sh¨edIm∂
<
IRï‹ãrFa˘‹y
> {

8883 
vútuÆ
 
ISåómögRï‹ãr
* 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) const {

8884  
√w
 
T
–
c⁄fig
 );

8886 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
() const {

8891 
	gpublic
:

8893 
Li°íîRegi°ør
() {

8894 
gëMuèbÀRegi°ryHub
().
ªgi°îLi°íî
–
√w
 
Li°íîFa˘‹y
() );

8899 
	#INTERNAL_CATCH_REGISTER_LEGACY_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) \

8900 
«me•a˚
{ 
C©ch
::
LegacyRï‹ãrRegi°ør
<
ªp‹ãrTy≥
> 
ˇtch_öã∫Æ_Regi°ørF‹
##
	`ªp‹ãrTy≥
–
«me
 ); }

	)

8902 
	#INTERNAL_CATCH_REGISTER_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) \

8903 
«me•a˚
{ 
C©ch
::
Rï‹ãrRegi°ør
<
ªp‹ãrTy≥
> 
ˇtch_öã∫Æ_Regi°ørF‹
##
	`ªp‹ãrTy≥
–
«me
 ); }

	)

8905 
	#INTERNAL_CATCH_REGISTER_LISTENER
–
li°íîTy≥
 ) \

8906 
«me•a˚
{ 
C©ch
::
Li°íîRegi°ør
<
li°íîTy≥
> 
ˇtch_öã∫Æ_Regi°ørF‹
##li°íîTy≥; }

	)

8909 
	#TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED


	)

8911 
	~<s°ªam
>

8912 
	~<°rög
>

8913 
	~<ve˘‹
>

8914 
	~<iom™ù
>

8916 
«me•a˚
 
	gC©ch
 {

8918 ˛as†
	cXmlEncode
 {

8919 
	gpublic
:

8920 
	eF‹Wh©
 { 
F‹TextNodes
, 
	gF‹Aâribuãs
 };

8922 
XmlEncode
–
°d
::
°rög
 c⁄°& 
°r
, 
F‹Wh©
 
f‹Wh©
 = 
F‹TextNodes
 )

8923 : 
m_°r
–
°r
 ),

8924 
m_f‹Wh©
–
f‹Wh©
 )

8927 
ícodeTo
–
°d
::
o°ªam
& 
os
 ) const {

8932  
°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gm_°r
.
size
(); ++ i ) {

8933 
	gc
 = 
m_°r
[
i
];

8934  
	gc
 ) {

8935 '<': 
os
 << "&lt;"; ;

8936 '&': 
os
 << "&amp;"; ;

8940 if–
i
 > 2 && 
m_°r
[i-1] == ']' && m_str[i-2] == ']' )

8941 
os
 << "&gt;";

8943 
	gos
 << 
	gc
;

8947 if–
m_f‹Wh©
 =
F‹Aâribuãs
 )

8948 
os
 << "&quot;";

8950 
	gos
 << 
	gc
;

8955 i‡––
c
 < '\x09' ) || ( c > '\x0D' && c < '\x20') || c=='\x7F' )

8956 
os
 << "&#x" << 
°d
::
uµîˇ£
 << std::
hex
 << 
°©ic_ˇ°
<>–
c
 );

8958 
	gos
 << 
	gc
;

8963 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
XmlEncode
 c⁄°& 
	gxmlEncode
 ) {

8964 
	gxmlEncode
.
ícodeTo
–
os
 );

8965  
	gos
;

8968 
	g¥iv©e
:

8969 
°d
::
°rög
 
m_°r
;

8970 
F‹Wh©
 
	gm_f‹Wh©
;

8973 ˛as†
	cXmlWrôî
 {

8974 
	gpublic
:

8976 ˛as†
	cSc›edEÀmít
 {

8977 
public
:

8978 
Sc›edEÀmít
–
XmlWrôî
* 
wrôî
 )

8979 : 
m_wrôî
–
wrôî
 )

8982 
Sc›edEÀmít
–Sc›edEÀmíàc⁄°& 
Ÿhî
 )

8983 : 
m_wrôî
–
Ÿhî
.m_writer ){

8984 
Ÿhî
.
m_wrôî
 = 
CATCH_NULL
;

8987 ~
Sc›edEÀmít
() {

8988 if–
	gm_wrôî
 )

8989 
	gm_wrôî
->
ídEÀmít
();

8992 
	gSc›edEÀmít
& 
wrôeText
–
°d
::
°rög
 c⁄°& 
ãxt
, 
boﬁ
 
ödít
 = 
åue
 ) {

8993 
m_wrôî
->
wrôeText
–
ãxt
, 
ödít
 );

8994  *
	gthis
;

8997 
	gãm∂©e
<
ty≥«me
 
	gT
>

8998 
	gSc›edEÀmít
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
T
 c⁄°& 
©åibuã
 ) {

8999 
	gm_wrôî
->
wrôeAâribuã
–
«me
, 
©åibuã
 );

9000  *
	gthis
;

9003 
	g¥iv©e
:

9004 
muèbÀ
 
XmlWrôî
* 
m_wrôî
;

9007 
XmlWrôî
()

9008 : 
m_ègIsO≥n
–
Ál£
 ),

9009 
m_√edsNewlöe
–
Ál£
 ),

9010 
m_os
–&
C©ch
::
cout
() )

9013 
XmlWrôî
–
°d
::
o°ªam
& 
os
 )

9014 : 
m_ègIsO≥n
–
Ál£
 ),

9015 
m_√edsNewlöe
–
Ál£
 ),

9016 
m_os
–&
os
 )

9019 ~
XmlWrôî
() {

9020  !
	gm_ègs
.
em±y
() )

9021 
ídEÀmít
();

9024 
	gXmlWrôî
& 
°¨tEÀmít
–
°d
::
°rög
 c⁄°& 
«me
 ) {

9025 
ísuªTagClo£d
();

9026 
√wlöeIfNe˚sßry
();

9027 
°ªam
(Ë<< 
	gm_ödít
 << "<" << 
	g«me
;

9028 
	gm_ègs
.
push_back
–
«me
 );

9029 
	gm_ödít
 += " ";

9030 
	gm_ègIsO≥n
 = 
åue
;

9031  *
	gthis
;

9034 
Sc›edEÀmít
 
sc›edEÀmít
–
°d
::
°rög
 c⁄°& 
«me
 ) {

9035 
Sc›edEÀmít
 
sc›ed
–
this
 );

9036 
°¨tEÀmít
–
«me
 );

9037  
	gsc›ed
;

9040 
	gXmlWrôî
& 
ídEÀmít
() {

9041 
√wlöeIfNe˚sßry
();

9042 
	gm_ödít
 = 
m_ödít
.
sub°r
–0, m_ödít.
size
()-2 );

9043 if–
	gm_ègIsO≥n
 ) {

9044 
°ªam
() << "/>\n";

9045 
	gm_ègIsO≥n
 = 
Ál£
;

9048 
°ªam
(Ë<< 
	gm_ödít
 << "</" << 
	gm_ègs
.
back
() << ">\n";

9050 
	gm_ègs
.
p›_back
();

9051  *
	gthis
;

9054 
	gXmlWrôî
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, std::°rög c⁄°& 
©åibuã
 ) {

9055 if–!
«me
.
em±y
(Ë&& !
©åibuã
.empty() )

9056 
°ªam
(Ë<< " " << 
«me
 << "=\"" << 
XmlEncode
–
©åibuã
, XmlEncode::
F‹Aâribuãs
 ) << "\"";

9057  *
	gthis
;

9060 
	gXmlWrôî
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
boﬁ
 
©åibuã
 ) {

9061 
°ªam
(Ë<< " " << 
	g«me
 << "=\"" << ( 
	g©åibuã
 ? "true" : "false" ) << "\"";

9062  *
	gthis
;

9065 
	gãm∂©e
<
ty≥«me
 
	gT
>

9066 
	gXmlWrôî
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
T
 c⁄°& 
©åibuã
 ) {

9067 
	g°d
::
o°rög°ªam
 
oss
;

9068 
	goss
 << 
	g©åibuã
;

9069  
wrôeAâribuã
–
«me
, 
oss
.
°r
() );

9072 
	gXmlWrôî
& 
wrôeText
–
°d
::
°rög
 c⁄°& 
ãxt
, 
boﬁ
 
ödít
 = 
åue
 ) {

9073 if–!
ãxt
.
em±y
() ){

9074 
boﬁ
 
ègWasO≥n
 = 
m_ègIsO≥n
;

9075 
ísuªTagClo£d
();

9076 if–
	gègWasO≥n
 && 
	gödít
 )

9077 
°ªam
(Ë<< 
	gm_ödít
;

9078 
°ªam
(Ë<< 
XmlEncode
–
ãxt
 );

9079 
	gm_√edsNewlöe
 = 
åue
;

9081  *
	gthis
;

9084 
	gXmlWrôî
& 
wrôeCommít
–
°d
::
°rög
 c⁄°& 
ãxt
 ) {

9085 
ísuªTagClo£d
();

9086 
°ªam
(Ë<< 
	gm_ödít
 << "<!--" << 
	gãxt
 << "-->";

9087 
	gm_√edsNewlöe
 = 
åue
;

9088  *
	gthis
;

9091 
	gXmlWrôî
& 
wrôeBœnkLöe
() {

9092 
ísuªTagClo£d
();

9093 
°ªam
() << "\n";

9094  *
	gthis
;

9097 
£tSåóm
–
°d
::
o°ªam
& 
os
 ) {

9098 
m_os
 = &
os
;

9101 
	g¥iv©e
:

9102 
XmlWrôî
( XmlWriter const& );

9103 
	g›î©‹
=–
XmlWrôî
 const& );

9105 
	g°d
::
o°ªam
& 
°ªam
() {

9106  *
m_os
;

9109 
ísuªTagClo£d
() {

9110 if–
	gm_ègIsO≥n
 ) {

9111 
°ªam
() << ">\n";

9112 
	gm_ègIsO≥n
 = 
Ál£
;

9116 
√wlöeIfNe˚sßry
() {

9117 if–
	gm_√edsNewlöe
 ) {

9118 
°ªam
() << "\n";

9119 
	gm_√edsNewlöe
 = 
Ál£
;

9123 
boﬁ
 
	gm_ègIsO≥n
;

9124 
boﬁ
 
	gm_√edsNewlöe
;

9125 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
m_ègs
;

9126 
	g°d
::
°rög
 
m_ödít
;

9127 
	g°d
::
o°ªam
* 
m_os
;

9133 
	#TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED


	)

9135 #ifde‡
__˛™g__


9136 #ifde‡
__ICC


9137 #¥agm®
	$w¨nög
(
p›
)

9139 #¥agm®
˛™g
 
dügno°ic
 
p›


9141 #ñi‡
deföed
 
__GNUC__


9142 #¥agm®
GCC
 
dügno°ic
 
p›


9146 
«me•a˚
 
C©ch
 {

9147 ˛as†
	cXmlRï‹ãr
 : 
public
 
SåómögRï‹ãrBa£
 {

9148 
public
:

9149 
	`XmlRï‹ãr
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

9150 : 
	`SåómögRï‹ãrBa£
–
_c⁄fig
 ),

9151 
	`m_£˘i⁄Dïth
( 0 )

9153 
m_ªp‹ãrPªfs
.
shouldRedúe˘StdOut
 = 
åue
;

9156 
vútuÆ
 ~
	`XmlRï‹ãr
(Ë
CATCH_OVERRIDE
;

9158 
°d
::
°rög
 
	`gëDes¸ùti⁄
() {

9162 
public
:

9164 
vútuÆ
 
	`noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
s
 ) 
CATCH_OVERRIDE
 {

9165 
SåómögRï‹ãrBa£
::
	`noM©chögTe°Ca£s
–
s
 );

9168 
vútuÆ
 
	`ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°Info
 ) 
CATCH_OVERRIDE
 {

9169 
SåómögRï‹ãrBa£
::
	`ã°RunSèπög
–
ã°Info
 );

9170 
m_xml
.
	`£tSåóm
–
°ªam
 );

9171 
m_xml
.
	`°¨tEÀmít
( "Catch" );

9172 if–!
m_c⁄fig
->
	`«me
().
	`em±y
() )

9173 
m_xml
.
	`wrôeAâribuã
–"«me", 
m_c⁄fig
->
	`«me
() );

9176 
vútuÆ
 
	`ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) 
CATCH_OVERRIDE
 {

9177 
SåómögRï‹ãrBa£
::
	`ã°GroupSèπög
–
groupInfo
 );

9178 
m_xml
.
	`°¨tEÀmít
( "Group" )

9179 .
	`wrôeAâribuã
–"«me", 
groupInfo
.
«me
 );

9182 
vútuÆ
 
	`ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) 
CATCH_OVERRIDE
 {

9183 
SåómögRï‹ãrBa£
::
	`ã°Ca£Sèπög
(
ã°Info
);

9184 
m_xml
.
	`°¨tEÀmít
–"Te°Ca£" ).
	`wrôeAâribuã
–"«me", 
	`åim
–
ã°Info
.
«me
 ) );

9186 i‡–
m_c⁄fig
->
	`showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

9187 
m_ã°Ca£Timî
.
	`°¨t
();

9190 
vútuÆ
 
	`£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) 
CATCH_OVERRIDE
 {

9191 
SåómögRï‹ãrBa£
::
	`£˘i⁄Sèπög
–
£˘i⁄Info
 );

9192 if–
m_£˘i⁄Dïth
++ > 0 ) {

9193 
m_xml
.
	`°¨tEÀmít
( "Section" )

9194 .
	`wrôeAâribuã
–"«me", 
	`åim
–
£˘i⁄Info
.
«me
 ) )

9195 .
	`wrôeAâribuã
–"des¸ùti⁄", 
£˘i⁄Info
.
des¸ùti⁄
 );

9199 
vútuÆ
 
	`as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& ) 
CATCH_OVERRIDE
 { }

9201 
vútuÆ
 
boﬁ
 
	`as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) 
CATCH_OVERRIDE
 {

9202 c⁄° 
As£πi⁄Resu…
& 
as£πi⁄Resu…
 = 
as£πi⁄Sèts
.assertionResult;

9205 if–
as£πi⁄Sèts
.
as£πi⁄Resu…
.
	`gëResu…Ty≥
(Ë!
Resu…Was
::
Ok
 ) {

9206  
°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ô
 = 
as£πi⁄Sèts
.
öfoMesßges
.
	`begö
(), 
ôEnd
 =ás£πi⁄Sèts.öfoMesßges.
	`íd
();

9207 
ô
 !
ôEnd
;

9208 ++
ô
 ) {

9209 if–
ô
->
ty≥
 =
Resu…Was
::
Info
 ) {

9210 
m_xml
.
	`sc›edEÀmít
( "Info" )

9211 .
	`wrôeText
–
ô
->
mesßge
 );

9212 } i‡–
ô
->
ty≥
 =
Resu…Was
::
W¨nög
 ) {

9213 
m_xml
.
	`sc›edEÀmít
( "Warning" )

9214 .
	`wrôeText
–
ô
->
mesßge
 );

9220 if–!
m_c⁄fig
->
	`ö˛udeSuc˚ssfulResu…s
(Ë&& 
	`isOk
(
as£πi⁄Resu…
.
	`gëResu…Ty≥
()) )

9221  
åue
;

9224 if–
as£πi⁄Resu…
.
	`hasEx¥essi⁄
() ) {

9225 
m_xml
.
	`°¨tEÀmít
( "Expression" )

9226 .
	`wrôeAâribuã
–"suc˚ss", 
as£πi⁄Resu…
.
	`suc˚eded
() )

9227 .
	`wrôeAâribuã
–"ty≥", 
as£πi⁄Resu…
.
	`gëTe°Ma¸oName
() )

9228 .
	`wrôeAâribuã
–"fûíame", 
as£πi⁄Resu…
.
	`gëSour˚Info
().
fûe
 )

9229 .
	`wrôeAâribuã
–"löe", 
as£πi⁄Resu…
.
	`gëSour˚Info
().
löe
 );

9231 
m_xml
.
	`sc›edEÀmít
( "Original" )

9232 .
	`wrôeText
–
as£πi⁄Resu…
.
	`gëEx¥essi⁄
() );

9233 
m_xml
.
	`sc›edEÀmít
( "Expanded" )

9234 .
	`wrôeText
–
as£πi⁄Resu…
.
	`gëEx∑ndedEx¥essi⁄
() );

9238  
as£πi⁄Resu…
.
	`gëResu…Ty≥
() ) {

9239 
Resu…Was
::
ThªwEx˚±i⁄
:

9240 
m_xml
.
	`sc›edEÀmít
( "Exception" )

9241 .
	`wrôeAâribuã
–"fûíame", 
as£πi⁄Resu…
.
	`gëSour˚Info
().
fûe
 )

9242 .
	`wrôeAâribuã
–"löe", 
as£πi⁄Resu…
.
	`gëSour˚Info
().
löe
 )

9243 .
	`wrôeText
–
as£πi⁄Resu…
.
	`gëMesßge
() );

9245 
Resu…Was
::
F©ÆEº‹C⁄dôi⁄
:

9246 
m_xml
.
	`sc›edEÀmít
( "Fatal Error Condition" )

9247 .
	`wrôeAâribuã
–"fûíame", 
as£πi⁄Resu…
.
	`gëSour˚Info
().
fûe
 )

9248 .
	`wrôeAâribuã
–"löe", 
as£πi⁄Resu…
.
	`gëSour˚Info
().
löe
 )

9249 .
	`wrôeText
–
as£πi⁄Resu…
.
	`gëMesßge
() );

9251 
Resu…Was
::
Info
:

9252 
m_xml
.
	`sc›edEÀmít
( "Info" )

9253 .
	`wrôeText
–
as£πi⁄Resu…
.
	`gëMesßge
() );

9255 
Resu…Was
::
W¨nög
:

9258 
Resu…Was
::
Ex∂icôFaûuª
:

9259 
m_xml
.
	`sc›edEÀmít
( "Failure" )

9260 .
	`wrôeText
–
as£πi⁄Resu…
.
	`gëMesßge
() );

9266 if–
as£πi⁄Resu…
.
	`hasEx¥essi⁄
() )

9267 
m_xml
.
	`ídEÀmít
();

9269  
åue
;

9272 
vútuÆ
 
	`£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) 
CATCH_OVERRIDE
 {

9273 
SåómögRï‹ãrBa£
::
	`£˘i⁄Ended
–
£˘i⁄Sèts
 );

9274 if–--
m_£˘i⁄Dïth
 > 0 ) {

9275 
XmlWrôî
::
Sc›edEÀmít
 
e
 = 
m_xml
.
	`sc›edEÀmít
( "OverallResults" );

9276 
e
.
	`wrôeAâribuã
–"suc˚s£s", 
£˘i⁄Sèts
.
as£πi⁄s
.
∑s£d
 );

9277 
e
.
	`wrôeAâribuã
–"Áûuªs", 
£˘i⁄Sèts
.
as£πi⁄s
.
Áûed
 );

9278 
e
.
	`wrôeAâribuã
–"ex≥˘edFaûuªs", 
£˘i⁄Sèts
.
as£πi⁄s
.
ÁûedButOk
 );

9280 i‡–
m_c⁄fig
->
	`showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

9281 
e
.
	`wrôeAâribuã
–"duøti⁄InSec⁄ds", 
£˘i⁄Sèts
.
duøti⁄InSec⁄ds
 );

9283 
m_xml
.
	`ídEÀmít
();

9287 
vútuÆ
 
	`ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) 
CATCH_OVERRIDE
 {

9288 
SåómögRï‹ãrBa£
::
	`ã°Ca£Ended
–
ã°Ca£Sèts
 );

9289 
XmlWrôî
::
Sc›edEÀmít
 
e
 = 
m_xml
.
	`sc›edEÀmít
( "OverallResult" );

9290 
e
.
	`wrôeAâribuã
–"suc˚ss", 
ã°Ca£Sèts
.
tŸÆs
.
as£πi⁄s
.
	`ÆlOk
() );

9292 i‡–
m_c⁄fig
->
	`showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

9293 
e
.
	`wrôeAâribuã
–"duøti⁄InSec⁄ds", 
m_ã°Ca£Timî
.
	`gëEœp£dSec⁄ds
() );

9295 
m_xml
.
	`ídEÀmít
();

9298 
vútuÆ
 
	`ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) 
CATCH_OVERRIDE
 {

9299 
SåómögRï‹ãrBa£
::
	`ã°GroupEnded
–
ã°GroupSèts
 );

9301 
m_xml
.
	`sc›edEÀmít
( "OverallResults" )

9302 .
	`wrôeAâribuã
–"suc˚s£s", 
ã°GroupSèts
.
tŸÆs
.
as£πi⁄s
.
∑s£d
 )

9303 .
	`wrôeAâribuã
–"Áûuªs", 
ã°GroupSèts
.
tŸÆs
.
as£πi⁄s
.
Áûed
 )

9304 .
	`wrôeAâribuã
–"ex≥˘edFaûuªs", 
ã°GroupSèts
.
tŸÆs
.
as£πi⁄s
.
ÁûedButOk
 );

9305 
m_xml
.
	`ídEÀmít
();

9308 
vútuÆ
 
	`ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) 
CATCH_OVERRIDE
 {

9309 
SåómögRï‹ãrBa£
::
	`ã°RunEnded
–
ã°RunSèts
 );

9310 
m_xml
.
	`sc›edEÀmít
( "OverallResults" )

9311 .
	`wrôeAâribuã
–"suc˚s£s", 
ã°RunSèts
.
tŸÆs
.
as£πi⁄s
.
∑s£d
 )

9312 .
	`wrôeAâribuã
–"Áûuªs", 
ã°RunSèts
.
tŸÆs
.
as£πi⁄s
.
Áûed
 )

9313 .
	`wrôeAâribuã
–"ex≥˘edFaûuªs", 
ã°RunSèts
.
tŸÆs
.
as£πi⁄s
.
ÁûedButOk
 );

9314 
m_xml
.
	`ídEÀmít
();

9317 
¥iv©e
:

9318 
Timî
 
m_ã°Ca£Timî
;

9319 
XmlWrôî
 
m_xml
;

9320 
m_£˘i⁄Dïth
;

9323 
	`INTERNAL_CATCH_REGISTER_REPORTER
–"xml", 
XmlRï‹ãr
 )

9325 
	}
}

9328 
	#TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED


	)

9330 
	~<as£π.h
>

9332 
«me•a˚
 
	gC©ch
 {

9334 ˛as†
	cJunôRï‹ãr
 : 
public
 
CumuœtiveRï‹ãrBa£
 {

9335 
public
:

9336 
JunôRï‹ãr
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

9337 : 
CumuœtiveRï‹ãrBa£
–
_c⁄fig
 ),

9338 
xml
–
_c⁄fig
.
°ªam
() )

9340 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
åue
;

9343 
	gvútuÆ
 ~
JunôRï‹ãr
(Ë
	gCATCH_OVERRIDE
;

9345 
	g°d
::
°rög
 
gëDes¸ùti⁄
() {

9349 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& ) 
CATCH_OVERRIDE
 {}

9351 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
runInfo
 ) 
CATCH_OVERRIDE
 {

9352 
CumuœtiveRï‹ãrBa£
::
ã°RunSèπög
–
runInfo
 );

9353 
	gxml
.
°¨tEÀmít
( "testsuites" );

9356 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) 
	gCATCH_OVERRIDE
 {

9357 
	gsuôeTimî
.
°¨t
();

9358 
	g°dOutF‹Suôe
.
°r
("");

9359 
	g°dEºF‹Suôe
.
°r
("");

9360 
	gu√x≥˘edEx˚±i⁄s
 = 0;

9361 
	gCumuœtiveRï‹ãrBa£
::
ã°GroupSèπög
–
groupInfo
 );

9364 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

9365 if–
	gas£πi⁄Sèts
.
	gas£πi⁄Resu…
.
gëResu…Ty≥
(Ë=
Resu…Was
::
ThªwEx˚±i⁄
 )

9366 
u√x≥˘edEx˚±i⁄s
++;

9367  
	gCumuœtiveRï‹ãrBa£
::
as£πi⁄Ended
–
as£πi⁄Sèts
 );

9370 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) 
	gCATCH_OVERRIDE
 {

9371 
	g°dOutF‹Suôe
 << 
	gã°Ca£Sèts
.
	g°dOut
;

9372 
	g°dEºF‹Suôe
 << 
	gã°Ca£Sèts
.
	g°dEº
;

9373 
	gCumuœtiveRï‹ãrBa£
::
ã°Ca£Ended
–
ã°Ca£Sèts
 );

9376 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) 
	gCATCH_OVERRIDE
 {

9377 
	gsuôeTime
 = 
suôeTimî
.
gëEœp£dSec⁄ds
();

9378 
	gCumuœtiveRï‹ãrBa£
::
ã°GroupEnded
–
ã°GroupSèts
 );

9379 
wrôeGroup
–*
m_ã°Groups
.
back
(), 
suôeTime
 );

9382 
vútuÆ
 
ã°RunEndedCumuœtive
(Ë
	gCATCH_OVERRIDE
 {

9383 
	gxml
.
ídEÀmít
();

9386 
wrôeGroup
–
Te°GroupNode
 c⁄°& 
groupNode
, 
suôeTime
 ) {

9387 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
xml
.
sc›edEÀmít
( "testsuite" );

9388 
Te°GroupSèts
 c⁄°& 
	g°©s
 = 
groupNode
.
vÆue
;

9389 
	gxml
.
wrôeAâribuã
–"«me", 
°©s
.
groupInfo
.
«me
 );

9390 
	gxml
.
wrôeAâribuã
–"îr‹s", 
u√x≥˘edEx˚±i⁄s
 );

9391 
	gxml
.
wrôeAâribuã
–"Áûuªs", 
°©s
.
tŸÆs
.
as£πi⁄s
.
Áûed
-
u√x≥˘edEx˚±i⁄s
 );

9392 
	gxml
.
wrôeAâribuã
–"ã°s", 
°©s
.
tŸÆs
.
as£πi⁄s
.
tŸÆ
() );

9393 
	gxml
.
wrôeAâribuã
( "hostname", "tbd" );

9394 if–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Nevî
 )

9395 
xml
.
wrôeAâribuã
( "time", "" );

9397 
	gxml
.
wrôeAâribuã
–"time", 
suôeTime
 );

9398 
	gxml
.
wrôeAâribuã
( "timestamp", "tbd" );

9401  
	gTe°GroupNode
::
ChûdNodes
::
c⁄°_ôî©‹


9402 
ô
 = 
groupNode
.
chûdªn
.
begö
(), 
	gôEnd
 = groupNode.chûdªn.
íd
();

9403 
	gô
 !
ôEnd
;

9404 ++
	gô
 )

9405 
wrôeTe°Ca£
–**
ô
 );

9407 
	gxml
.
sc›edEÀmít
–"sy°em-out" ).
wrôeText
–
åim
–
°dOutF‹Suôe
.
°r
(Ë), 
Ál£
 );

9408 
	gxml
.
sc›edEÀmít
–"sy°em-îr" ).
wrôeText
–
åim
–
°dEºF‹Suôe
.
°r
(Ë), 
Ál£
 );

9411 
wrôeTe°Ca£
–
Te°Ca£Node
 c⁄°& 
ã°Ca£Node
 ) {

9412 
Te°Ca£Sèts
 c⁄°& 
	g°©s
 = 
ã°Ca£Node
.
vÆue
;

9416 
as£π
–
ã°Ca£Node
.
chûdªn
.
size
() == 1 );

9417 
Se˘i⁄Node
 c⁄°& 
	groŸSe˘i⁄
 = *
ã°Ca£Node
.
chûdªn
.
‰⁄t
();

9419 
	g°d
::
°rög
 
˛assName
 = 
°©s
.
ã°Info
.className;

9421 if–
	g˛assName
.
em±y
() ) {

9422 if–
	groŸSe˘i⁄
.
	gchûdSe˘i⁄s
.
em±y
() )

9423 
	g˛assName
 = "global";

9425 
wrôeSe˘i⁄
–
˛assName
, "", 
roŸSe˘i⁄
 );

9428 
wrôeSe˘i⁄
–
°d
::
°rög
 c⁄°& 
˛assName
,

9429 
°d
::
°rög
 c⁄°& 
roŸName
,

9430 
Se˘i⁄Node
 c⁄°& 
£˘i⁄Node
 ) {

9431 
	g°d
::
°rög
 
«me
 = 
åim
–
£˘i⁄Node
.
°©s
.
£˘i⁄Info
.name );

9432 if–!
	groŸName
.
em±y
() )

9433 
	g«me
 = 
roŸName
 + "/" + 
«me
;

9435 if–!
	g£˘i⁄Node
.
	gas£πi⁄s
.
em±y
() ||

9436 !
	g£˘i⁄Node
.
	g°dOut
.
em±y
() ||

9437 !
	g£˘i⁄Node
.
	g°dEº
.
em±y
() ) {

9438 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
xml
.
sc›edEÀmít
( "testcase" );

9439 if–
	g˛assName
.
em±y
() ) {

9440 
	gxml
.
wrôeAâribuã
–"˛as¢ame", 
«me
 );

9441 
	gxml
.
wrôeAâribuã
( "name", "root" );

9444 
	gxml
.
wrôeAâribuã
–"˛as¢ame", 
˛assName
 );

9445 
	gxml
.
wrôeAâribuã
–"«me", 
«me
 );

9447 
	gxml
.
wrôeAâribuã
–"time", 
C©ch
::
toSåög
–
£˘i⁄Node
.
°©s
.
duøti⁄InSec⁄ds
 ) );

9449 
wrôeAs£πi⁄s
–
£˘i⁄Node
 );

9451 if–!
	g£˘i⁄Node
.
	g°dOut
.
em±y
() )

9452 
	gxml
.
sc›edEÀmít
–"sy°em-out" ).
wrôeText
–
åim
–
£˘i⁄Node
.
°dOut
 ), 
Ál£
 );

9453 if–!
	g£˘i⁄Node
.
	g°dEº
.
em±y
() )

9454 
	gxml
.
sc›edEÀmít
–"sy°em-îr" ).
wrôeText
–
åim
–
£˘i⁄Node
.
°dEº
 ), 
Ál£
 );

9456  
	gSe˘i⁄Node
::
ChûdSe˘i⁄s
::
c⁄°_ôî©‹


9457 
ô
 = 
£˘i⁄Node
.
chûdSe˘i⁄s
.
begö
(),

9458 
	gôEnd
 = 
£˘i⁄Node
.
chûdSe˘i⁄s
.
íd
();

9459 
	gô
 !
ôEnd
;

9460 ++
	gô
 )

9461 if–
	g˛assName
.
em±y
() )

9462 
wrôeSe˘i⁄
–
«me
, "", **
ô
 );

9464 
wrôeSe˘i⁄
–
˛assName
, 
«me
, **
ô
 );

9467 
wrôeAs£πi⁄s
–
Se˘i⁄Node
 c⁄°& 
£˘i⁄Node
 ) {

9468  
	gSe˘i⁄Node
::
As£πi⁄s
::
c⁄°_ôî©‹


9469 
ô
 = 
£˘i⁄Node
.
as£πi⁄s
.
begö
(), 
	gôEnd
 = se˘i⁄Node.as£πi⁄s.
íd
();

9470 
	gô
 !
ôEnd
;

9471 ++
	gô
 )

9472 
wrôeAs£πi⁄
–*
ô
 );

9474 
wrôeAs£πi⁄
–
As£πi⁄Sèts
 c⁄°& 
°©s
 ) {

9475 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
 = 
°©s
.
as£πi⁄Resu…
;

9476 if–!
	gªsu…
.
isOk
() ) {

9477 
	g°d
::
°rög
 
ñemítName
;

9478  
	gªsu…
.
gëResu…Ty≥
() ) {

9479 
	gResu…Was
::
ThªwEx˚±i⁄
:

9480 
Resu…Was
::
F©ÆEº‹C⁄dôi⁄
:

9481 
ñemítName
 = "error";

9483 
	gResu…Was
::
Ex∂icôFaûuª
:

9484 
ñemítName
 = "failure";

9486 
	gResu…Was
::
Ex¥essi⁄Faûed
:

9487 
ñemítName
 = "failure";

9489 
	gResu…Was
::
Did¡ThrowEx˚±i⁄
:

9490 
ñemítName
 = "failure";

9494 
	gResu…Was
::
Info
:

9495 
Resu…Was
::
W¨nög
:

9496 
Resu…Was
::
Ok
:

9497 
Resu…Was
::
Unknown
:

9498 
Resu…Was
::
FaûuªBô
:

9499 
Resu…Was
::
Ex˚±i⁄
:

9500 
ñemítName
 = "internalError";

9504 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
xml
.
sc›edEÀmít
–
ñemítName
 );

9506 
	gxml
.
wrôeAâribuã
–"mesßge", 
ªsu…
.
gëEx∑ndedEx¥essi⁄
() );

9507 
	gxml
.
wrôeAâribuã
–"ty≥", 
ªsu…
.
gëTe°Ma¸oName
() );

9509 
	g°d
::
o°rög°ªam
 
oss
;

9510 if–!
	gªsu…
.
gëMesßge
().
em±y
() )

9511 
	goss
 << 
	gªsu…
.
gëMesßge
() << "\n";

9512  
	g°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹


9513 
ô
 = 
°©s
.
öfoMesßges
.
begö
(),

9514 
	gôEnd
 = 
°©s
.
öfoMesßges
.
íd
();

9515 
	gô
 !
ôEnd
;

9516 ++
	gô
 )

9517 if–
	gô
->
	gty≥
 =
Resu…Was
::
Info
 )

9518 
oss
 << 
ô
->
mesßge
 << "\n";

9520 
	goss
 << "© " << 
	gªsu…
.
gëSour˚Info
();

9521 
	gxml
.
wrôeText
–
oss
.
°r
(), 
Ál£
 );

9525 
XmlWrôî
 
	gxml
;

9526 
Timî
 
	gsuôeTimî
;

9527 
	g°d
::
o°rög°ªam
 
°dOutF‹Suôe
;

9528 
	g°d
::
o°rög°ªam
 
°dEºF‹Suôe
;

9529 
	gu√x≥˘edEx˚±i⁄s
;

9532 
INTERNAL_CATCH_REGISTER_REPORTER
–"junô", 
JunôRï‹ãr
 )

9537 
	#TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED


	)

9539 
«me•a˚
 
	gC©ch
 {

9541 
	gC⁄sﬁeRï‹ãr
 : 
SåómögRï‹ãrBa£
 {

9542 
C⁄sﬁeRï‹ãr
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

9543 : 
SåómögRï‹ãrBa£
–
_c⁄fig
 ),

9544 
m_hódîPröãd
–
Ál£
 )

9547 
	gvútuÆ
 ~
C⁄sﬁeRï‹ãr
(Ë
	gCATCH_OVERRIDE
;

9548 
	g°d
::
°rög
 
gëDes¸ùti⁄
() {

9552 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) 
CATCH_OVERRIDE
 {

9553 
°ªam
 << "Nÿã° ca£†m©ched '" << 
•ec
 << "'" << 
°d
::
ídl
;

9556 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& ) 
	gCATCH_OVERRIDE
 {

9559 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
_as£πi⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

9560 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
 = 
_as£πi⁄Sèts
.
as£πi⁄Resu…
;

9562 
boﬁ
 
	g¥ötInfoMesßges
 = 
åue
;

9565 if–!
	gm_c⁄fig
->
ö˛udeSuc˚ssfulResu…s
(Ë&& 
	gªsu…
.
isOk
() ) {

9566 if–
	gªsu…
.
gëResu…Ty≥
(Ë!
Resu…Was
::
W¨nög
 )

9567  
Ál£
;

9568 
	g¥ötInfoMesßges
 = 
Ál£
;

9571 
œzyPröt
();

9573 
As£πi⁄Pröãr
 
¥öãr
–
°ªam
, 
_as£πi⁄Sèts
, 
¥ötInfoMesßges
 );

9574 
	g¥öãr
.
¥öt
();

9575 
	g°ªam
 << 
	g°d
::
ídl
;

9576  
	gåue
;

9579 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
 ) 
	gCATCH_OVERRIDE
 {

9580 
	gm_hódîPröãd
 = 
Ál£
;

9581 
	gSåómögRï‹ãrBa£
::
£˘i⁄Sèπög
–
_£˘i⁄Info
 );

9583 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
_£˘i⁄Sèts
 ) 
	gCATCH_OVERRIDE
 {

9584 if–
	g_£˘i⁄Sèts
.
	gmissögAs£πi⁄s
 ) {

9585 
œzyPröt
();

9586 
Cﬁour
 
cﬁour
–Cﬁour::
Resu…Eº‹
 );

9587 if–
	gm_£˘i⁄Sèck
.
size
() > 1 )

9588 
	g°ªam
 << "\nNoássertions in section";

9590 
	g°ªam
 << "\nNoássertions inÅest case";

9591 
	g°ªam
 << " '" << 
	g_£˘i⁄Sèts
.
	g£˘i⁄Info
.
	g«me
 << "'\n" << 
	g°d
::
ídl
;

9593 if–
	gm_hódîPröãd
 ) {

9594 if–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

9595 
°ªam
 << "Com∂ëed i¿" << 
_£˘i⁄Sèts
.
duøti⁄InSec⁄ds
 << "s" << 
°d
::
ídl
;

9596 
	gm_hódîPröãd
 = 
Ál£
;

9599 if–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

9600 
°ªam
 << 
_£˘i⁄Sèts
.
£˘i⁄Info
.
«me
 << " com∂ëed i¿" << _£˘i⁄Sèts.
duøti⁄InSec⁄ds
 << "s" << 
°d
::
ídl
;

9602 
	gSåómögRï‹ãrBa£
::
£˘i⁄Ended
–
_£˘i⁄Sèts
 );

9605 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
_ã°Ca£Sèts
 ) 
	gCATCH_OVERRIDE
 {

9606 
	gSåómögRï‹ãrBa£
::
ã°Ca£Ended
–
_ã°Ca£Sèts
 );

9607 
	gm_hódîPröãd
 = 
Ál£
;

9609 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
_ã°GroupSèts
 ) 
	gCATCH_OVERRIDE
 {

9610 if–
	gcuºítGroupInfo
.
	gu£d
 ) {

9611 
¥ötSumm¨yDividî
();

9612 
	g°ªam
 << "Summ¨y f‹ grou∞'" << 
	g_ã°GroupSèts
.
	ggroupInfo
.
	g«me
 << "':\n";

9613 
¥ötTŸÆs
–
_ã°GroupSèts
.
tŸÆs
 );

9614 
	g°ªam
 << "\n" << 
	g°d
::
ídl
;

9616 
	gSåómögRï‹ãrBa£
::
ã°GroupEnded
–
_ã°GroupSèts
 );

9618 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
_ã°RunSèts
 ) 
	gCATCH_OVERRIDE
 {

9619 
¥ötTŸÆsDividî
–
_ã°RunSèts
.
tŸÆs
 );

9620 
¥ötTŸÆs
–
_ã°RunSèts
.
tŸÆs
 );

9621 
	g°ªam
 << 
	g°d
::
ídl
;

9622 
	gSåómögRï‹ãrBa£
::
ã°RunEnded
–
_ã°RunSèts
 );

9625 
	g¥iv©e
:

9627 ˛as†
	cAs£πi⁄Pröãr
 {

9628 
›î©‹
–
As£πi⁄Pröãr
 const& );

9629 
	gpublic
:

9630 
As£πi⁄Pröãr
–
°d
::
o°ªam
& 
_°ªam
, 
As£πi⁄Sèts
 c⁄°& 
_°©s
, 
boﬁ
 
_¥ötInfoMesßges
 )

9631 : 
°ªam
–
_°ªam
 ),

9632 
°©s
–
_°©s
 ),

9633 
ªsu…
–
_°©s
.
as£πi⁄Resu…
 ),

9634 
cﬁour
–
Cﬁour
::
N⁄e
 ),

9635 
mesßge
–
ªsu…
.
gëMesßge
() ),

9636 
mesßges
–
_°©s
.
öfoMesßges
 ),

9637 
¥ötInfoMesßges
–
_¥ötInfoMesßges
 )

9639  
	gªsu…
.
gëResu…Ty≥
() ) {

9640 
	gResu…Was
::
Ok
:

9641 
cﬁour
 = 
Cﬁour
::
Suc˚ss
;

9642 
	g∑ssOrFaû
 = "PASSED";

9644 if–
	g_°©s
.
	göfoMesßges
.
size
() == 1 )

9645 
mesßgeLabñ
 = "with message";

9646 if–
	g_°©s
.
	göfoMesßges
.
size
() > 1 )

9647 
	gmesßgeLabñ
 = "with messages";

9649 
	gResu…Was
::
Ex¥essi⁄Faûed
:

9650 if–
ªsu…
.
isOk
() ) {

9651 
cﬁour
 = 
Cﬁour
::
Suc˚ss
;

9652 
	g∑ssOrFaû
 = "FAILED - but was ok";

9655 
	gcﬁour
 = 
Cﬁour
::
Eº‹
;

9656 
	g∑ssOrFaû
 = "FAILED";

9658 if–
	g_°©s
.
	göfoMesßges
.
size
() == 1 )

9659 
mesßgeLabñ
 = "with message";

9660 if–
	g_°©s
.
	göfoMesßges
.
size
() > 1 )

9661 
	gmesßgeLabñ
 = "with messages";

9663 
	gResu…Was
::
ThªwEx˚±i⁄
:

9664 
cﬁour
 = 
Cﬁour
::
Eº‹
;

9665 
	g∑ssOrFaû
 = "FAILED";

9666 
	gmesßgeLabñ
 = "dueÅo unexpectedÉxception with message";

9668 
	gResu…Was
::
F©ÆEº‹C⁄dôi⁄
:

9669 
cﬁour
 = 
Cﬁour
::
Eº‹
;

9670 
	g∑ssOrFaû
 = "FAILED";

9671 
	gmesßgeLabñ
 = "dueÅoá fatalÉrror condition";

9673 
	gResu…Was
::
Did¡ThrowEx˚±i⁄
:

9674 
cﬁour
 = 
Cﬁour
::
Eº‹
;

9675 
	g∑ssOrFaû
 = "FAILED";

9676 
	gmesßgeLabñ
 = "becauseÇoÉxception wasÅhrown where one wasÉxpected";

9678 
	gResu…Was
::
Info
:

9679 
mesßgeLabñ
 = "info";

9681 
	gResu…Was
::
W¨nög
:

9682 
mesßgeLabñ
 = "warning";

9684 
	gResu…Was
::
Ex∂icôFaûuª
:

9685 
∑ssOrFaû
 = "FAILED";

9686 
	gcﬁour
 = 
Cﬁour
::
Eº‹
;

9687 if–
	g_°©s
.
	göfoMesßges
.
size
() == 1 )

9688 
mesßgeLabñ
 = "explicitly with message";

9689 if–
	g_°©s
.
	göfoMesßges
.
size
() > 1 )

9690 
	gmesßgeLabñ
 = "explicitly with messages";

9693 
	gResu…Was
::
Unknown
:

9694 
Resu…Was
::
FaûuªBô
:

9695 
Resu…Was
::
Ex˚±i⁄
:

9696 
∑ssOrFaû
 = "** internalÉrror **";

9697 
	gcﬁour
 = 
Cﬁour
::
Eº‹
;

9702 
¥öt
() const {

9703 
¥ötSour˚Info
();

9704 if–
	g°©s
.
	gtŸÆs
.
	gas£πi⁄s
.
tŸÆ
() > 0 ) {

9705 if–
	gªsu…
.
isOk
() )

9706 
	g°ªam
 << "\n";

9707 
¥ötResu…Ty≥
();

9708 
¥ötOrigöÆEx¥essi⁄
();

9709 
¥ötRec⁄°ru˘edEx¥essi⁄
();

9712 
	g°ªam
 << "\n";

9714 
¥ötMesßge
();

9717 
	g¥iv©e
:

9718 
¥ötResu…Ty≥
() const {

9719 if–!
∑ssOrFaû
.
em±y
() ) {

9720 
Cﬁour
 
cﬁourGu¨d
–
cﬁour
 );

9721 
	g°ªam
 << 
	g∑ssOrFaû
 << ":\n";

9724 
¥ötOrigöÆEx¥essi⁄
() const {

9725 if–
	gªsu…
.
hasEx¥essi⁄
() ) {

9726 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
OrigöÆEx¥essi⁄
 );

9727 
	g°ªam
 << " ";

9728 
	g°ªam
 << 
	gªsu…
.
gëEx¥essi⁄InMa¸o
();

9729 
	g°ªam
 << "\n";

9732 
¥ötRec⁄°ru˘edEx¥essi⁄
() const {

9733 if–
	gªsu…
.
hasEx∑ndedEx¥essi⁄
() ) {

9734 
	g°ªam
 << "withÉxpansion:\n";

9735 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Rec⁄°ru˘edEx¥essi⁄
 );

9736 
	g°ªam
 << 
Text
–
ªsu…
.
gëEx∑ndedEx¥essi⁄
(), 
TextAâribuãs
().
£tIndít
(2) ) << "\n";

9739 
¥ötMesßge
() const {

9740 if–!
	gmesßgeLabñ
.
em±y
() )

9741 
	g°ªam
 << 
	gmesßgeLabñ
 << ":" << "\n";

9742  
	g°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ô
 = 
mesßges
.
begö
(), 
	gôEnd
 = mesßges.
íd
();

9743 
	gô
 !
ôEnd
;

9744 ++
	gô
 ) {

9746 if–
	g¥ötInfoMesßges
 || 
	gô
->
	gty≥
 !
Resu…Was
::
Info
 )

9747 
°ªam
 << 
Text
–
ô
->
mesßge
, 
TextAâribuãs
().
£tIndít
(2) ) << "\n";

9750 
¥ötSour˚Info
() const {

9751 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
FûeName
 );

9752 
	g°ªam
 << 
	gªsu…
.
gëSour˚Info
() << ": ";

9755 
	g°d
::
o°ªam
& 
°ªam
;

9756 
As£πi⁄Sèts
 c⁄°& 
	g°©s
;

9757 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
;

9758 
	gCﬁour
::
Code
 
cﬁour
;

9759 
	g°d
::
°rög
 
∑ssOrFaû
;

9760 
	g°d
::
°rög
 
mesßgeLabñ
;

9761 
	g°d
::
°rög
 
mesßge
;

9762 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
mesßges
;

9763 
boﬁ
 
	g¥ötInfoMesßges
;

9766 
œzyPröt
() {

9768 if–!
	gcuºítTe°RunInfo
.
	gu£d
 )

9769 
œzyPrötRunInfo
();

9770 if–!
	gcuºítGroupInfo
.
	gu£d
 )

9771 
œzyPrötGroupInfo
();

9773 if–!
	gm_hódîPröãd
 ) {

9774 
¥ötTe°Ca£AndSe˘i⁄Hódî
();

9775 
	gm_hódîPröãd
 = 
åue
;

9778 
œzyPrötRunInfo
() {

9779 
	g°ªam
 << "\n" << 
	ggëLöeOfCh¨s
<'~'>() << "\n";

9780 
Cﬁour
 
cﬁour
–Cﬁour::
Sec⁄d¨yText
 );

9781 
	g°ªam
 << 
	gcuºítTe°RunInfo
->
	g«me


9782 << " i†®C©ch v" << 
	glibøryVîsi⁄
 << " hostápplication.\n"

9785 if–
	gm_c⁄fig
->
∫gSìd
() != 0 )

9786 
°ªam
 << "R™dom√s†£ededÅo: " << 
m_c⁄fig
->
∫gSìd
() << "\n\n";

9788 
	gcuºítTe°RunInfo
.
	gu£d
 = 
åue
;

9790 
œzyPrötGroupInfo
() {

9791 if–!
	gcuºítGroupInfo
->
	g«me
.
em±y
(Ë&& cuºítGroupInfo->
	ggroupsCou¡s
 > 1 ) {

9792 
¥ötClo£dHódî
–"Group: " + 
cuºítGroupInfo
->
«me
 );

9793 
	gcuºítGroupInfo
.
	gu£d
 = 
åue
;

9796 
¥ötTe°Ca£AndSe˘i⁄Hódî
() {

9797 
as£π
–!
m_£˘i⁄Sèck
.
em±y
() );

9798 
¥ötO≥nHódî
–
cuºítTe°Ca£Info
->
«me
 );

9800 if–
	gm_£˘i⁄Sèck
.
size
() > 1 ) {

9801 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Hódîs
 );

9803 
	g°d
::
ve˘‹
<
Se˘i⁄Info
>::
c⁄°_ôî©‹


9804 
ô
 = 
m_£˘i⁄Sèck
.
begö
()+1,

9805 
	gôEnd
 = 
m_£˘i⁄Sèck
.
íd
();

9806  ; 
	gô
 !
ôEnd
; ++it )

9807 
¥ötHódîSåög
–
ô
->
«me
, 2 );

9810 
Sour˚LöeInfo
 
	glöeInfo
 = 
m_£˘i⁄Sèck
.
‰⁄t
().
löeInfo
;

9812 if–!
	glöeInfo
.
em±y
() ){

9813 
	g°ªam
 << 
	ggëLöeOfCh¨s
<'-'>() << "\n";

9814 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
FûeName
 );

9815 
	g°ªam
 << 
	glöeInfo
 << "\n";

9817 
	g°ªam
 << 
	ggëLöeOfCh¨s
<'.'>(Ë<< "\n" << 
	g°d
::
ídl
;

9820 
¥ötClo£dHódî
–
°d
::
°rög
 c⁄°& 
_«me
 ) {

9821 
¥ötO≥nHódî
–
_«me
 );

9822 
	g°ªam
 << 
	ggëLöeOfCh¨s
<'.'>() << "\n";

9824 
¥ötO≥nHódî
–
°d
::
°rög
 c⁄°& 
_«me
 ) {

9825 
°ªam
 << 
gëLöeOfCh¨s
<'-'>() << "\n";

9827 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Hódîs
 );

9828 
¥ötHódîSåög
–
_«me
 );

9834 
¥ötHódîSåög
–
°d
::
°rög
 c⁄°& 
_°rög
, std::
size_t
 
ödít
 = 0 ) {

9835 
°d
::
size_t
 
i
 = 
_°rög
.
föd
( ": " );

9836 if–
	gi
 !
°d
::
°rög
::
≈os
 )

9837 
i
+=2;

9839 
	gi
 = 0;

9840 
	g°ªam
 << 
Text
–
_°rög
, 
TextAâribuãs
()

9841 .
£tIndít
–
ödít
+
i
)

9842 .
£tInôülIndít
–
ödít
 ) ) << "\n";

9845 
	sSumm¨yCﬁumn
 {

9847 
Summ¨yCﬁumn
–
°d
::
°rög
 c⁄°& 
_œbñ
, 
Cﬁour
::
Code
 
_cﬁour
 )

9848 : 
œbñ
–
_œbñ
 ),

9849 
cﬁour
–
_cﬁour
 )

9851 
Summ¨yCﬁumn
 
addRow
–
°d
::
size_t
 
cou¡
 ) {

9852 
°d
::
o°rög°ªam
 
oss
;

9853 
	goss
 << 
	gcou¡
;

9854 
	g°d
::
°rög
 
row
 = 
oss
.
°r
();

9855  
	g°d
::
ve˘‹
<
°d
::
°rög
>::
ôî©‹
 
ô
 = 
rows
.
begö
(); 
	gô
 !rows.
íd
(); ++it ) {

9856  
	gô
->
size
(Ë< 
	grow
.size() )

9857 *
	gô
 = " " + *
ô
;

9858  
	gô
->
size
(Ë> 
	grow
.size() )

9859 
	grow
 = " " + 
row
;

9861 
	grows
.
push_back
–
row
 );

9862  *
	gthis
;

9865 
	g°d
::
°rög
 
œbñ
;

9866 
	gCﬁour
::
Code
 
cﬁour
;

9867 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
rows
;

9871 
¥ötTŸÆs
–
TŸÆs
 c⁄°& 
tŸÆs
 ) {

9872 if–
	gtŸÆs
.
	gã°Ca£s
.
tŸÆ
() == 0 ) {

9873 
°ªam
 << 
Cﬁour
–Cﬁour::
W¨nög
 ) << "NoÅestsÑan\n";

9875 if–
	gtŸÆs
.
	gas£πi⁄s
.
tŸÆ
(Ë> 0 &&ÅŸÆs.
	gã°Ca£s
.
ÆlPas£d
() ) {

9876 
	g°ªam
 << 
Cﬁour
–Cﬁour::
Resu…Suc˚ss
 ) << "AllÅestsÖassed";

9877 
	g°ªam
 << " ("

9878 << 
∂uøli£
–
tŸÆs
.
as£πi⁄s
.
∑s£d
, "assertion" ) << " in "

9879 << 
∂uøli£
–
tŸÆs
.
ã°Ca£s
.
∑s£d
, "test case" ) << ")"

9884 
	g°d
::
ve˘‹
<
Summ¨yCﬁumn
> 
cﬁumns
;

9885 
	gcﬁumns
.
push_back
–
Summ¨yCﬁumn
–"", 
Cﬁour
::
N⁄e
 )

9886 .
addRow
–
tŸÆs
.
ã°Ca£s
.
tŸÆ
() )

9887 .
addRow
–
tŸÆs
.
as£πi⁄s
.
tŸÆ
() ) );

9888 
	gcﬁumns
.
push_back
–
Summ¨yCﬁumn
–"∑s£d", 
Cﬁour
::
Suc˚ss
 )

9889 .
addRow
–
tŸÆs
.
ã°Ca£s
.
∑s£d
 )

9890 .
addRow
–
tŸÆs
.
as£πi⁄s
.
∑s£d
 ) );

9891 
	gcﬁumns
.
push_back
–
Summ¨yCﬁumn
–"Áûed", 
Cﬁour
::
Resu…Eº‹
 )

9892 .
addRow
–
tŸÆs
.
ã°Ca£s
.
Áûed
 )

9893 .
addRow
–
tŸÆs
.
as£πi⁄s
.
Áûed
 ) );

9894 
	gcﬁumns
.
push_back
–
Summ¨yCﬁumn
–"Áûedá†ex≥˘ed", 
Cﬁour
::
Resu…Ex≥˘edFaûuª
 )

9895 .
addRow
–
tŸÆs
.
ã°Ca£s
.
ÁûedButOk
 )

9896 .
addRow
–
tŸÆs
.
as£πi⁄s
.
ÁûedButOk
 ) );

9898 
¥ötSumm¨yRow
–"ã° ca£s", 
cﬁumns
, 0 );

9899 
¥ötSumm¨yRow
–"as£πi⁄s", 
cﬁumns
, 1 );

9902 
¥ötSumm¨yRow
–
°d
::
°rög
 c⁄°& 
œbñ
, std::
ve˘‹
<
Summ¨yCﬁumn
> c⁄°& 
cﬁs
, std::
size_t
 
row
 ) {

9903  
°d
::
ve˘‹
<
Summ¨yCﬁumn
>::
c⁄°_ôî©‹
 
ô
 = 
cﬁs
.
begö
(); 
	gô
 !cﬁs.
íd
(); ++it ) {

9904 
	g°d
::
°rög
 
vÆue
 = 
ô
->
rows
[
row
];

9905 if–
	gô
->
	gœbñ
.
em±y
() ) {

9906 
	g°ªam
 << 
	gœbñ
 << ": ";

9907 if–
	gvÆue
 != "0" )

9908 
°ªam
 << 
vÆue
;

9910 
	g°ªam
 << 
Cﬁour
–Cﬁour::
W¨nög
 ) << "-Çone -";

9912 if–
	gvÆue
 != "0" ) {

9913 
°ªam
 << 
Cﬁour
–Cﬁour::
LightGªy
 ) << " | ";

9914 
	g°ªam
 << 
Cﬁour
–
ô
->
cﬁour
 )

9915 << 
	gvÆue
 << " " << 
	gô
->
	gœbñ
;

9918 
	g°ªam
 << "\n";

9921 
	g°d
::
size_t
 
makeR©io
–
°d
::size_à
numbî
, std::size_à
tŸÆ
 ) {

9922 
°d
::
size_t
 
øtio
 = 
tŸÆ
 > 0 ? 
CATCH_CONFIG_CONSOLE_WIDTH
 * 
numbî
/Åotal : 0;

9923  ( 
	gøtio
 =0 && 
numbî
 > 0 ) ? 1 : 
øtio
;

9925 
	g°d
::
size_t
& 
födMax
–
°d
::size_t& 
i
, std::size_t& 
j
, std::size_t& 
k
 ) {

9926 if–
i
 > 
j
 && i > 
k
 )

9927  
i
;

9928 if–
	gj
 > 
	gk
 )

9929  
	gj
;

9931  
	gk
;

9934 
¥ötTŸÆsDividî
–
TŸÆs
 c⁄°& 
tŸÆs
 ) {

9935 if–
	gtŸÆs
.
	gã°Ca£s
.
tŸÆ
() > 0 ) {

9936 
	g°d
::
size_t
 
ÁûedR©io
 = 
makeR©io
–
tŸÆs
.
ã°Ca£s
.
Áûed
,ÅŸÆs.ã°Ca£s.
tŸÆ
() );

9937 
	g°d
::
size_t
 
ÁûedButOkR©io
 = 
makeR©io
–
tŸÆs
.
ã°Ca£s
.
ÁûedButOk
,ÅŸÆs.ã°Ca£s.
tŸÆ
() );

9938 
	g°d
::
size_t
 
∑s£dR©io
 = 
makeR©io
–
tŸÆs
.
ã°Ca£s
.
∑s£d
,ÅŸÆs.ã°Ca£s.
tŸÆ
() );

9939  
	gÁûedR©io
 + 
	gÁûedButOkR©io
 + 
	g∑s£dR©io
 < 
	gCATCH_CONFIG_CONSOLE_WIDTH
-1 )

9940 
födMax
–
ÁûedR©io
, 
ÁûedButOkR©io
, 
∑s£dR©io
 )++;

9941  
	gÁûedR©io
 + 
	gÁûedButOkR©io
 + 
	g∑s£dR©io
 > 
	gCATCH_CONFIG_CONSOLE_WIDTH
-1 )

9942 
födMax
–
ÁûedR©io
, 
ÁûedButOkR©io
, 
∑s£dR©io
 )--;

9944 
	g°ªam
 << 
Cﬁour
–Cﬁour::
Eº‹
 ) << 
°d
::
°rög
–
ÁûedR©io
, '=' );

9945 
	g°ªam
 << 
Cﬁour
–Cﬁour::
Resu…Ex≥˘edFaûuª
 ) << 
°d
::
°rög
–
ÁûedButOkR©io
, '=' );

9946 if–
	gtŸÆs
.
	gã°Ca£s
.
ÆlPas£d
() )

9947 
	g°ªam
 << 
Cﬁour
–Cﬁour::
Resu…Suc˚ss
 ) << 
°d
::
°rög
–
∑s£dR©io
, '=' );

9949 
	g°ªam
 << 
Cﬁour
–Cﬁour::
Suc˚ss
 ) << 
°d
::
°rög
–
∑s£dR©io
, '=' );

9952 
	g°ªam
 << 
Cﬁour
–Cﬁour::
W¨nög
 ) << 
°d
::
°rög
–
CATCH_CONFIG_CONSOLE_WIDTH
-1, '=' );

9954 
	g°ªam
 << "\n";

9956 
¥ötSumm¨yDividî
() {

9957 
	g°ªam
 << 
	ggëLöeOfCh¨s
<'-'>() << "\n";

9960 
	g¥iv©e
:

9961 
boﬁ
 
m_hódîPröãd
;

9964 
INTERNAL_CATCH_REGISTER_REPORTER
–"c⁄sﬁe", 
C⁄sﬁeRï‹ãr
 )

9969 
	#TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED


	)

9971 
«me•a˚
 
	gC©ch
 {

9973 
	gCom∑˘Rï‹ãr
 : 
SåómögRï‹ãrBa£
 {

9975 
Com∑˘Rï‹ãr
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

9976 : 
SåómögRï‹ãrBa£
–
_c⁄fig
 )

9979 
vútuÆ
 ~
Com∑˘Rï‹ãr
();

9981 
	g°d
::
°rög
 
gëDes¸ùti⁄
() {

9985 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
() const {

9986 
Rï‹ãrPª„ªn˚s
 
	g¥efs
;

9987 
	g¥efs
.
	gshouldRedúe˘StdOut
 = 
Ál£
;

9988  
	g¥efs
;

9991 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) {

9992 
°ªam
 << "Nÿã° ca£†m©ched '" << 
•ec
 << "'" << 
°d
::
ídl
;

9995 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 const& ) {

9998 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
_as£πi⁄Sèts
 ) {

9999 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
 = 
_as£πi⁄Sèts
.
as£πi⁄Resu…
;

10001 
boﬁ
 
	g¥ötInfoMesßges
 = 
åue
;

10004 if–!
	gm_c⁄fig
->
ö˛udeSuc˚ssfulResu…s
(Ë&& 
	gªsu…
.
isOk
() ) {

10005 if–
	gªsu…
.
gëResu…Ty≥
(Ë!
Resu…Was
::
W¨nög
 )

10006  
Ál£
;

10007 
	g¥ötInfoMesßges
 = 
Ál£
;

10010 
As£πi⁄Pröãr
 
¥öãr
–
°ªam
, 
_as£πi⁄Sèts
, 
¥ötInfoMesßges
 );

10011 
	g¥öãr
.
¥öt
();

10013 
	g°ªam
 << 
	g°d
::
ídl
;

10014  
	gåue
;

10017 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
_ã°RunSèts
 ) {

10018 
¥ötTŸÆs
–
_ã°RunSèts
.
tŸÆs
 );

10019 
	g°ªam
 << "\n" << 
	g°d
::
ídl
;

10020 
	gSåómögRï‹ãrBa£
::
ã°RunEnded
–
_ã°RunSèts
 );

10023 
	g¥iv©e
:

10024 ˛as†
	cAs£πi⁄Pröãr
 {

10025 
›î©‹
–
As£πi⁄Pröãr
 const& );

10026 
	gpublic
:

10027 
As£πi⁄Pröãr
–
°d
::
o°ªam
& 
_°ªam
, 
As£πi⁄Sèts
 c⁄°& 
_°©s
, 
boﬁ
 
_¥ötInfoMesßges
 )

10028 : 
°ªam
–
_°ªam
 )

10029 , 
°©s
–
_°©s
 )

10030 , 
ªsu…
–
_°©s
.
as£πi⁄Resu…
 )

10031 , 
mesßges
–
_°©s
.
öfoMesßges
 )

10032 , 
ôMesßge
–
_°©s
.
öfoMesßges
.
begö
() )

10033 , 
¥ötInfoMesßges
–
_¥ötInfoMesßges
 )

10036 
¥öt
() {

10037 
¥ötSour˚Info
();

10039 
	gôMesßge
 = 
mesßges
.
begö
();

10041  
	gªsu…
.
gëResu…Ty≥
() ) {

10042 
	gResu…Was
::
Ok
:

10043 
¥ötResu…Ty≥
–
Cﬁour
::
Resu…Suc˚ss
, 
∑s£dSåög
() );

10044 
¥ötOrigöÆEx¥essi⁄
();

10045 
¥ötRec⁄°ru˘edEx¥essi⁄
();

10046 i‡–! 
	gªsu…
.
hasEx¥essi⁄
() )

10047 
¥ötRemaöögMesßges
–
Cﬁour
::
N⁄e
 );

10049 
¥ötRemaöögMesßges
();

10051 
	gResu…Was
::
Ex¥essi⁄Faûed
:

10052 if–
ªsu…
.
isOk
() )

10053 
¥ötResu…Ty≥
–
Cﬁour
::
Resu…Suc˚ss
, 
ÁûedSåög
(Ë+ 
°d
::
°rög
( " - but was ok" ) );

10055 
¥ötResu…Ty≥
–
Cﬁour
::
Eº‹
, 
ÁûedSåög
() );

10056 
¥ötOrigöÆEx¥essi⁄
();

10057 
¥ötRec⁄°ru˘edEx¥essi⁄
();

10058 
¥ötRemaöögMesßges
();

10060 
	gResu…Was
::
ThªwEx˚±i⁄
:

10061 
¥ötResu…Ty≥
–
Cﬁour
::
Eº‹
, 
ÁûedSåög
() );

10062 
¥ötIssue
( "unexpectedÉxception with message:" );

10063 
¥ötMesßge
();

10064 
¥ötEx¥essi⁄Was
();

10065 
¥ötRemaöögMesßges
();

10067 
	gResu…Was
::
F©ÆEº‹C⁄dôi⁄
:

10068 
¥ötResu…Ty≥
–
Cﬁour
::
Eº‹
, 
ÁûedSåög
() );

10069 
¥ötIssue
( "fatalÉrror condition with message:" );

10070 
¥ötMesßge
();

10071 
¥ötEx¥essi⁄Was
();

10072 
¥ötRemaöögMesßges
();

10074 
	gResu…Was
::
Did¡ThrowEx˚±i⁄
:

10075 
¥ötResu…Ty≥
–
Cﬁour
::
Eº‹
, 
ÁûedSåög
() );

10076 
¥ötIssue
( "expectedÉxception, gotÇone" );

10077 
¥ötEx¥essi⁄Was
();

10078 
¥ötRemaöögMesßges
();

10080 
	gResu…Was
::
Info
:

10081 
¥ötResu…Ty≥
–
Cﬁour
::
N⁄e
, "info" );

10082 
¥ötMesßge
();

10083 
¥ötRemaöögMesßges
();

10085 
	gResu…Was
::
W¨nög
:

10086 
¥ötResu…Ty≥
–
Cﬁour
::
N⁄e
, "warning" );

10087 
¥ötMesßge
();

10088 
¥ötRemaöögMesßges
();

10090 
	gResu…Was
::
Ex∂icôFaûuª
:

10091 
¥ötResu…Ty≥
–
Cﬁour
::
Eº‹
, 
ÁûedSåög
() );

10092 
¥ötIssue
( "explicitly" );

10093 
¥ötRemaöögMesßges
–
Cﬁour
::
N⁄e
 );

10096 
	gResu…Was
::
Unknown
:

10097 
Resu…Was
::
FaûuªBô
:

10098 
Resu…Was
::
Ex˚±i⁄
:

10099 
¥ötResu…Ty≥
–
Cﬁour
::
Eº‹
, "** internalÉrror **" );

10104 
	g¥iv©e
:

10107 
Cﬁour
::
Code
 
dimCﬁour
(Ë{  Cﬁour::
FûeName
; }

10109 #ifde‡
CATCH_PLATFORM_MAC


10110 c⁄° * 
ÁûedSåög
() {  "FAILED"; }

10111 c⁄° * 
∑s£dSåög
() {  "PASSED"; }

10113 c⁄° * 
ÁûedSåög
() {  "failed"; }

10114 c⁄° * 
∑s£dSåög
() {  "passed"; }

10117 
¥ötSour˚Info
() const {

10118 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
FûeName
 );

10119 
	g°ªam
 << 
	gªsu…
.
gëSour˚Info
() << ":";

10122 
¥ötResu…Ty≥
–
Cﬁour
::
Code
 
cﬁour
, 
°d
::
°rög
 
∑ssOrFaû
 ) const {

10123 if–!
∑ssOrFaû
.
em±y
() ) {

10125 
Cﬁour
 
cﬁourGu¨d
–
cﬁour
 );

10126 
	g°ªam
 << " " << 
	g∑ssOrFaû
;

10128 
	g°ªam
 << ":";

10132 
¥ötIssue
–
°d
::
°rög
 
issue
 ) const {

10133 
°ªam
 << " " << 
issue
;

10136 
¥ötEx¥essi⁄Was
() {

10137 if–
	gªsu…
.
hasEx¥essi⁄
() ) {

10138 
	g°ªam
 << ";";

10140 
Cﬁour
 
cﬁour
–
dimCﬁour
() );

10141 
	g°ªam
 << "Éxpression was:";

10143 
¥ötOrigöÆEx¥essi⁄
();

10147 
¥ötOrigöÆEx¥essi⁄
() const {

10148 if–
	gªsu…
.
hasEx¥essi⁄
() ) {

10149 
	g°ªam
 << " " << 
	gªsu…
.
gëEx¥essi⁄
();

10153 
¥ötRec⁄°ru˘edEx¥essi⁄
() const {

10154 if–
	gªsu…
.
hasEx∑ndedEx¥essi⁄
() ) {

10156 
Cﬁour
 
cﬁour
–
dimCﬁour
() );

10157 
	g°ªam
 << " for: ";

10159 
	g°ªam
 << 
	gªsu…
.
gëEx∑ndedEx¥essi⁄
();

10163 
¥ötMesßge
() {

10164 i‡–
	gôMesßge
 !
mesßges
.
íd
() ) {

10165 
°ªam
 << " '" << 
ôMesßge
->
mesßge
 << "'";

10166 ++
	gôMesßge
;

10170 
¥ötRemaöögMesßges
–
Cﬁour
::
Code
 
cﬁour
 = 
dimCﬁour
() ) {

10171 i‡–
ôMesßge
 =
mesßges
.
íd
() )

10175 
	g°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ôEnd
 = 
mesßges
.
íd
();

10176 c⁄° 
	g°d
::
size_t
 
N
 = 
°©ic_ˇ°
<
°d
::size_t>–°d::
di°™˚
–
ôMesßge
, 
ôEnd
 ) );

10179 
Cﬁour
 
cﬁourGu¨d
–
cﬁour
 );

10180 
	g°ªam
 << " wôh " << 
∂uøli£
–
N
, "message" ) << ":";

10183 ; 
	gôMesßge
 !
ôEnd
; ) {

10185 if–
	g¥ötInfoMesßges
 || 
	gôMesßge
->
	gty≥
 !
Resu…Was
::
Info
 ) {

10186 
°ªam
 << " '" << 
ôMesßge
->
mesßge
 << "'";

10187 i‡–++
	gôMesßge
 !
ôEnd
 ) {

10188 
Cﬁour
 
cﬁourGu¨d
–
dimCﬁour
() );

10189 
	g°ªam
 << "ánd";

10195 
	g¥iv©e
:

10196 
°d
::
o°ªam
& 
°ªam
;

10197 
As£πi⁄Sèts
 c⁄°& 
	g°©s
;

10198 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
;

10199 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
mesßges
;

10200 
	g°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ôMesßge
;

10201 
boﬁ
 
	g¥ötInfoMesßges
;

10211 
	g°d
::
°rög
 
bŸhOrAŒ
–
°d
::
size_t
 
cou¡
 ) const {

10212  
cou¡
 == 1 ? "" : count == 2 ? "both " : "all " ;

10215 
¥ötTŸÆs
–c⁄° 
TŸÆs
& 
tŸÆs
 ) const {

10216 if–
	gtŸÆs
.
	gã°Ca£s
.
tŸÆ
() == 0 ) {

10217 
°ªam
 << "NoÅestsÑan.";

10219 if–
	gtŸÆs
.
	gã°Ca£s
.
	gÁûed
 =
tŸÆs
.
ã°Ca£s
.
tŸÆ
() ) {

10220 
Cﬁour
 
cﬁour
–Cﬁour::
Resu…Eº‹
 );

10221 c⁄° 
	g°d
::
°rög
 
quÆify_as£πi⁄s_Áûed
 =

10222 
tŸÆs
.
as£πi⁄s
.
Áûed
 =tŸÆs.as£πi⁄s.
tŸÆ
() ?

10223 
bŸhOrAŒ
–
tŸÆs
.
as£πi⁄s
.
Áûed
 ) : "";

10224 
	g°ªam
 <<

10225 "Faûed " << 
bŸhOrAŒ
–
tŸÆs
.
ã°Ca£s
.
Áûed
 )

10226 << 
∂uøli£
–
tŸÆs
.
ã°Ca£s
.
Áûed
, "test case" ) << ", "

10227 "Áûed " << 
	gquÆify_as£πi⁄s_Áûed
 <<

10228 
∂uøli£
–
tŸÆs
.
as£πi⁄s
.
Áûed
, "assertion" ) << ".";

10230 if–
	gtŸÆs
.
	gas£πi⁄s
.
tŸÆ
() == 0 ) {

10231 
°ªam
 <<

10232 "Pas£d " << 
bŸhOrAŒ
–
tŸÆs
.
ã°Ca£s
.
tŸÆ
() )

10233 << 
∂uøli£
–
tŸÆs
.
ã°Ca£s
.
tŸÆ
(), "test case" )

10236 if–
	gtŸÆs
.
	gas£πi⁄s
.
	gÁûed
 ) {

10237 
Cﬁour
 
cﬁour
–Cﬁour::
Resu…Eº‹
 );

10238 
	g°ªam
 <<

10239 "Faûed " << 
∂uøli£
–
tŸÆs
.
ã°Ca£s
.
Áûed
, "test case" ) << ", "

10240 "Áûed " << 
∂uøli£
–
tŸÆs
.
as£πi⁄s
.
Áûed
, "assertion" ) << ".";

10243 
Cﬁour
 
cﬁour
–Cﬁour::
Resu…Suc˚ss
 );

10244 
	g°ªam
 <<

10245 "Pas£d " << 
bŸhOrAŒ
–
tŸÆs
.
ã°Ca£s
.
∑s£d
 )

10246 << 
∂uøli£
–
tŸÆs
.
ã°Ca£s
.
∑s£d
, "test case" ) <<

10247 " wôh " << 
∂uøli£
–
tŸÆs
.
as£πi⁄s
.
∑s£d
, "assertion" ) << ".";

10252 
INTERNAL_CATCH_REGISTER_REPORTER
–"com∑˘", 
Com∑˘Rï‹ãr
 )

10256 
«me•a˚
 
	gC©ch
 {

10259 
	gN⁄C›yabÀ
::~
N⁄C›yabÀ
() {}

10260 
ISh¨ed
::~IShared() {}

10261 
ISåóm
::~ISåóm(Ë
CATCH_NOEXCEPT
 {}

10262 
FûeSåóm
::~FûeSåóm(Ë
CATCH_NOEXCEPT
 {}

10263 
CoutSåóm
::~CoutSåóm(Ë
CATCH_NOEXCEPT
 {}

10264 
DebugOutSåóm
::~DebugOutSåóm(Ë
CATCH_NOEXCEPT
 {}

10265 
SåómBufBa£
::~SåómBufBa£(Ë
CATCH_NOEXCEPT
 {}

10266 
IC⁄ãxt
::~IContext() {}

10267 
IResu…C≠tuª
::~IResultCapture() {}

10268 
ITe°Ca£
::~ITestCase() {}

10269 
ITe°Ca£Regi°ry
::~ITestCaseRegistry() {}

10270 
IRegi°ryHub
::~IRegistryHub() {}

10271 
IMuèbÀRegi°ryHub
::~IMutableRegistryHub() {}

10272 
IEx˚±i⁄Tøn¶©‹
::~IExceptionTranslator() {}

10273 
IEx˚±i⁄Tøn¶©‹Regi°ry
::~IExceptionTranslatorRegistry() {}

10274 
IRï‹ãr
::~IReporter() {}

10275 
IRï‹ãrFa˘‹y
::~IReporterFactory() {}

10276 
IRï‹ãrRegi°ry
::~IReporterRegistry() {}

10277 
ISåómögRï‹ãr
::~IStreamingReporter() {}

10278 
As£πi⁄Sèts
::~AssertionStats() {}

10279 
Se˘i⁄Sèts
::~SectionStats() {}

10280 
Te°Ca£Sèts
::~TestCaseStats() {}

10281 
Te°GroupSèts
::~TestGroupStats() {}

10282 
Te°RunSèts
::~TestRunStats() {}

10283 
CumuœtiveRï‹ãrBa£
::
Se˘i⁄Node
::~SectionNode() {}

10284 
CumuœtiveRï‹ãrBa£
::~CumulativeReporterBase() {}

10286 
SåómögRï‹ãrBa£
::~StreamingReporterBase() {}

10287 
C⁄sﬁeRï‹ãr
::~ConsoleReporter() {}

10288 
Com∑˘Rï‹ãr
::~CompactReporter() {}

10289 
IRu¬î
::~IRunner() {}

10290 
IMuèbÀC⁄ãxt
::~IMutableContext() {}

10291 
IC⁄fig
::~IConfig() {}

10292 
XmlRï‹ãr
::~XmlReporter() {}

10293 
JunôRï‹ãr
::~JunitReporter() {}

10294 
Te°Regi°ry
::~TestRegistry() {}

10295 
FªeFun˘i⁄Te°Ca£
::~FreeFunctionTestCase() {}

10296 
IGíî©‹Info
::~IGeneratorInfo() {}

10297 
IGíî©‹sF‹Te°
::~IGeneratorsForTest() {}

10298 
WûdˇrdP©ã∫
::~WildcardPattern() {}

10299 
Te°S≥c
::
P©ã∫
::~Pattern() {}

10300 
Te°S≥c
::
NameP©ã∫
::~NamePattern() {}

10301 
Te°S≥c
::
TagP©ã∫
::~TagPattern() {}

10302 
Te°S≥c
::
Ex˛udedP©ã∫
::~ExcludedPattern() {}

10304 
M©chîs
::
Im∂
::
StdSåög
::
EquÆs
::~Equals() {}

10305 
M©chîs
::
Im∂
::
StdSåög
::
C⁄èös
::~Contains() {}

10306 
M©chîs
::
Im∂
::
StdSåög
::
SèπsWôh
::~StartsWith() {}

10307 
M©chîs
::
Im∂
::
StdSåög
::
EndsWôh
::~EndsWith() {}

10309 
C⁄fig
::
dummy
() {}

10311 
«me•a˚
 
Te°Ca£Tøckög
 {

10312 
ITøckî
::~ITracker() {}

10313 
TøckîBa£
::~TrackerBase() {}

10314 
Se˘i⁄Tøckî
::~SectionTracker() {}

10315 
IndexTøckî
::~IndexTracker() {}

10319 #ifde‡
__˛™g__


10320 #¥agm®
˛™g
 
dügno°ic
 
p›


10325 #ifde‡
CATCH_CONFIG_MAIN


10327 
	#TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED


	)

10329 #i‚de‡
__OBJC__


10332 
	$maö
 (
¨gc
, * 
¨gv
[]) {

10333  
C©ch
::
	`Sessi⁄
().
	`run
–
¨gc
, 
¨gv
 );

10334 
	}
}

10339 
	$maö
 (
¨gc
, * c⁄° 
¨gv
[]) {

10340 #i‡!
CATCH_ARC_ENABLED


10341 
NSAut‹ñó£Poﬁ
 * 
poﬁ
 = [[NSAut‹ñó£Poﬁ 
Æloc
] 
öô
];

10344 
C©ch
::
	`ªgi°îTe°Mëhods
();

10345 
ªsu…
 = 
C©ch
::
	`Sessi⁄
().
	`run
–
¨gc
, (* c⁄°*)
¨gv
 );

10347 #i‡!
CATCH_ARC_ENABLED


10348 [
poﬁ
 
døö
];

10351  
ªsu…
;

10352 
	}
}

10358 #ifde‡
CLARA_CONFIG_MAIN_NOT_DEFINED


10359 #unde‡
CLARA_CONFIG_MAIN


10365 #ifde‡
CATCH_CONFIG_PREFIX_ALL


10367 
	#CATCH_REQUIRE
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "CATCH_REQUIRE" )

	)

10368 
	#CATCH_REQUIRE_FALSE
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, "CATCH_REQUIRE_FALSE" )

	)

10370 
	#CATCH_REQUIRE_THROWS
–
ex¥
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "", "CATCH_REQUIRE_THROWS" )

	)

10371 
	#CATCH_REQUIRE_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–ex¥,Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "CATCH_REQUIRE_THROWS_AS" )

	)

10372 
	#CATCH_REQUIRE_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, m©chî, "CATCH_REQUIRE_THROWS_WITH" )

	)

10373 
	#CATCH_REQUIRE_NOTHROW
–
ex¥
 ) 
	`INTERNAL_CATCH_NO_THROW
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "CATCH_REQUIRE_NOTHROW" )

	)

10375 
	#CATCH_CHECK
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECK" )

	)

10376 
	#CATCH_CHECK_FALSE
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, "CATCH_CHECK_FALSE" )

	)

10377 
	#CATCH_CHECKED_IF
–
ex¥
 ) 
	`INTERNAL_CATCH_IF
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECKED_IF" )

	)

10378 
	#CATCH_CHECKED_ELSE
–
ex¥
 ) 
	`INTERNAL_CATCH_ELSE
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECKED_ELSE" )

	)

10379 
	#CATCH_CHECK_NOFAIL
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
SuµªssFaû
, "CATCH_CHECK_NOFAIL" )

	)

10381 
	#CATCH_CHECK_THROWS
–
ex¥
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECK_THROWS" )

	)

10382 
	#CATCH_CHECK_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–ex¥,Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECK_THROWS_AS" )

	)

10383 
	#CATCH_CHECK_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, m©chî, "CATCH_CHECK_THROWS_WITH" )

	)

10384 
	#CATCH_CHECK_NOTHROW
–
ex¥
 ) 
	`INTERNAL_CATCH_NO_THROW
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECK_NOTHROW" )

	)

10386 
	#CHECK_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–¨g, m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_CHECK_THAT" )

	)

10387 
	#CATCH_REQUIRE_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–¨g, m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "CATCH_REQUIRE_THAT" )

	)

10389 
	#CATCH_INFO
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–msg, "CATCH_INFO" )

	)

10390 
	#CATCH_WARN
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
W¨nög
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_WARN", msg )

	)

10391 
	#CATCH_SCOPED_INFO
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–msg, "CATCH_INFO" )

	)

10392 
	#CATCH_CAPTURE
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–#msg " :" << msg, "CATCH_CAPTURE" )

	)

10393 
	#CATCH_SCOPED_CAPTURE
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–#msg " :" << msg, "CATCH_CAPTURE" )

	)

10395 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


10396 
	#CATCH_TEST_CASE
–... ) 
	`INTERNAL_CATCH_TESTCASE
–
__VA_ARGS__
 )

	)

10397 
	#CATCH_TEST_CASE_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, 
__VA_ARGS__
 )

	)

10398 
	#CATCH_METHOD_AS_TEST_CASE
–
mëhod
, ... ) 
	`INTERNAL_CATCH_METHOD_AS_TEST_CASE
–mëhod, 
__VA_ARGS__
 )

	)

10399 
	#CATCH_REGISTER_TEST_CASE
–
Fun˘i⁄
, ... ) 
	`INTERNAL_CATCH_REGISTER_TESTCASE
–Fun˘i⁄, 
__VA_ARGS__
 )

	)

10400 
	#CATCH_SECTION
–... ) 
	`INTERNAL_CATCH_SECTION
–
__VA_ARGS__
 )

	)

10401 
	#CATCH_FAIL
–... ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
N‹mÆ
, "CATCH_FAIL", 
__VA_ARGS__
 )

	)

10402 
	#CATCH_SUCCEED
–... ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ok
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_SUCCEED", 
__VA_ARGS__
 )

	)

10404 
	#CATCH_TEST_CASE
–
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_TESTCASE
–«me, des¸ùti⁄ )

	)

10405 
	#CATCH_TEST_CASE_METHOD
–
˛assName
, 
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName,Çame, des¸ùti⁄ )

	)

10406 
	#CATCH_METHOD_AS_TEST_CASE
–
mëhod
, 
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_METHOD_AS_TEST_CASE
–mëhod,Çame, des¸ùti⁄ )

	)

10407 
	#CATCH_REGISTER_TEST_CASE
–
fun˘i⁄
, 
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_REGISTER_TESTCASE
–fun˘i⁄,Çame, des¸ùti⁄ )

	)

10408 
	#CATCH_SECTION
–
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_SECTION
–«me, des¸ùti⁄ )

	)

10409 
	#CATCH_FAIL
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
N‹mÆ
, "CATCH_FAIL", msg )

	)

10410 
	#CATCH_SUCCEED
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ok
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CATCH_SUCCEED", msg )

	)

10412 
	#CATCH_ANON_TEST_CASE
(Ë
	`INTERNAL_CATCH_TESTCASE
–"", "" )

	)

10414 
	#CATCH_REGISTER_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) 
	`INTERNAL_CATCH_REGISTER_REPORTER
–«me,Ñï‹ãrTy≥ )

	)

10415 
	#CATCH_REGISTER_LEGACY_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) 
	`INTERNAL_CATCH_REGISTER_LEGACY_REPORTER
–«me,Ñï‹ãrTy≥ )

	)

10417 
	#CATCH_GENERATE
–
ex¥
Ë
	`INTERNAL_CATCH_GENERATE
–ex¥ )

	)

10420 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


10421 
	#CATCH_SCENARIO
–... ) 
	`CATCH_TEST_CASE
–"S˚«rio: " 
__VA_ARGS__
 )

	)

10422 
	#CATCH_SCENARIO_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, "S˚«rio: " 
__VA_ARGS__
 )

	)

10424 
	#CATCH_SCENARIO
–
«me
, 
ègs
 ) 
	`CATCH_TEST_CASE
–"S˚«rio: "Çame,Åag†)

	)

10425 
	#CATCH_SCENARIO_METHOD
–
˛assName
, 
«me
, 
ègs
 ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, "S˚«rio: "Çame,Åag†)

	)

10427 
	#CATCH_GIVEN
–
desc
 ) 
	`CATCH_SECTION
–
°d
::
	`°rög
–"Giví: "Ë+ desc, "" )

	)

10428 
	#CATCH_WHEN
–
desc
 ) 
	`CATCH_SECTION
–
°d
::
	`°rög
–" Whí: "Ë+ desc, "" )

	)

10429 
	#CATCH_AND_WHEN
–
desc
 ) 
	`CATCH_SECTION
–
°d
::
	`°rög
–" And: "Ë+ desc, "" )

	)

10430 
	#CATCH_THEN
–
desc
 ) 
	`CATCH_SECTION
–
°d
::
	`°rög
–" Thí: "Ë+ desc, "" )

	)

10431 
	#CATCH_AND_THEN
–
desc
 ) 
	`CATCH_SECTION
–
°d
::
	`°rög
–" And: "Ë+ desc, "" )

	)

10436 
	#REQUIRE
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "REQUIRE" )

	)

10437 
	#REQUIRE_FALSE
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, "REQUIRE_FALSE" )

	)

10439 
	#REQUIRE_THROWS
–
ex¥
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "", "REQUIRE_THROWS" )

	)

10440 
	#REQUIRE_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–ex¥,Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "REQUIRE_THROWS_AS" )

	)

10441 
	#REQUIRE_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, m©chî, "REQUIRE_THROWS_WITH" )

	)

10442 
	#REQUIRE_NOTHROW
–
ex¥
 ) 
	`INTERNAL_CATCH_NO_THROW
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "REQUIRE_NOTHROW" )

	)

10444 
	#CHECK
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CHECK" )

	)

10445 
	#CHECK_FALSE
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, "CHECK_FALSE" )

	)

10446 
	#CHECKED_IF
–
ex¥
 ) 
	`INTERNAL_CATCH_IF
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CHECKED_IF" )

	)

10447 
	#CHECKED_ELSE
–
ex¥
 ) 
	`INTERNAL_CATCH_ELSE
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CHECKED_ELSE" )

	)

10448 
	#CHECK_NOFAIL
–
ex¥
 ) 
	`INTERNAL_CATCH_TEST
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
SuµªssFaû
, "CHECK_NOFAIL" )

	)

10450 
	#CHECK_THROWS
–
ex¥
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "", "CHECK_THROWS" )

	)

10451 
	#CHECK_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–ex¥,Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CHECK_THROWS_AS" )

	)

10452 
	#CHECK_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, m©chî, "CHECK_THROWS_WITH" )

	)

10453 
	#CHECK_NOTHROW
–
ex¥
 ) 
	`INTERNAL_CATCH_NO_THROW
–ex¥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CHECK_NOTHROW" )

	)

10455 
	#CHECK_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–¨g, m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "CHECK_THAT" )

	)

10456 
	#REQUIRE_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–¨g, m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "REQUIRE_THAT" )

	)

10458 
	#INFO
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–msg, "INFO" )

	)

10459 
	#WARN
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
W¨nög
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "WARN", msg )

	)

10460 
	#SCOPED_INFO
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–msg, "INFO" )

	)

10461 
	#CAPTURE
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–#msg " :" << msg, "CAPTURE" )

	)

10462 
	#SCOPED_CAPTURE
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–#msg " :" << msg, "CAPTURE" )

	)

10464 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


10465 
	#TEST_CASE
–... ) 
	`INTERNAL_CATCH_TESTCASE
–
__VA_ARGS__
 )

	)

10466 
	#TEST_CASE_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, 
__VA_ARGS__
 )

	)

10467 
	#METHOD_AS_TEST_CASE
–
mëhod
, ... ) 
	`INTERNAL_CATCH_METHOD_AS_TEST_CASE
–mëhod, 
__VA_ARGS__
 )

	)

10468 
	#REGISTER_TEST_CASE
–
Fun˘i⁄
, ... ) 
	`INTERNAL_CATCH_REGISTER_TESTCASE
–Fun˘i⁄, 
__VA_ARGS__
 )

	)

10469 
	#SECTION
–... ) 
	`INTERNAL_CATCH_SECTION
–
__VA_ARGS__
 )

	)

10470 
	#FAIL
–... ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
N‹mÆ
, "FAIL", 
__VA_ARGS__
 )

	)

10471 
	#SUCCEED
–... ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ok
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "SUCCEED", 
__VA_ARGS__
 )

	)

10473 
	#TEST_CASE
–
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_TESTCASE
–«me, des¸ùti⁄ )

	)

10474 
	#TEST_CASE_METHOD
–
˛assName
, 
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName,Çame, des¸ùti⁄ )

	)

10475 
	#METHOD_AS_TEST_CASE
–
mëhod
, 
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_METHOD_AS_TEST_CASE
–mëhod,Çame, des¸ùti⁄ )

	)

10476 
	#REGISTER_TEST_CASE
–
mëhod
, 
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_REGISTER_TESTCASE
–mëhod,Çame, des¸ùti⁄ )

	)

10477 
	#SECTION
–
«me
, 
des¸ùti⁄
 ) 
	`INTERNAL_CATCH_SECTION
–«me, des¸ùti⁄ )

	)

10478 
	#FAIL
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
N‹mÆ
, "FAIL", msg )

	)

10479 
	#SUCCEED
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–
C©ch
::
Resu…Was
::
Ok
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "SUCCEED", msg )

	)

10481 
	#ANON_TEST_CASE
(Ë
	`INTERNAL_CATCH_TESTCASE
–"", "" )

	)

10483 
	#REGISTER_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) 
	`INTERNAL_CATCH_REGISTER_REPORTER
–«me,Ñï‹ãrTy≥ )

	)

10484 
	#REGISTER_LEGACY_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) 
	`INTERNAL_CATCH_REGISTER_LEGACY_REPORTER
–«me,Ñï‹ãrTy≥ )

	)

10486 
	#GENERATE
–
ex¥
Ë
	`INTERNAL_CATCH_GENERATE
–ex¥ )

	)

10490 
	#CATCH_TRANSLATE_EXCEPTION
–
sig«tuª
 ) 
	`INTERNAL_CATCH_TRANSLATE_EXCEPTION
–sig«tuª )

	)

10493 #ifde‡
CATCH_CONFIG_VARIADIC_MACROS


10494 
	#SCENARIO
–... ) 
	`TEST_CASE
–"S˚«rio: " 
__VA_ARGS__
 )

	)

10495 
	#SCENARIO_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, "S˚«rio: " 
__VA_ARGS__
 )

	)

10497 
	#SCENARIO
–
«me
, 
ègs
 ) 
	`TEST_CASE
–"S˚«rio: "Çame,Åag†)

	)

10498 
	#SCENARIO_METHOD
–
˛assName
, 
«me
, 
ègs
 ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, "S˚«rio: "Çame,Åag†)

	)

10500 
	#GIVEN
–
desc
 ) 
	`SECTION
–
°d
::
	`°rög
(" Giví: "Ë+ desc, "" )

	)

10501 
	#WHEN
–
desc
 ) 
	`SECTION
–
°d
::
	`°rög
(" Whí: "Ë+ desc, "" )

	)

10502 
	#AND_WHEN
–
desc
 ) 
	`SECTION
–
°d
::
	`°rög
("And whí: "Ë+ desc, "" )

	)

10503 
	#THEN
–
desc
 ) 
	`SECTION
–
°d
::
	`°rög
(" Thí: "Ë+ desc, "" )

	)

10504 
	#AND_THEN
–
desc
 ) 
	`SECTION
–
°d
::
	`°rög
(" And: "Ë+ desc, "" )

	)

10506 
usög
 
	gC©ch
::
Dëaû
::
Aµrox
;

	@containers.cpp

1 
	~<°rög
>

3 
	~"shu¡ög-y¨d.h
"

5 
	~"c⁄èöîs.h
"

6 
	~"fun˘i⁄s.h
"

16 
	gTokíM≠
& TokíM≠::
	$ba£_m≠
() {

17 
TokíM≠
 
	`_ba£_m≠
(0);

18  
_ba£_m≠
;

19 
	}
}

21 
	gTokíM≠
& TokíM≠::
	$deÁu…_globÆ
() {

22 
TokíM≠
 
	`globÆ_m≠
(
	`ba£_m≠
());

23  
globÆ_m≠
;

24 
	}
}

26 
∑ckTokí
 
	gTokíM≠
::
	$deÁu…_c⁄°ru˘‹
(
TokíM≠
 
sc›e
) {

27  
sc›e
["kwargs"];

28 
	}
}

30 
TokíM≠
 
	gTokíM≠
::
em±y
 = TokíM≠(&
deÁu…_globÆ
());

35 
Iãøt‹
* 
	gIãøt‹
::
	$gëIãøt‹
() const {

36  
°©ic_ˇ°
<
Iãøt‹
*>(
this
->
	`˛⁄e
());

37 
	}
}

41 
∑ckTokí
* 
	gTokíM≠
::
M≠Iãøt‹
::
	$√xt
() {

42 i‡(
ô
 !
m≠
.
	`íd
()) {

43 
œ°
 = 
	`∑ckTokí
(
ô
->
fú°
);

44 ++
ô
;

45  &
œ°
;

47 
ô
 = 
m≠
.
	`begö
();

48  
NULL
;

50 
	}
}

52 
	gTokíM≠
::
M≠Iãøt‹
::
	$ª£t
(Ë{ 
ô
 = 
m≠
.
	`begö
(); 
	}
}

56 
∑ckTokí
 
	gTokíLi°
::
	$deÁu…_c⁄°ru˘‹
(
TokíM≠
 
sc›e
) {

58 
TokíLi°
 
li°
 = 
sc›e
["¨gs"].
	`asLi°
();

61 i‡(
li°
.
	`li°
().
	`size
(Ë=1 &&Üi°.li°()[0]->
ty≥
 & 
IT
) {

62 
TokíLi°
 
√w_li°
;

63 
Iãøt‹
* 
ô
 = 
°©ic_ˇ°
<
IãøbÀ
*>(
li°
.
	`li°
()[0].
	`tokí
())->
	`gëIãøt‹
();

65 
∑ckTokí
* 
√xt
 = 
ô
->
	`√xt
();

66 
√xt
) {

67 
√w_li°
.
	`li°
().
	`push_back
(*
√xt
);

68 
√xt
 = 
ô
->
	`√xt
();

71 
dñëe
 
ô
;

72  
√w_li°
;

74  
li°
;

76 
	}
}

80 
∑ckTokí
* 
	gTokíLi°
::
Li°Iãøt‹
::
	$√xt
() {

81 i‡(
i
 < 
li°
->
	`size
()) {

82  &
li°
->
	`©
(
i
++);

84 
i
 = 0;

85  
NULL
;

87 
	}
}

89 
	gTokíLi°
::
Li°Iãøt‹
::
	$ª£t
(Ë{ 
i
 = 0; 
	}
}

93 
	gM≠D©a_t
::
	$M≠D©a_t
(
TokíM≠
* 
p
Ë: 
	`∑ª¡
’ ? 
√w
 
	$TokíM≠
(*
p
Ë: 0Ë{
	}
}

94 
M≠D©a_t
::
	$M≠D©a_t
(c⁄° 
M≠D©a_t
& 
Ÿhî
) {

95 
m≠
 = 
Ÿhî
.map;

96 i‡(
Ÿhî
.
∑ª¡
) {

97 
∑ª¡
 = 
√w
 
	`TokíM≠
(*(
Ÿhî
.parent));

99 
∑ª¡
 = 0;

101 
	}
}

102 
	gM≠D©a_t
::~
	$M≠D©a_t
(Ë{ i‡(
∑ª¡
Ë
dñëe
Ö¨ít; 
	}
}

104 
	gM≠D©a_t
& M≠D©a_t::
›î©‹
=(c⁄° 
M≠D©a_t
& 
Ÿhî
) {

105 i‡(
this
 !&
Ÿhî
) {

106 i‡(
∑ª¡
Ë
dñëe
Öarent;

107 
	gm≠
 = 
Ÿhî
.
m≠
;

108 
	g∑ª¡
 = 
Ÿhî
.
∑ª¡
;

110  *
	gthis
;

115 
∑ckTokí
* 
	gTokíM≠
::
	$föd
(c⁄° 
°d
::
°rög
& 
key
) {

116 
TokíM≠_t
::
ôî©‹
 
ô
 = 
	`m≠
().
	`föd
(
key
);

118 i‡(
ô
 !
	`m≠
().
	`íd
()) {

119  &
ô
->
£c⁄d
;

120 } i‡(
	`∑ª¡
()) {

121  
	`∑ª¡
()->
	`föd
(
key
);

125 
	}
}

127 c⁄° 
∑ckTokí
* 
	gTokíM≠
::
	$föd
(c⁄° 
°d
::
°rög
& 
key
) const {

128 
TokíM≠_t
::
c⁄°_ôî©‹
 
ô
 = 
	`m≠
().
	`föd
(
key
);

130 i‡(
ô
 !
	`m≠
().
	`íd
()) {

131  &
ô
->
£c⁄d
;

132 } i‡(
	`∑ª¡
()) {

133  
	`∑ª¡
()->
	`föd
(
key
);

137 
	}
}

139 
TokíM≠
* 
	gTokíM≠
::
	$födM≠
(c⁄° 
°d
::
°rög
& 
key
) {

140 
TokíM≠_t
::
ôî©‹
 
ô
 = 
	`m≠
().
	`föd
(
key
);

142 i‡(
ô
 !
	`m≠
().
	`íd
()) {

143  
this
;

144 } i‡(
	`∑ª¡
()) {

145  
	`∑ª¡
()->
	`födM≠
(
key
);

149 
	}
}

151 
	gTokíM≠
::
	$assign
(
°d
::
°rög
 
key
, 
TokíBa£
* 
vÆue
) {

152 i‡(
vÆue
) {

153 
vÆue
 = vÆue->
	`˛⁄e
();

155 
throw
 
°d
::
	`övÆid_¨gumít
("TokenMapássignmentÉxpectedáÇon NULLárgumentás value!");

158 
∑ckTokí
* 
v¨übÀ
 = 
	`föd
(
key
);

160 i‡(
v¨übÀ
) {

161 (*
v¨übÀ
Ë
	`∑ckTokí
(
vÆue
);

163 
	`m≠
()[
key
] = 
	`∑ckTokí
(
vÆue
);

165 
	}
}

167 
	gTokíM≠
::
	$ö£π
(
°d
::
°rög
 
key
, 
TokíBa£
* 
vÆue
) {

168 (*
this
)[
key
] = 
	`∑ckTokí
(
vÆue
->
	`˛⁄e
());

169 
	}
}

171 
	g∑ckTokí
& 
	gTokíM≠
::
›î©‹
[](c⁄° 
°d
::
°rög
& 
key
) {

172  
m≠
()[
key
];

175 
TokíM≠
 
	gTokíM≠
::
	$gëChûd
() {

176  
	`TokíM≠
(
this
);

177 
	}
}

179 
	gTokíM≠
::
	$îa£
(
°d
::
°rög
 
key
) {

180 
	`m≠
().
	`îa£
(
key
);

181 
	}
}

	@containers.h

2 #i‚de‡
CONTAINERS_H_


3 
	#CONTAINERS_H_


	)

5 
	~<m≠
>

6 
	~<li°
>

7 
	~<ve˘‹
>

8 
	~<°rög
>

9 
	~<mem‹y
>

11 
	gãm∂©e
 <
ty≥«me
 
	gT
>

12 ˛as†
	cC⁄èöî
 {

13 
	m¥Ÿe˘ed
:

14 
°d
::
sh¨ed_±r
<
T
> 
ªf
;

16 
	mpublic
:

17 
	$C⁄èöî
(Ë: 
	`ªf
(
°d
::
make_sh¨ed
<
T
>()) {}

18 
	$C⁄èöî
(c⁄° 
T
& 
t
Ë: 
	`ªf
(
°d
::
make_sh¨ed
<T>—)Ë{
	}
}

20 
public
:

21 
›î©‹
 
T
*(Ëc⁄° {  
ªf
.
gë
(); }

22 
‰õnd
 
boﬁ
 
	g›î©‹
==(
C⁄èöî
<
T
> 
fú°
, 
	gC⁄èöî
<
	gT
> 
	g£c⁄d
) {

23  
	gfú°
.
	gªf
 =
£c⁄d
.
ªf
;

27 
˛ass
 
	gIãøt‹
;

29 
	gIãøbÀ
 : 
public
 
TokíBa£
 {

30 
vútuÆ
 ~
IãøbÀ
() {}

31 
IãøbÀ
() {}

32 
IãøbÀ
(
tokTy≥_t
 
ty≥
Ë: 
TokíBa£
(type) {}

34 
vútuÆ
 
Iãøt‹
* 
gëIãøt‹
() const = 0;

38 
	gIãøt‹
 : 
public
 
IãøbÀ
 {

39 
Iãøt‹
(Ë: 
IãøbÀ
(
IT
) {}

40 
vútuÆ
 ~
Iãøt‹
() {}

44 
vútuÆ
 
∑ckTokí
* 
√xt
() = 0;

45 
vútuÆ
 
ª£t
() = 0;

47 
Iãøt‹
* 
gëIãøt‹
() const;

50 
˛ass
 
	gTokíM≠
;

51 
	g°d
::
	tm≠
<
	t°d
::
	t°rög
, 
	t∑ckTokí
> 
	tTokíM≠_t
;

53 
	sM≠D©a_t
 {

54 
TokíM≠_t
 
	mm≠
;

55 
TokíM≠
* 
	m∑ª¡
;

56 
M≠D©a_t
(
TokíM≠
* 
p
);

57 
M≠D©a_t
(c⁄° M≠D©a_t& 
Ÿhî
);

58 ~
M≠D©a_t
();

60 
	mM≠D©a_t
& 
	m›î©‹
=(c⁄° 
M≠D©a_t
& 
Ÿhî
);

63 
	gTokíM≠
 : 
public
 
C⁄èöî
<
M≠D©a_t
>,Öubli¯
	gIãøbÀ
 {

65 
TokíM≠
 
	gem±y
;

66 
	gTokíM≠
& 
ba£_m≠
();

67 
	gTokíM≠
& 
deÁu…_globÆ
();

68 
∑ckTokí
 
deÁu…_c⁄°ru˘‹
(
TokíM≠
 
sc›e
);

70 
	gpublic
:

72 
TokíM≠_t
& 
m≠
(Ëc⁄° {  
ªf
->map; }

73 
TokíM≠
* 
∑ª¡
(Ëc⁄° {  
	gªf
->
	g∑ª¡
; }

75 
	gpublic
:

77 
M≠Iãøt‹
 : 
public
 
Iãøt‹
 {

78 c⁄° 
TokíM≠_t
& 
m≠
;

79 
	gTokíM≠_t
::
c⁄°_ôî©‹
 
ô
 = 
m≠
.
begö
();

80 
∑ckTokí
 
	gœ°
;

82 
M≠Iãøt‹
(c⁄° 
TokíM≠_t
& 
m≠
) : map(map) {}

84 
∑ckTokí
* 
√xt
();

85 
ª£t
();

87 
TokíBa£
* 
˛⁄e
() const {

88  
√w
 
M≠Iãøt‹
(*
this
);

92 
Iãøt‹
* 
gëIãøt‹
() const {

93  
√w
 
M≠Iãøt‹
(
m≠
());

96 
	gpublic
:

97 
TokíM≠
(TokíM≠* 
∑ª¡
 = &TokíM≠::
ba£_m≠
())

98 : 
C⁄èöî
(
∑ª¡
), 
IãøbÀ
(
MAP
) {

100 
	gthis
->
	gty≥
 = 
MAP
;

102 
TokíM≠
(c⁄° TokíM≠& 
Ÿhî
Ë: 
C⁄èöî
(other) {

103 
this
->
ty≥
 = 
MAP
;

106 
	gvútuÆ
 ~
TokíM≠
() {}

108 
	gpublic
:

110 
TokíBa£
* 
˛⁄e
() const {

111  
√w
 
TokíM≠
(*
this
);

114 
	gpublic
:

115 
∑ckTokí
* 
föd
(c⁄° 
°d
::
°rög
& 
key
);

116 c⁄° 
∑ckTokí
* 
föd
(c⁄° 
°d
::
°rög
& 
key
) const;

117 
TokíM≠
* 
födM≠
(c⁄° 
°d
::
°rög
& 
key
);

118 
assign
(
°d
::
°rög
 
key
, 
TokíBa£
* 
vÆue
);

119 
ö£π
(
°d
::
°rög
 
key
, 
TokíBa£
* 
vÆue
);

121 
TokíM≠
 
gëChûd
();

123 
	g∑ckTokí
& 
	g›î©‹
[](c⁄° 
	g°d
::
°rög
& 
°r
);

125 
îa£
(
°d
::
°rög
 
key
);

129 
	gGlobÆSc›e
 : 
public
 
TokíM≠
 {

130 
GlobÆSc›e
(Ë: 
TokíM≠
(&TokíM≠::
deÁu…_globÆ
()) {}

133 
	g°d
::
	tve˘‹
<
	t∑ckTokí
> 
	tTokíLi°_t
;

135 
	gTokíLi°
 : 
public
 
C⁄èöî
<
TokíLi°_t
>,Öubli¯
	gIãøbÀ
 {

136 
∑ckTokí
 
deÁu…_c⁄°ru˘‹
(
TokíM≠
 
sc›e
);

138 
	gpublic
:

140 
TokíLi°_t
& 
li°
(Ëc⁄° {  *
ªf
; }

142 
	gpublic
:

143 
Li°Iãøt‹
 : 
public
 
Iãøt‹
 {

144 
TokíLi°_t
* 
li°
;

145 
uöt64_t
 
	gi
 = 0;

147 
Li°Iãøt‹
(
TokíLi°_t
* 
li°
) :Üist(list) {}

149 
∑ckTokí
* 
√xt
();

150 
ª£t
();

152 
TokíBa£
* 
˛⁄e
() const {

153  
√w
 
Li°Iãøt‹
(*
this
);

157 
Iãøt‹
* 
gëIãøt‹
() const {

158  
√w
 
Li°Iãøt‹
(&
li°
());

161 
	gpublic
:

162 
TokíLi°
(Ë{ 
this
->
ty≥
 = 
LIST
; }

163 
	gvútuÆ
 ~
TokíLi°
() {}

165 
	g∑ckTokí
& 
	g›î©‹
[](c⁄° 
uöt64_t
 
	gidx
) const {

166 i‡(
li°
().
size
(Ë<
idx
) {

167 
throw
 
°d
::
out_of_ønge
("List index out ofÑange!");

169  
li°
()[
idx
];

172 
push
(
∑ckTokí
 
vÆ
Ëc⁄° { 
li°
().
push_back
(val); }

173 
∑ckTokí
 
p›
() const {

174 
∑ckTokí
 
	gback
 = 
li°
().
back
();

175 
li°
().
p›_back
();

176  
	gback
;

179 
	gpublic
:

181 
TokíBa£
* 
˛⁄e
() const {

182  
√w
 
TokíLi°
(*
this
);

186 ˛as†
	cTu∂e
 : 
public
 
TokíLi°
 {

187 
public
:

188 
	$Tu∂e
(Ë{ 
this
->
ty≥
 = 
TUPLE
; }

189 
	$Tu∂e
(c⁄° 
TokíBa£
* 
fú°
) {

190 
this
->
ty≥
 = 
TUPLE
;

191 
	`li°
().
	`push_back
(
	`∑ckTokí
(
fú°
->
	`˛⁄e
()));

192 
	}
}

193 
	$Tu∂e
(c⁄° 
∑ckTokí
 
fú°
Ë: 
	`Tu∂e
(fú°.
	$tokí
()Ë{
	}
}

195 
	$Tu∂e
(c⁄° 
TokíBa£
* 
fú°
, c⁄° TokíBa£* 
£c⁄d
) {

196 
this
->
ty≥
 = 
TUPLE
;

197 
	`li°
().
	`push_back
(
	`∑ckTokí
(
fú°
->
	`˛⁄e
()));

198 
	`li°
().
	`push_back
(
	`∑ckTokí
(
£c⁄d
->
	`˛⁄e
()));

199 
	}
}

200 
	$Tu∂e
(c⁄° 
∑ckTokí
 
fú°
, c⁄°ÖackTokí 
£c⁄d
)

201 : 
	`Tu∂e
(
fú°
.
	`tokí
(), 
£c⁄d
.
	$tokí
()Ë{
	}
}

203 
	gpublic
:

205 
TokíBa£
* 
	$˛⁄e
() const {

206  
√w
 
	`Tu∂e
(*
this
);

207 
	}
}

219 ˛as†
	cSTu∂e
 : 
public
 
Tu∂e
 {

220 
public
:

221 
	$STu∂e
(Ë{ 
this
->
ty≥
 = 
STUPLE
; }

222 
	$STu∂e
(c⁄° 
TokíBa£
* 
fú°
) {

223 
this
->
ty≥
 = 
STUPLE
;

224 
	`li°
().
	`push_back
(
	`∑ckTokí
(
fú°
->
	`˛⁄e
()));

225 
	}
}

226 
	$STu∂e
(c⁄° 
∑ckTokí
 
fú°
Ë: 
	`STu∂e
(fú°.
	$tokí
()Ë{
	}
}

228 
	$STu∂e
(c⁄° 
TokíBa£
* 
fú°
, c⁄° TokíBa£* 
£c⁄d
) {

229 
this
->
ty≥
 = 
STUPLE
;

230 
	`li°
().
	`push_back
(
	`∑ckTokí
(
fú°
->
	`˛⁄e
()));

231 
	`li°
().
	`push_back
(
	`∑ckTokí
(
£c⁄d
->
	`˛⁄e
()));

232 
	}
}

233 
	$STu∂e
(c⁄° 
∑ckTokí
 
fú°
, c⁄°ÖackTokí 
£c⁄d
)

234 : 
	`STu∂e
(
fú°
.
	`tokí
(), 
£c⁄d
.
	$tokí
()Ë{
	}
}

236 
	gpublic
:

238 
TokíBa£
* 
	$˛⁄e
() const {

239  
√w
 
	`STu∂e
(*
this
);

240 
	}
}

	@functions.cpp

1 
	~<°rög
>

3 
	~"shu¡ög-y¨d.h
"

4 
	~"fun˘i⁄s.h
"

5 
	~"shu¡ög-y¨d-ex˚±i⁄s.h
"

8 
∑ckTokí
 
	gFun˘i⁄
::
	$ˇŒ
(
∑ckTokí
 
_this
, c⁄° 
Fun˘i⁄
* 
func
,

9 
TokíLi°
* 
¨gs
, 
TokíM≠
 
sc›e
) {

11 
TokíM≠
 
kw¨gs
;

12 
TokíM≠
 
loˇl
 = 
sc›e
.
	`gëChûd
();

14 
¨gs_t
 
¨g_«mes
 = 
func
->
	`¨gs
();

16 
TokíLi°_t
::
ôî©‹
 
¨gs_ô
 = 
¨gs
->
	`li°
().
	`begö
();

17 
¨gs_t
::
c⁄°_ôî©‹
 
«mes_ô
 = 
¨g_«mes
.
	`begö
();

21 
¨gs_ô
 !
¨gs
->
	`li°
().
	`íd
(Ë&& 
«mes_ô
 !
¨g_«mes
.end()) {

23 i‡((*
¨gs_ô
)->
ty≥
 =
STUPLE
) ;

26 
loˇl
[*
«mes_ô
] = *
¨gs_ô
;

28 ++
¨gs_ô
;

29 ++
«mes_ô
;

34 
TokíLi°
 
¨gli°
;

35 ; 
¨gs_ô
 !
¨gs
->
	`li°
().
	`íd
(); ++args_it) {

37 i‡((*
¨gs_ô
)->
ty≥
 =
STUPLE
) ;

39 
¨gli°
.
	`li°
().
	`push_back
(*
¨gs_ô
);

44 ; 
¨gs_ô
 !
¨gs
->
	`li°
().
	`íd
(); ++args_it) {

45 
∑ckTokí
& 
¨g
 = *
¨gs_ô
;

47 i‡(
¨g
->
ty≥
 !
STUPLE
) {

48 
throw
 
	`sy¡ax_îr‹
("Positionalárgument follows keywordárgument");

51 
STu∂e
* 
°
 = 
°©ic_ˇ°
<STu∂e*>(
¨g
.
	`tokí
());

53 i‡(
°
->
	`li°
().
	`size
() != 2) {

54 
throw
 
	`sy¡ax_îr‹
("KeywordÅuples must haveÉxactly 2 items!");

57 i‡(
°
->
	`li°
()[0]->
ty≥
 !
STR
) {

58 
throw
 
	`sy¡ax_îr‹
("Keyword firstárgument should be ofÅype string!");

62 
°d
::
°rög
 
key
 = 
°
->
	`li°
()[0].
	`asSåög
();

63 
∑ckTokí
& 
vÆue
 = 
°
->
	`li°
()[1];

64 
kw¨gs
[
key
] = 
vÆue
;

69 ; 
«mes_ô
 !
¨g_«mes
.
	`íd
(); ++names_it) {

71 autÿ
kw_ô
 = 
kw¨gs
.
	`m≠
().
	`föd
(*
«mes_ô
);

72 i‡(
kw_ô
 =
kw¨gs
.
	`m≠
().
	`íd
()) {

73 
loˇl
[*
«mes_ô
] = 
∑ckTokí
::
	`N⁄e
();

75 
loˇl
[*
«mes_ô
] = 
kw_ô
->
£c⁄d
;

76 
kw¨gs
.
	`m≠
().
	`îa£
(
kw_ô
);

82 
loˇl
["this"] = 
_this
;

83 
loˇl
["¨gs"] = 
¨gli°
;

84 
loˇl
["kw¨gs"] = 
kw¨gs
;

86  
func
->
	`exec
(
loˇl
);

87 
	}
}

91 
	gCµFun˘i⁄
::
	$CµFun˘i⁄
(
	$∑ckTokí
 (*
func
)(
TokíM≠
), c⁄° 
¨gs_t
 
¨gs
,

92 
°d
::
°rög
 
«me
)

93 : 
	`func
(
func
), 
	$_¨gs
(
¨gs
) {

94 
this
->
_«me
 = 
«me
;

95 
	}
}

97 
	gCµFun˘i⁄
::
	$CµFun˘i⁄
(
	$∑ckTokí
 (*
func
)(
TokíM≠
), 
«rgs
,

98 c⁄° ** 
¨gs
, 
°d
::
°rög
 
«me
)

99 : 
	$func
(
func
) {

100 
this
->
_«me
 = 
«me
;

102 
uöt32_t
 
i
 = 0; i < 
«rgs
; ++i) {

103 
this
->
_¨gs
.
	`push_back
(
¨gs
[
i
]);

105 
	}
}

108 
	gCµFun˘i⁄
::
	$CµFun˘i⁄
(
	$∑ckTokí
 (*
func
)(
TokíM≠
), 
°d
::
°rög
 
«me
)

109 : 
	$func
(
func
) {

110 
this
->
_«me
 = 
«me
;

111 
	}
}

	@functions.h

1 #i‚de‡
FUNCTIONS_H_


2 
	#FUNCTIONS_H_


	)

4 
	~<li°
>

5 
	~<°rög
>

7 
	g°d
::
	tli°
<
	t°d
::
	t°rög
> 
	t¨gs_t
;

9 ˛as†
	cFun˘i⁄
 : 
public
 
TokíBa£
 {

10 
public
:

11 
∑ckTokí
 
ˇŒ
’ackTokí 
_this
, c⁄° 
Fun˘i⁄
* 
func
,

12 
TokíLi°
* 
¨gs
, 
TokíM≠
 
sc›e
);

13 
	mpublic
:

14 
	$Fun˘i⁄
(Ë: 
	$TokíBa£
(
FUNC
) {}

15 
vútuÆ
 ~
	$Fun˘i⁄
(Ë{
	}
}

17 
public
:

18 
vútuÆ
 c⁄° 
°d
::
°rög
 
	$«me
() const = 0;

19 
vútuÆ
 c⁄° 
¨gs_t
 
	$¨gs
() const = 0;

20 
vútuÆ
 
∑ckTokí
 
	$exec
(
TokíM≠
 
sc›e
) const = 0;

21 
vútuÆ
 
TokíBa£
* 
	$˛⁄e
() const = 0;

22 
	}
};

24 ˛as†
	cCµFun˘i⁄
 : 
public
 
Fun˘i⁄
 {

25 
public
:

26 
	$∑ckTokí
 (*
func
)(
TokíM≠
);

27 
¨gs_t
 
_¨gs
;

28 
°d
::
°rög
 
_«me
;

30 
	`CµFun˘i⁄
(
	$∑ckTokí
 (*
func
)(
TokíM≠
), c⁄° 
¨gs_t
 
¨gs
,

31 
°d
::
°rög
 
«me
 = "");

32 
	`CµFun˘i⁄
(
	$∑ckTokí
 (*
func
)(
TokíM≠
), 
«rgs
,

33 c⁄° ** 
¨gs
, 
°d
::
°rög
 
«me
 = "");

34 
	`CµFun˘i⁄
(
	$∑ckTokí
 (*
func
)(
TokíM≠
), 
°d
::
°rög
 
«me
 = "");

36 
vútuÆ
 c⁄° 
°d
::
°rög
 
	$«me
(Ëc⁄° {  
_«me
; }

37 
vútuÆ
 c⁄° 
¨gs_t
 
	$¨gs
(Ëc⁄° {  
_¨gs
; 
	}
}

38 
vútuÆ
 
∑ckTokí
 
	$exec
(
TokíM≠
 
sc›e
Ëc⁄° {  
	`func
(sc›e); 
	}
}

40 
vútuÆ
 
TokíBa£
* 
	$˛⁄e
() const {

41  
√w
 
	`CµFun˘i⁄
(
°©ic_ˇ°
<c⁄° 
CµFun˘i⁄
&>(*
this
));

42 
	}
}

	@packToken.cpp

1 
	~<s°ªam
>

2 
	~<°rög
>

3 
	~<io°ªam
>

5 
	~"shu¡ög-y¨d.h
"

6 
	~"∑ckTokí.h
"

7 
	~"shu¡ög-y¨d-ex˚±i⁄s.h
"

9 c⁄° 
	g∑ckTokí
&ÖackTokí::
	$N⁄e
() {

10 
∑ckTokí
 
n⁄e
 = 
	`∑ckTokí
(
	`TokíN⁄e
());

11  
n⁄e
;

12 
	}
}

14 
	g∑ckTokí
::
°rFunc_t
& 
∑ckTokí
::
	$°r_cu°om
() {

15 
°rFunc_t
 
func
 = 0;

16  
func
;

17 
	}
}

19 
	g∑ckTokí
::
	$∑ckTokí
(c⁄° 
TokíM≠
& 
m≠
Ë: 
	`ba£
(
√w
 
	$TokíM≠
(
m≠
)Ë{
	}
}

20 
∑ckTokí
::
	$∑ckTokí
(c⁄° 
TokíLi°
& 
li°
Ë: 
	`ba£
(
√w
 
	$TokíLi°
(
li°
)Ë{
	}
}

22 
∑ckTokí
&ÖackTokí::
›î©‹
=(c⁄°ÖackTokí& 
t
) {

23 
dñëe
 
ba£
;

24 
	gba£
 = 
t
.
ba£
->
˛⁄e
();

25  *
	gthis
;

28 
boﬁ
 
	g∑ckTokí
::
›î©‹
==(c⁄° 
∑ckTokí
& 
tokí
) const {

29 i‡(
NUM
 & 
tokí
.
ba£
->
ty≥
 & base->type) {

30  
tokí
.
asDoubÀ
() ==ásDouble();

33 i‡(
	gtokí
.
	gba£
->
	gty≥
 !
ba£
->
ty≥
) {

34  
Ál£
;

37  
	gtokí
.
°r
() == str();

41 
boﬁ
 
	g∑ckTokí
::
›î©‹
!=(c⁄° 
∑ckTokí
& 
tokí
) const {

42  !(*
this
 =
tokí
);

45 
TokíBa£
* 
	g∑ckTokí
::
›î©‹
->() const {

46  
ba£
;

49 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam &
os
, c⁄° 
	g∑ckTokí
& 
	gt
) {

50  
	gos
 << 
	gt
.
°r
();

53 
	g∑ckTokí
&ÖackTokí::
›î©‹
[](c⁄° 
°d
::
°rög
& 
key
) {

54 i‡(
ba£
->
ty≥
 !
MAP
) {

55 
throw
 
bad_ˇ°
(

58  (*
	g°©ic_ˇ°
<
	gTokíM≠
*>(
	gba£
))[
key
];

60 c⁄° 
	g∑ckTokí
&ÖackTokí::
›î©‹
[](c⁄° 
°d
::
°rög
& 
key
) const {

61 i‡(
ba£
->
ty≥
 !
MAP
) {

62 
throw
 
bad_ˇ°
(

65  (*
	g°©ic_ˇ°
<
	gTokíM≠
*>(
	gba£
))[
key
];

67 
	g∑ckTokí
&ÖackTokí::
›î©‹
[](c⁄° * 
key
) {

68 i‡(
ba£
->
ty≥
 !
MAP
) {

69 
throw
 
bad_ˇ°
(

72  (*
	g°©ic_ˇ°
<
	gTokíM≠
*>(
	gba£
))[
key
];

74 c⁄° 
	g∑ckTokí
&ÖackTokí::
›î©‹
[](c⁄° * 
key
) const {

75 i‡(
ba£
->
ty≥
 !
MAP
) {

76 
throw
 
bad_ˇ°
(

79  (*
	g°©ic_ˇ°
<
	gTokíM≠
*>(
	gba£
))[
key
];

82 
boﬁ
 
	g∑ckTokí
::
	$asBoﬁ
() const {

83 
ba£
->
ty≥
) {

84 
REAL
:

85  
°©ic_ˇ°
<
Tokí
<>*>(
ba£
)->
vÆ
 != 0;

86 
INT
:

87  
°©ic_ˇ°
<
Tokí
<
öt64_t
>*>(
ba£
)->
vÆ
 != 0;

88 
BOOL
:

89  
°©ic_ˇ°
<
Tokí
<
uöt8_t
>*>(
ba£
)->
vÆ
 != 0;

90 
STR
:

91  
°©ic_ˇ°
<
Tokí
<
°d
::
°rög
>*>(
ba£
)->
vÆ
 !°d::
	`°rög
();

92 
MAP
:

93 
FUNC
:

94  
åue
;

95 
NONE
:

96  
Ál£
;

97 
TUPLE
:

98 
STUPLE
:

99  
°©ic_ˇ°
<
Tu∂e
*>(
ba£
)->
	`li°
().
	`size
() != 0;

101 
throw
 
	`bad_ˇ°
("TokenÅype canÇot be castÅo boolean!");

103 
	}
}

105 
	g∑ckTokí
::
	$asDoubÀ
() const {

106 
ba£
->
ty≥
) {

107 
REAL
:

108  
°©ic_ˇ°
<
Tokí
<>*>(
ba£
)->
vÆ
;

109 
INT
:

110  
°©ic_ˇ°
<
Tokí
<
öt64_t
>*>(
ba£
)->
vÆ
;

111 
BOOL
:

112  
°©ic_ˇ°
<
Tokí
<
uöt8_t
>*>(
ba£
)->
vÆ
;

114 i‡(!(
ba£
->
ty≥
 & 
NUM
)) {

115 
throw
 
	`bad_ˇ°
(

118 
throw
 
	`bad_ˇ°
(

122 
	}
}

124 
öt64_t
 
	g∑ckTokí
::
	$asI¡
() const {

125 
ba£
->
ty≥
) {

126 
REAL
:

127  
°©ic_ˇ°
<
Tokí
<>*>(
ba£
)->
vÆ
;

128 
INT
:

129  
°©ic_ˇ°
<
Tokí
<
öt64_t
>*>(
ba£
)->
vÆ
;

130 
BOOL
:

131  
°©ic_ˇ°
<
Tokí
<
uöt8_t
>*>(
ba£
)->
vÆ
;

133 i‡(!(
ba£
->
ty≥
 & 
NUM
)) {

134 
throw
 
	`bad_ˇ°
(

137 
throw
 
	`bad_ˇ°
(

141 
	}
}

143 
	g°d
::
°rög
& 
∑ckTokí
::
	$asSåög
() const {

144 i‡(
ba£
->
ty≥
 !
STR
 && ba£->ty≥ !
VAR
 && ba£->ty≥ !
OP
) {

145 
throw
 
	`bad_ˇ°
(

148  
°©ic_ˇ°
<
Tokí
<
°d
::
°rög
>*>(
ba£
)->
vÆ
;

149 
	}
}

151 
	gTokíM≠
& 
	g∑ckTokí
::
	$asM≠
() const {

152 i‡(
ba£
->
ty≥
 !
MAP
) {

153 
throw
 
	`bad_ˇ°
(

156  *
°©ic_ˇ°
<
TokíM≠
*>(
ba£
);

157 
	}
}

159 
	gTokíLi°
& 
	g∑ckTokí
::
	$asLi°
() const {

160 i‡(
ba£
->
ty≥
 !
LIST
) {

161 
throw
 
	`bad_ˇ°
(

164  *
°©ic_ˇ°
<
TokíLi°
*>(
ba£
);

165 
	}
}

167 
	gTu∂e
& 
	g∑ckTokí
::
	$asTu∂e
() const {

168 i‡(
ba£
->
ty≥
 !
TUPLE
) {

169 
throw
 
	`bad_ˇ°
(

172  *
°©ic_ˇ°
<
Tu∂e
*>(
ba£
);

173 
	}
}

175 
	gSTu∂e
& 
	g∑ckTokí
::
	$asSTu∂e
() const {

176 i‡(
ba£
->
ty≥
 !
STUPLE
) {

177 
throw
 
	`bad_ˇ°
(

180  *
°©ic_ˇ°
<
STu∂e
*>(
ba£
);

181 
	}
}

183 
Fun˘i⁄
* 
	g∑ckTokí
::
	$asFunc
() const {

184 i‡(
ba£
->
ty≥
 !
FUNC
) {

185 
throw
 
	`bad_ˇ°
(

188  
°©ic_ˇ°
<
Fun˘i⁄
*>(
ba£
);

189 
	}
}

191 
	g°d
::
°rög
 
∑ckTokí
::
	$°r
(
uöt32_t
 
√°
) const {

192  
∑ckTokí
::
	`°r
(
ba£
, 
√°
);

193 
	}
}

195 
	g°d
::
°rög
 
∑ckTokí
::
	$°r
(c⁄° 
TokíBa£
* 
ba£
, 
uöt32_t
 
√°
) {

196 
°d
::
°rög°ªam
 
ss
;

197 
TokíM≠_t
* 
tm≠
;

198 
TokíM≠_t
::
ôî©‹
 
m_ô
;

200 
TokíLi°_t
* 
éi°
;

201 
TokíLi°_t
::
ôî©‹
 
l_ô
;

202 c⁄° 
Fun˘i⁄
* 
func
;

203 
boﬁ
 
fú°
, 
boﬁvÆ
;

204 
°d
::
°rög
 
«me
;

206 i‡(!
ba£
)  "undefined";

208 i‡(
ba£
->
ty≥
 & 
REF
) {

209 
ba£
 = 
°©ic_ˇ°
<c⁄° 
RefTokí
*>(ba£)->
	`ªsﬁve
();

210 
«me
 = 
°©ic_ˇ°
<c⁄° 
RefTokí
*>(
ba£
)->
key
.
	`°r
();

215 i‡(
∑ckTokí
::
	`°r_cu°om
()) {

216 
°d
::
°rög
 
ªsu…
 = 
∑ckTokí
::
	`°r_cu°om
()(
ba£
, 
√°
);

217 i‡(
ªsu…
 != "") {

218  
ªsu…
;

224 
ba£
->
ty≥
) {

225 
NONE
:

227 
UNARY
:

229 
OP
:

230  
°©ic_ˇ°
<c⁄° 
Tokí
<
°d
::
°rög
>*>(
ba£
)->
vÆ
;

231 
VAR
:

232  
°©ic_ˇ°
<c⁄° 
Tokí
<
°d
::
°rög
>*>(
ba£
)->
vÆ
;

233 
REAL
:

234 
ss
 << 
°©ic_ˇ°
<c⁄° 
Tokí
<>*>(
ba£
)->
vÆ
;

235  
ss
.
	`°r
();

236 
INT
:

237 
ss
 << 
°©ic_ˇ°
<c⁄° 
Tokí
<
öt64_t
>*>(
ba£
)->
vÆ
;

238  
ss
.
	`°r
();

239 
BOOL
:

240 
boﬁvÆ
 = 
°©ic_ˇ°
<c⁄° 
Tokí
<
uöt8_t
>*>(
ba£
)->
vÆ
;

241  
boﬁvÆ
 ? "True" : "False";

242 
STR
:

243  "\"" + 
°©ic_ˇ°
<c⁄° 
Tokí
<
°d
::
°rög
>*>(
ba£
)->
vÆ
 + "\"";

244 
FUNC
:

245 
func
 = 
°©ic_ˇ°
<c⁄° 
Fun˘i⁄
*>(
ba£
);

246 i‡(
func
->
	`«me
().
	`size
())  "[Function: " + func->name() + "]";

247 i‡(
«me
.
	`size
())  "[Function: " +Çame + "]";

249 
TUPLE
:

250 
STUPLE
:

251 i‡(
√°
 == 0)  "[Tuple]";

252 
ss
 << "(";

253 
fú°
 = 
åue
;

254 c⁄° 
∑ckTokí
 
tokí
 : 
°©ic_ˇ°
<c⁄° 
Tu∂e
*>(
ba£
)->
	`li°
()) {

255 i‡(!
fú°
) {

256 
ss
 << ", ";

258 
fú°
 = 
Ál£
;

260 
ss
 << 
	`°r
(
tokí
.
	`tokí
(), 
√°
-1);

262 i‡(
fú°
) {

265 
ss
 << ",)";

267 
ss
 << ")";

269  
ss
.
	`°r
();

270 
MAP
:

271 i‡(
√°
 == 0)  "[Map]";

272 
tm≠
 = &(
°©ic_ˇ°
<c⁄° 
TokíM≠
*>(
ba£
)->
	`m≠
());

273 i‡(
tm≠
->
	`size
() == 0)  "{}";

274 
ss
 << "{";

275 
m_ô
 = 
tm≠
->
	`begö
(); m_ô !tm≠->
	`íd
(); ++m_it) {

276 
ss
 << (
m_ô
 =
tm≠
->
	`begö
() ? "" : ",");

277 
ss
 << " \"" << 
m_ô
->
fú°
 << "\": " << m_ô->
£c⁄d
.
	`°r
(
√°
-1);

279 
ss
 << " }";

280  
ss
.
	`°r
();

281 
LIST
:

282 i‡(
√°
 == 0)  "[List]";

283 
éi°
 = &(
°©ic_ˇ°
<c⁄° 
TokíLi°
*>(
ba£
)->
	`li°
());

284 i‡(
éi°
->
	`size
() == 0)  "[]";

285 
ss
 << "[";

286 
l_ô
 = 
éi°
->
	`begö
();Ü_ô !éi°->
	`íd
(); ++l_it) {

287 
ss
 << (
l_ô
 =
éi°
->
	`begö
() ? "" : ",");

288 
ss
 << " " << 
l_ô
->
	`°r
(
√°
-1);

290 
ss
 << " ]";

291  
ss
.
	`°r
();

293 i‡(
ba£
->
ty≥
 & 
IT
) {

298 
	}
}

	@packToken.h

1 #i‚de‡
PACKTOKEN_H_


2 
	#PACKTOKEN_H_


	)

4 
	~<°rög
>

7 ˛as†
	c∑ckTokí
 {

8 
TokíBa£
* 
	mba£
;

10 
	mpublic
:

11 c⁄° 
∑ckTokí
& 
N⁄e
();

13 
	m°d
::
	t°rög
 (*
	t°rFunc_t
)(c⁄° 
	tTokíBa£
*, 
	tuöt32_t
);

14 
°rFunc_t
& 
	`°r_cu°om
();

16 
public
:

17 
	$∑ckTokí
(Ë: 
	`ba£
(
√w
 
	$TokíN⁄e
()) {}

18 
	$∑ckTokí
(c⁄° 
TokíBa£
& 
t
Ë: 
	`ba£
—.
	$˛⁄e
()Ë{
	}
}

19 
	$∑ckTokí
(c⁄° 
∑ckTokí
& 
t
Ë: 
	`ba£
—.
ba£
->
	$˛⁄e
()Ë{
	}
}

20 
	$∑ckTokí
(
∑ckTokí
&& 
t
Ë: 
	$ba£
(
t
.
ba£
Ë{Å.ba£ = 0; 
	}
}

21 
	g∑ckTokí
& 
	g›î©‹
=(c⁄° 
∑ckTokí
& 
t
);

23 
	gãm∂©e
<
˛ass
 
	gC
>

24 
	$∑ckTokí
(
C
 
c
, 
tokTy≥
 
ty≥
Ë: 
	`ba£
(
√w
 
Tokí
<C>(c,Åy≥)Ë{
	}
}

25 
	$∑ckTokí
(
i
Ë: 
	`ba£
(
√w
 
Tokí
<
öt64_t
>(i, 
INT
)Ë{
	}
}

26 
	$∑ckTokí
(
öt64_t
 
l
Ë: 
	`ba£
(
√w
 
Tokí
<öt64_t>÷, 
INT
)Ë{
	}
}

27 
	$∑ckTokí
(
boﬁ
 
b
Ë: 
	`ba£
(
√w
 
Tokí
<
uöt8_t
>(b, 
BOOL
)Ë{
	}
}

28 
	$∑ckTokí
(
size_t
 
s
Ë: 
	`ba£
(
√w
 
Tokí
<
öt64_t
>(s, 
INT
)Ë{
	}
}

29 
	$∑ckTokí
(
f
Ë: 
	`ba£
(
√w
 
Tokí
<>(f, 
REAL
)Ë{
	}
}

30 
	$∑ckTokí
(
d
Ë: 
	`ba£
(
√w
 
Tokí
<>(d, 
REAL
)Ë{
	}
}

31 
	$∑ckTokí
(c⁄° * 
s
Ë: 
	`ba£
(
√w
 
Tokí
<
°d
::
°rög
>(s, 
STR
)Ë{
	}
}

32 
	$∑ckTokí
(c⁄° 
°d
::
°rög
& 
s
Ë: 
	`ba£
(
√w
 
Tokí
<°d::°rög>(s, 
STR
)Ë{
	}
}

33 
∑ckTokí
(c⁄° 
TokíM≠
& 
m≠
);

34 
∑ckTokí
(c⁄° 
TokíLi°
& 
li°
);

35 ~
	$∑ckTokí
(Ë{ 
dñëe
 
ba£
; 
	}
}

37 
TokíBa£
* 
	g›î©‹
->() const;

38 
boﬁ
 
	g›î©‹
==(c⁄° 
∑ckTokí
& 
t
) const;

39 
boﬁ
 
	g›î©‹
!=(c⁄° 
∑ckTokí
& 
t
) const;

40 
	g∑ckTokí
& 
	g›î©‹
[](c⁄° 
	g°d
::
°rög
& 
key
);

41 
	g∑ckTokí
& 
	g›î©‹
[](c⁄° * 
	gkey
);

42 c⁄° 
	g∑ckTokí
& 
	g›î©‹
[](c⁄° 
	g°d
::
°rög
& 
key
) const;

43 c⁄° 
	g∑ckTokí
& 
	g›î©‹
[](c⁄° * 
	gkey
) const;

44 
TokíBa£
* 
	$tokí
(Ë{  
ba£
; 
	}
}

45 c⁄° 
TokíBa£
* 
	$tokí
(Ëc⁄° {  
ba£
; 
	}
}

47 
boﬁ
 
	$asBoﬁ
() const;

48 
	$asDoubÀ
() const;

49 
öt64_t
 
	$asI¡
() const;

50 
°d
::
°rög
& 
	$asSåög
() const;

51 
TokíM≠
& 
	$asM≠
() const;

52 
TokíLi°
& 
	$asLi°
() const;

53 
Tu∂e
& 
	$asTu∂e
() const;

54 
STu∂e
& 
	$asSTu∂e
() const;

55 
Fun˘i⁄
* 
	$asFunc
() const;

59 
ãm∂©e
<
ty≥«me
 
T
> T& 
	$as
() const;

63 
°d
::
°rög
 
	$°r
(
uöt32_t
 
√°
 = 3) const;

64 
°d
::
°rög
 
	`°r
(c⁄° 
TokíBa£
* 
t
, 
uöt32_t
 
√°
 = 3);

66 
public
:

74 
ex∂icô
 
	$∑ckTokí
(
TokíBa£
* 
t
Ë: 
	$ba£
(
t
Ë{
	}
}

76 
public
:

79 
TokíBa£
* 
ªÀa£
() && {

80 
TokíBa£
* 
b
 = 
ba£
;

83 
	gba£
 = 0;

84  
	gb
;

89 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
os
, c⁄° 
	g∑ckTokí
& 
	gt
);

	@shunting-yard-exceptions.h

2 #i‚de‡
SHUNTING_YARD_EXCEPTIONS_H_


3 
	#SHUNTING_YARD_EXCEPTIONS_H_


	)

5 
	~"shu¡ög-y¨d.h
"

7 
	~<°rög
>

8 
	~<°dex˚±
>

10 ˛as†
	cmsg_ex˚±i⁄
 : 
public
 
°d
::
ex˚±i⁄
 {

11 
¥Ÿe˘ed
:

12 c⁄° 
°d
::
°rög
 
msg
;

13 
	mpublic
:

14 
	$msg_ex˚±i⁄
(c⁄° 
°d
::
°rög
& 
msg
Ë: 
	$msg
(
msg
) {}

15 ~
	$msg_ex˚±i⁄
(Ë
	$throw
(Ë{
	}
}

16 c⁄° * 
	$wh©
(Ëc⁄° 
	$throw
() {

17  
msg
.
	`c_°r
();

18 
	}
}

21 
	gbad_ˇ°
 : 
public
 
msg_ex˚±i⁄
 {

22 
bad_ˇ°
(c⁄° 
°d
::
°rög
& 
msg
Ë: 
msg_ex˚±i⁄
(msg) {}

25 
	gsy¡ax_îr‹
 : 
public
 
msg_ex˚±i⁄
 {

26 
sy¡ax_îr‹
(c⁄° 
°d
::
°rög
& 
msg
Ë: 
msg_ex˚±i⁄
(msg) {}

29 
	gty≥_îr‹
 : 
public
 
msg_ex˚±i⁄
 {

30 
ty≥_îr‹
(c⁄° 
°d
::
°rög
& 
msg
Ë: 
msg_ex˚±i⁄
(msg) {}

33 
	gundeföed_›î©i⁄
 : 
public
 
msg_ex˚±i⁄
 {

34 
undeföed_›î©i⁄
(c⁄° 
°d
::
°rög
& 
›
, c⁄° 
TokíBa£
* 
À·
, c⁄° TokíBa£* 
right
)

35 : 
undeföed_›î©i⁄
(
›
, 
∑ckTokí
(
À·
->
˛⁄e
()),ÖackTokí(
right
->clone())) {}

36 
undeföed_›î©i⁄
(c⁄° 
°d
::
°rög
& 
›
, c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
)

37 : 
msg_ex˚±i⁄
("U√x≥˘ed o≥øti⁄ wôh o≥øt‹ '" + 
›
 + "'ánd o≥ønds: " + 
À·
.
°r
(Ë+ "ánd " + 
right
.str() + ".") {}

	@shunting-yard.cpp

1 
	~"shu¡ög-y¨d.h
"

2 
	~"shu¡ög-y¨d-ex˚±i⁄s.h
"

4 
	~<c°dlib
>

5 
	~<io°ªam
>

6 
	~<s°ªam
>

7 
	~<°dex˚±
>

8 
	~<ex˚±i⁄
>

9 
	~<°rög
>

10 
	~<°ack
>

11 
	~<utûôy
>

12 
	~<c°rög
>

17 
uöt32_t
 
	gO≥øti⁄
::
	$mask
(
tokTy≥_t
 
ty≥
) {

18 i‡(
ty≥
 =
ANY_TYPE
) {

21  ((
ty≥
 & 0xE0) << 24) | (1 << (type & 0x1F));

23 
	}
}

26 
›ID_t
 
	gO≥øti⁄
::
	$buûd_mask
(
tokTy≥_t
 
À·
,ÅokTy≥_à
right
) {

27 
›ID_t
 
ªsu…
 = 
	`mask
(
À·
);

28  (
ªsu…
 << 32Ë| 
	`mask
(
right
);

29 
	}
}

33 
boﬁ
 
	$m©ch_›_id
(
›ID_t
 
id
, opID_à
mask
) {

34 
uöt64_t
 
ªsu…
 = 
id
 & 
mask
;

35 
uöt32_t
* 
vÆ
 = 
ªöãΩªt_ˇ°
<uöt32_t*>(&
ªsu…
);

36 i‡(
vÆ
[0] && vÆ[1]Ë 
åue
;

37  
Ál£
;

38 
	}
}

40 
TokíBa£
* 
	$exec_›î©i⁄
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

41 
evÆu©i⁄D©a
* 
d©a
, c⁄° 
°d
::
°rög
& 
OP_MASK
) {

42 autÿ
ô
 = 
d©a
->
›M≠
.
	`föd
(
OP_MASK
);

43 i‡(
ô
 =
d©a
->
›M≠
.
	`íd
())  0;

44 c⁄° 
O≥øti⁄
& 
›î©i⁄
 : 
ô
->
£c⁄d
) {

45 i‡(
	`m©ch_›_id
(
d©a
->
›ID
, 
›î©i⁄
.
	`gëMask
())) {

46 
åy
 {

47  
›î©i⁄
.
	`exec
(
À·
, 
right
, 
d©a
).
	`ªÀa£
();

48 } 
	`ˇtch
 (
O≥øti⁄
::
Reje˘
 
e
) {

55 
	}
}

57 
ölöe
 
	g°d
::
°rög
 
	$n‹mÆize_›
(
°d
::
°rög
 
›
) {

58 i‡(
›
[0] == 'L' || op[0] == 'R') {

59 
›
.
	`îa£
(0, 1);

60  
›
;

62  
›
;

64 
	}
}

70 
TokíBa£
* 
	$ªsﬁve_ª„ªn˚
(
TokíBa£
* 
b
, 
TokíM≠
* 
sc›e
 = 0) {

71 i‡(
b
->
ty≥
 & 
REF
) {

73 
RefTokí
* 
ªf
 = 
°©ic_ˇ°
<RefTokí*>(
b
);

74 
TokíBa£
* 
vÆue
 = 
ªf
->
	`ªsﬁve
(
sc›e
);

76 
dñëe
 
ªf
;

77  
vÆue
;

80  
b
;

81 
	}
}

86 
	gC⁄fig_t
& 
	gˇlcuœt‹
::
	$DeÁu…
() {

87 
C⁄fig_t
 
c⁄f
;

88  
c⁄f
;

89 
	}
}

91 
	gty≥M≠_t
& 
	gˇlcuœt‹
::
	$ty≥_©åibuã_m≠
() {

92 
ty≥M≠_t
 
ty≥_m≠
;

93  
ty≥_m≠
;

94 
	}
}

98 
	gΩnBuûdî
::
	$˛ónRPN
(
TokíQueue_t
* 
Ωn
) {

99 
Ωn
->
	`size
()) {

100 
dñëe
 
	`ªsﬁve_ª„ªn˚
(
Ωn
->
	`‰⁄t
());

101 
Ωn
->
	`p›
();

103 
	}
}

121 
	gΩnBuûdî
::
	$h™dÀ_›Sèck
(c⁄° 
°d
::
°rög
& 
›
) {

122 
°d
::
°rög
 
cur_›
;

125 i‡(
›p
.
	`assoc
(
›
) == 0) {

126 !
›Sèck
.
	`em±y
() &&

127 
›p
.
	`¥ec
(
›
Ë>›p.¥ec(
›Sèck
.
	`t›
())) {

128 
cur_›
 = 
	`n‹mÆize_›
(
›Sèck
.
	`t›
());

129 
Ωn
.
	`push
(
√w
 
Tokí
<
°d
::
°rög
>(
cur_›
, 
OP
));

130 
›Sèck
.
	`p›
();

133 !
›Sèck
.
	`em±y
() &&

134 
›p
.
	`¥ec
(
›
Ë> oµ.¥ec(
›Sèck
.
	`t›
())) {

135 
cur_›
 = 
	`n‹mÆize_›
(
›Sèck
.
	`t›
());

136 
Ωn
.
	`push
(
√w
 
Tokí
<
°d
::
°rög
>(
cur_›
, 
OP
));

137 
›Sèck
.
	`p›
();

140 
	}
}

142 
	gΩnBuûdî
::
	$h™dÀ_bö¨y
(c⁄° 
°d
::
°rög
& 
›
) {

144 
	`h™dÀ_›Sèck
(
›
);

146 
›Sèck
.
	`push
(
›
);

147 
	}
}

150 
	gΩnBuûdî
::
	$h™dÀ_À·_u«ry
(c⁄° 
°d
::
°rög
& 
u«ry_›
) {

151 
this
->
Ωn
.
	`push
(
√w
 
	`TokíU«ry
());

153 
›Sèck
.
	`push
(
u«ry_›
);

154 
	}
}

157 
	gΩnBuûdî
::
	$h™dÀ_right_u«ry
(c⁄° 
°d
::
°rög
& 
u«ry_›
) {

159 
	`h™dÀ_›Sèck
(
u«ry_›
);

161 
this
->
Ωn
.
	`push
(
√w
 
	`TokíU«ry
());

163 
Ωn
.
	`push
(
√w
 
Tokí
<
°d
::
°rög
>(
	`n‹mÆize_›
(
u«ry_›
), 
OP
));

164 
	}
}

167 
	gΩnBuûdî
::
	$h™dÀ_›
(c⁄° 
°d
::
°rög
& 
›
) {

169 i‡(
this
->
œ°TokíWasOp
) {

170 i‡(
›p
.
	`exi°s
("L"+
›
)) {

171 
	`h™dÀ_À·_u«ry
("L"+
›
);

172 
this
->
œ°TokíWasU«ry
 = 
åue
;

173 
this
->
œ°TokíWasOp
 = 
›
[0];

175 
	`˛ónRPN
(&(
this
->
Ωn
));

176 
throw
 
°d
::
	`domaö_îr‹
(

177 "Uƒecognized u«ry o≥øt‹: '" + 
›
 + "'.");

181 } i‡(
›p
.
	`exi°s
("R"+
›
)) {

182 
	`h™dÀ_right_u«ry
("R"+
›
);

186 
this
->
œ°TokíWasU«ry
 = 
Ál£
;

187 
this
->
œ°TokíWasOp
 = 
Ál£
;

191 i‡(
›p
.
	`exi°s
(
›
)) {

192 
	`h™dÀ_bö¨y
(
›
);

194 
	`˛ónRPN
(&(
Ωn
));

195 
throw
 
°d
::
	`domaö_îr‹
(

196 "Undeföed o≥øt‹: `" + 
›
 + "`!");

199 
this
->
œ°TokíWasU«ry
 = 
Ál£
;

200 
this
->
œ°TokíWasOp
 = 
›
[0];

202 
	}
}

204 
	gΩnBuûdî
::
	$h™dÀ_tokí
(
TokíBa£
* 
tokí
) {

205 
Ωn
.
	`push
(
tokí
);

206 
œ°TokíWasOp
 = 
Ál£
;

207 
œ°TokíWasU«ry
 = 
Ál£
;

208 
	}
}

210 
	gΩnBuûdî
::
	$›í_bøckë
(c⁄° 
°d
::
°rög
& 
bøckë
) {

211 
›Sèck
.
	`push
(
bøckë
);

212 
œ°TokíWasOp
 = 
bøckë
[0];

213 
œ°TokíWasU«ry
 = 
Ál£
;

214 ++
bøckëLevñ
;

215 
	}
}

217 
	gΩnBuûdî
::
	$˛o£_bøckë
(c⁄° 
°d
::
°rög
& 
bøckë
) {

218 i‡(
œ°TokíWasOp
 =
bøckë
[0]) {

219 
Ωn
.
	`push
(
√w
 
	`Tu∂e
());

222 
°d
::
°rög
 
cur_›
;

223 
›Sèck
.
	`size
(Ë&& opSèck.
	`t›
(Ë!
bøckë
) {

224 
cur_›
 = 
	`n‹mÆize_›
(
›Sèck
.
	`t›
());

225 
Ωn
.
	`push
(
√w
 
Tokí
<
°d
::
°rög
>(
cur_›
, 
OP
));

226 
›Sèck
.
	`p›
();

229 i‡(
›Sèck
.
	`size
() == 0) {

230 
ΩnBuûdî
::
	`˛ónRPN
(&
Ωn
);

231 
throw
 
	`sy¡ax_îr‹
("Exå®'" + 
bøckë
 + "' onÅheÉxpression!");

234 
›Sèck
.
	`p›
();

235 
œ°TokíWasOp
 = 
Ál£
;

236 
œ°TokíWasU«ry
 = 
Ál£
;

237 --
bøckëLevñ
;

238 
	}
}

247 
	gˇlcuœt‹
::
RAII_TokíQueue_t
 : 
TokíQueue_t
 {

248 
RAII_TokíQueue_t
() {}

249 
RAII_TokíQueue_t
(c⁄° 
TokíQueue_t
& 
Ωn
) : TokenQueue_t(rpn) {}

250 ~
RAII_TokíQueue_t
(Ë{ 
ΩnBuûdî
::
˛ónRPN
(
this
); }

252 
RAII_TokíQueue_t
(c⁄° RAII_TokíQueue_t& 
Ωn
) {

253 
throw
 
	g°d
::
ru¡ime_îr‹
("You shouldÇot copyÅhis class!");

255 
	gRAII_TokíQueue_t
& 
	g›î©‹
=(c⁄° 
RAII_TokíQueue_t
& 
Ωn
) {

256 
throw
 
°d
::
ru¡ime_îr‹
("You shouldÇot copyÅhis class!");

262 
TokíQueue_t
 
	gˇlcuœt‹
::
	$toRPN
(c⁄° * 
ex¥
,

263 
TokíM≠
 
v¨s
, c⁄° * 
dñim
,

264 c⁄° ** 
ª°
, 
C⁄fig_t
 
c⁄fig
) {

265 
ΩnBuûdî
 
	`d©a
(
v¨s
, 
c⁄fig
.
›Pª˚dí˚
);

266 * 
√xtCh¨
;

268 
c
 = '\0';

269 i‡(!
dñim
Ëdñim = &
c
;

271 *
ex¥
 && 
	`is•a˚
(*ex¥Ë&& !
	`°rchr
(
dñim
, *expr)) ++expr;

273 i‡(*
ex¥
 ='\0' || 
	`°rchr
(
dñim
, *expr)) {

274 
throw
 
°d
::
	`övÆid_¨gumít
("Cannot buildá calculator frománÉmptyÉxpression!");

279 *
ex¥
 && (
d©a
.
bøckëLevñ
 || !
	`°rchr
(
dñim
, *expr))) {

280 i‡(
	`isdigô
(*
ex¥
)) {

282 
öt64_t
 
_öt
 = 
	`°πﬁ
(
ex¥
, &
√xtCh¨
, 10);

285 i‡(!
	`°rchr
(".eE", *
√xtCh¨
)) {

286 
d©a
.
	`h™dÀ_tokí
(
√w
 
Tokí
<
öt64_t
>(
_öt
, 
INT
));

288 
digô
 = 
	`°πod
(
ex¥
, &
√xtCh¨
);

289 
d©a
.
	`h™dÀ_tokí
(
√w
 
Tokí
<>(
digô
, 
REAL
));

292 
ex¥
 = 
√xtCh¨
;

293 } i‡(
ΩnBuûdî
::
	`isv¨ch¨
(*
ex¥
)) {

294 
rW‹dP¨£r_t
* 
∑r£r
;

298 
°d
::
°rög
 
key
 = 
ΩnBuûdî
::
	`∑r£V¨
(
ex¥
, &expr);

300 i‡((
∑r£r
=
c⁄fig
.
∑r£rM≠
.
	`föd
(
key
))) {

302 
åy
 {

303 
	`∑r£r
(
ex¥
, &ex¥, &
d©a
);

304 } 
	`ˇtch
 (...) {

305 
ΩnBuûdî
::
	`˛ónRPN
(&
d©a
.
Ωn
);

306 
throw
;

309 
∑ckTokí
* 
vÆue
 = 
v¨s
.
	`föd
(
key
);

311 i‡(
vÆue
) {

313 
TokíBa£
* 
c›y
 = (*
vÆue
)->
	`˛⁄e
();

314 
d©a
.
	`h™dÀ_tokí
(
√w
 
	`RefTokí
(
key
, 
c›y
));

317 
d©a
.
	`h™dÀ_tokí
(
√w
 
Tokí
<
°d
::
°rög
>(
key
, 
VAR
));

320 } i‡(*
ex¥
 == '\'' || *expr == '"') {

323 
quŸe
 = *
ex¥
;

325 ++
ex¥
;

326 
°d
::
°rög°ªam
 
ss
;

327 *
ex¥
 && *ex¥ !
quŸe
 && *expr != '\n') {

328 i‡(*
ex¥
 == '\\') {

329 
ex¥
[1]) {

331 
ex¥
+=2;

332 
ss
 << '\n';

335 
ex¥
+=2;

336 
ss
 << '\t';

339 i‡(
	`°rchr
("\"'\n", 
ex¥
[1])) ++expr;

340 
ss
 << *
ex¥
;

341 ++
ex¥
;

344 
ss
 << *
ex¥
;

345 ++
ex¥
;

349 i‡(*
ex¥
 !
quŸe
) {

350 
°d
::
°rög
 
squŸe
 = (
quŸe
 == '"' ? "\"": "'");

351 
ΩnBuûdî
::
	`˛ónRPN
(&
d©a
.
Ωn
);

352 
throw
 
	`sy¡ax_îr‹
("Ex≥˘ed quŸê(" + 
squŸe
 +

353 "Ë©Énd o‡°rög de˛¨©i⁄: " + 
squŸe
 + 
ss
.
	`°r
() + ".");

355 ++
ex¥
;

356 
d©a
.
	`h™dÀ_tokí
(
√w
 
Tokí
<
°d
::
°rög
>(
ss
.
	`°r
(), 
STR
));

359 *
ex¥
) {

362 i‡(
d©a
.
œ°TokíWasOp
 =
Ál£
) {

364 
d©a
.
	`h™dÀ_›
("()");

367 
d©a
.
	`›í_bøckë
("(");

368 ++
ex¥
;

371 i‡(
d©a
.
œ°TokíWasOp
 =
Ál£
) {

373 
d©a
.
	`h™dÀ_›
("[]");

377 
d©a
.
	`h™dÀ_tokí
(
√w
 
	`CµFun˘i⁄
(&
TokíLi°
::
deÁu…_c⁄°ru˘‹
, "list"));

380 
d©a
.
	`h™dÀ_›
("()");

383 
d©a
.
	`›í_bøckë
("[");

384 ++
ex¥
;

388 
d©a
.
	`h™dÀ_tokí
(
√w
 
	`CµFun˘i⁄
(&
TokíM≠
::
deÁu…_c⁄°ru˘‹
, "map"));

391 
d©a
.
	`h™dÀ_›
("()");

392 
d©a
.
	`›í_bøckë
("{");

393 ++
ex¥
;

396 
d©a
.
	`˛o£_bøckë
("(");

397 ++
ex¥
;

400 
d©a
.
	`˛o£_bøckë
("[");

401 ++
ex¥
;

404 
d©a
.
	`˛o£_bøckë
("{");

405 ++
ex¥
;

411 c⁄° * 
°¨t
 = 
ex¥
;

412 
°d
::
°rög°ªam
 
ss
;

413 
ss
 << *
ex¥
;

414 ++
ex¥
;

415 *
ex¥
 && 
	`i•un˘
(*ex¥Ë&& !
	`°rchr
("+-'\"()[]{}_", *expr)) {

416 
ss
 << *
ex¥
;

417 ++
ex¥
;

419 
°d
::
°rög
 
›
 = 
ss
.
	`°r
();

422 
rW‹dP¨£r_t
* 
∑r£r
 = 
c⁄fig
.
∑r£rM≠
.
	`föd
(
›
);

428 i‡(
∑r£r
) {

430 
åy
 {

431 
	`∑r£r
(
ex¥
, &ex¥, &
d©a
);

432 } 
	`ˇtch
 (...) {

433 
ΩnBuûdî
::
	`˛ónRPN
(&
d©a
.
Ωn
);

434 
throw
;

436 } i‡(
d©a
.
›p
.
	`exi°s
(
›
)) {

437 
d©a
.
	`h™dÀ_›
(
›
);

438 } i‡((
∑r£r
=
c⁄fig
.
∑r£rM≠
.
	`föd
(
›
[0]))) {

439 
ex¥
 = 
°¨t
+1;

440 
åy
 {

441 
	`∑r£r
(
ex¥
, &ex¥, &
d©a
);

442 } 
	`ˇtch
 (...) {

443 
ΩnBuûdî
::
	`˛ónRPN
(&
d©a
.
Ωn
);

444 
throw
;

447 
ΩnBuûdî
::
	`˛ónRPN
(&
d©a
.
Ωn
);

448 
throw
 
	`sy¡ax_îr‹
("InvÆid o≥øt‹: " + 
›
);

454 *
ex¥
 && 
	`is•a˚
(*expr)

455 && (
d©a
.
bøckëLevñ
 || !
	`°rchr
(
dñim
, *
ex¥
))) ++expr;

459 i‡(
d©a
.
œ°TokíWasU«ry
) {

460 
ΩnBuûdî
::
	`˛ónRPN
(&
d©a
.
Ωn
);

461 
throw
 
	`sy¡ax_îr‹
("Ex≥˘ed o≥øndá·î u«ry o≥øt‹ `" + 
d©a
.
›Sèck
.
	`t›
() + "`");

464 
°d
::
°rög
 
cur_›
;

465 !
d©a
.
›Sèck
.
	`em±y
()) {

466 
cur_›
 = 
	`n‹mÆize_›
(
d©a
.
›Sèck
.
	`t›
());

467 
d©a
.
Ωn
.
	`push
(
√w
 
Tokí
<
°d
::
°rög
>(
cur_›
, 
OP
));

468 
d©a
.
›Sèck
.
	`p›
();

472 i‡(
d©a
.
Ωn
.
	`size
(Ë=0Ëd©a.Ωn.
	`push
(
√w
 
	`TokíN⁄e
());

473 i‡(
ª°
Ë*ª° = 
ex¥
;

474  
d©a
.
Ωn
;

475 
	}
}

477 
∑ckTokí
 
	gˇlcuœt‹
::
	$ˇlcuœã
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
,

478 c⁄° * 
dñim
, c⁄° ** 
ª°
) {

480 
RAII_TokíQueue_t
 
Ωn
 = 
ˇlcuœt‹
::
	`toRPN
(
ex¥
, 
v¨s
, 
dñim
, 
ª°
);

482 
TokíBa£
* 
ªt
 = 
ˇlcuœt‹
::
	`ˇlcuœã
(
Ωn
, 
v¨s
);

484  
	`∑ckTokí
(
	`ªsﬁve_ª„ªn˚
(
ªt
));

485 
	}
}

487 
˛ónSèck
(
°d
::
°ack
<
TokíBa£
*> 
°
) {

488 
°
.
size
() > 0) {

489 
dñëe
 
ªsﬁve_ª„ªn˚
(
°
.
t›
());

490 
	g°
.
p›
();

494 
TokíBa£
* 
	gˇlcuœt‹
::
	$ˇlcuœã
(c⁄° 
TokíQueue_t
& 
Ωn
, 
TokíM≠
 
sc›e
,

495 c⁄° 
C⁄fig_t
& 
c⁄fig
) {

496 
evÆu©i⁄D©a
 
	`d©a
(
Ωn
, 
sc›e
, 
c⁄fig
.
›M≠
);

499 
°d
::
°ack
<
TokíBa£
*> 
evÆu©i⁄
;

500 !
d©a
.
Ωn
.
	`em±y
()) {

501 
TokíBa£
* 
ba£
 = 
d©a
.
Ωn
.
	`‰⁄t
()->
	`˛⁄e
();

502 
d©a
.
Ωn
.
	`p›
();

505 i‡(
ba£
->
ty≥
 =
OP
) {

506 
d©a
.
›
 = 
°©ic_ˇ°
<
Tokí
<
°d
::
°rög
>*>(
ba£
)->
vÆ
;

507 
dñëe
 
ba£
;

511 i‡(
evÆu©i⁄
.
	`size
() < 2) {

512 
	`˛ónSèck
(
evÆu©i⁄
);

513 
throw
 
°d
::
	`domaö_îr‹
("InvalidÉquation.");

515 
TokíBa£
* 
r_tokí
 = 
evÆu©i⁄
.
	`t›
();ÉvÆu©i⁄.
	`p›
();

516 
TokíBa£
* 
l_tokí
 = 
evÆu©i⁄
.
	`t›
();ÉvÆu©i⁄.
	`p›
();

518 i‡(
r_tokí
->
ty≥
 =
VAR
) {

519 
°d
::
°rög
 
v¨_«me
 = 
°©ic_ˇ°
<
Tokí
<°d::°rög>*>(
r_tokí
)->
vÆ
;

520 
dñëe
 
r_tokí
;

521 
dñëe
 
	`ªsﬁve_ª„ªn˚
(
l_tokí
);

522 
	`˛ónSèck
(
evÆu©i⁄
);

523 
throw
 
°d
::
	`domaö_îr‹
("U«bÀÅÿfödÅhêv¨übÀ '" + 
v¨_«me
 + "'.");

525 
r_tokí
 = 
	`ªsﬁve_ª„ªn˚
‘_tokí, &
d©a
.
sc›e
);

528 i‡(
l_tokí
->
ty≥
 & 
REF
) {

529 
d©a
.
À·
.
	`ª£t
(
°©ic_ˇ°
<
RefTokí
*>(
l_tokí
));

530 
l_tokí
 = 
d©a
.
À·
->
	`ªsﬁve
(&d©a.
sc›e
);

531 } i‡(
l_tokí
->
ty≥
 =
VAR
) {

532 
∑ckTokí
 
key
 = 
°©ic_ˇ°
<
Tokí
<
°d
::
°rög
>*>(
l_tokí
)->
vÆ
;

533 
d©a
.
À·
.
	`ª£t
(
√w
 
	`RefTokí
(
key
));

535 
d©a
.
À·
.
	`ª£t
(
√w
 
	`RefTokí
());

538 i‡(
l_tokí
->
ty≥
 =
FUNC
 && 
d©a
.
›
 == "()") {

541 
Fun˘i⁄
* 
l_func
 = 
°©ic_ˇ°
<Fun˘i⁄*>(
l_tokí
);

544 
Tu∂e
 
right
;

545 i‡(
r_tokí
->
ty≥
 =
TUPLE
) {

546 
right
 = *
°©ic_ˇ°
<
Tu∂e
*>(
r_tokí
);

548 
right
 = 
	`Tu∂e
(
r_tokí
);

550 
dñëe
 
r_tokí
;

552 
∑ckTokí
 
_this
;

553 i‡(
d©a
.
À·
->
‹igö
->
ty≥
 !
NONE
) {

554 
_this
 = 
d©a
.
À·
->
‹igö
;

556 
_this
 = 
d©a
.
sc›e
;

560 
∑ckTokí
 
ªt
;

561 
åy
 {

562 
ªt
 = 
Fun˘i⁄
::
	`ˇŒ
(
_this
, 
l_func
, &
right
, 
d©a
.
sc›e
);

563 } 
	`ˇtch
 (...) {

564 
	`˛ónSèck
(
evÆu©i⁄
);

565 
dñëe
 
l_func
;

566 
throw
;

569 
dñëe
 
l_func
;

570 
evÆu©i⁄
.
	`push
(
ªt
->
	`˛⁄e
());

574 
d©a
.
›ID
 = 
O≥øti⁄
::
	`buûd_mask
(
l_tokí
->
ty≥
, 
r_tokí
->type);

575 
∑ckTokí
 
	`l_∑ck
(
l_tokí
);

576 
∑ckTokí
 
	`r_∑ck
(
r_tokí
);

577 
TokíBa£
* 
ªsu…
 = 0;

579 
åy
 {

581 
ªsu…
 = 
	`exec_›î©i⁄
(
l_∑ck
, 
r_∑ck
, &
d©a
, d©a.
›
);

582 i‡(!
ªsu…
) {

583 
ªsu…
 = 
	`exec_›î©i⁄
(
l_∑ck
, 
r_∑ck
, &
d©a
, 
ANY_OP
);

585 } 
	`ˇtch
 (...) {

586 
	`˛ónSèck
(
evÆu©i⁄
);

587 
throw
;

590 i‡(
ªsu…
) {

591 
evÆu©i⁄
.
	`push
(
ªsu…
);

593 
	`˛ónSèck
(
evÆu©i⁄
);

594 
throw
 
	`undeföed_›î©i⁄
(
d©a
.
›
, 
l_∑ck
, 
r_∑ck
);

597 } i‡(
ba£
->
ty≥
 =
VAR
) {

598 
∑ckTokí
* 
vÆue
 = 
NULL
;

599 
°d
::
°rög
 
key
 = 
°©ic_ˇ°
<
Tokí
<°d::°rög>*>(
ba£
)->
vÆ
;

601 
vÆue
 = 
d©a
.
sc›e
.
	`föd
(
key
);

603 i‡(
vÆue
) {

604 
TokíBa£
* 
c›y
 = (*
vÆue
)->
	`˛⁄e
();

605 
evÆu©i⁄
.
	`push
(
√w
 
	`RefTokí
(
key
, 
c›y
));

606 
dñëe
 
ba£
;

608 
evÆu©i⁄
.
	`push
(
ba£
);

611 
evÆu©i⁄
.
	`push
(
ba£
);

615  
evÆu©i⁄
.
	`t›
();

616 
	}
}

620 
	gˇlcuœt‹
::~
	$ˇlcuœt‹
() {

621 
ΩnBuûdî
::
	`˛ónRPN
(&
this
->
RPN
);

622 
	}
}

624 
	gˇlcuœt‹
::
	$ˇlcuœt‹
(c⁄° 
ˇlcuœt‹
& 
ˇlc
) {

625 
TokíQueue_t
 
_Ωn
 = 
ˇlc
.
RPN
;

629 !
_Ωn
.
	`em±y
()) {

630 
TokíBa£
* 
ba£
 = 
_Ωn
.
	`‰⁄t
();

631 
_Ωn
.
	`p›
();

632 
this
->
RPN
.
	`push
(
ba£
->
	`˛⁄e
());

634 
	}
}

639 
	gˇlcuœt‹
::
	$ˇlcuœt‹
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
, c⁄° * 
dñim
,

640 c⁄° ** 
ª°
, c⁄° 
C⁄fig_t
& 
c⁄fig
) {

641 
this
->
RPN
 = 
ˇlcuœt‹
::
	`toRPN
(
ex¥
, 
v¨s
, 
dñim
, 
ª°
, 
c⁄fig
);

642 
	}
}

644 
	gˇlcuœt‹
::
	$compûe
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
, c⁄° * 
dñim
,

645 c⁄° ** 
ª°
) {

647 
ΩnBuûdî
::
	`˛ónRPN
(&
this
->
RPN
);

649 
this
->
RPN
 = 
ˇlcuœt‹
::
	`toRPN
(
ex¥
, 
v¨s
, 
dñim
, 
ª°
, 
	`C⁄fig
());

650 
	}
}

652 
∑ckTokí
 
	gˇlcuœt‹
::
	$evÆ
(
TokíM≠
 
v¨s
, 
boﬁ
 
kìp_ªfs
) const {

653 
TokíBa£
* 
vÆue
 = 
	`ˇlcuœã
(
this
->
RPN
, 
v¨s
, 
	`C⁄fig
());

654 
∑ckTokí
 
p
 = 
	`∑ckTokí
(
vÆue
->
	`˛⁄e
());

655 i‡(
kìp_ªfs
) {

656  
	`∑ckTokí
(
vÆue
);

658  
	`∑ckTokí
(
	`ªsﬁve_ª„ªn˚
(
vÆue
));

660 
	}
}

662 
	gˇlcuœt‹
& cÆcuœt‹::
›î©‹
=(c⁄° 
ˇlcuœt‹
& 
ˇlc
) {

664 
ΩnBuûdî
::
˛ónRPN
(&
this
->
RPN
);

668 
TokíQueue_t
 
	g_Ωn
 = 
ˇlc
.
RPN
;

669 !
	g_Ωn
.
em±y
()) {

670 
TokíBa£
* 
	gba£
 = 
_Ωn
.
‰⁄t
();

671 
	g_Ωn
.
p›
();

672 
	gthis
->
	gRPN
.
push
(
ba£
->
˛⁄e
());

674  *
	gthis
;

679 
	g°d
::
°rög
 
ˇlcuœt‹
::
	$°r
() const {

680  
	`°r
(
this
->
RPN
);

681 
	}
}

683 
	g°d
::
°rög
 
ˇlcuœt‹
::
	$°r
(
TokíQueue_t
 
Ωn
) {

684 
°d
::
°rög°ªam
 
ss
;

686 
ss
 << "calculator { RPN: [ ";

687 
Ωn
.
	`size
()) {

688 
ss
 << 
	`∑ckTokí
(
	`ªsﬁve_ª„ªn˚
(
Ωn
.
	`‰⁄t
()->
	`˛⁄e
())).
	`°r
();

689 
Ωn
.
	`p›
();

691 
ss
 << (
Ωn
.
	`size
() ? ", ":"");

693 
ss
 << " ] }";

694  
ss
.
	`°r
();

695 
	}
}

	@shunting-yard.h

1 #i‚de‡
SHUNTING_YARD_H_


2 
	#SHUNTING_YARD_H_


	)

3 
	~<io°ªam
>

5 
	~<m≠
>

6 
	~<°ack
>

7 
	~<°rög
>

8 
	~<queue
>

9 
	~<li°
>

10 
	~<ve˘‹
>

11 
	~<£t
>

12 
	~<s°ªam
>

13 
	~<mem‹y
>

22 
uöt8_t
 
	ttokTy≥_t
;

23 
uöt64_t
 
	t›ID_t
;

24 
	etokTy≥
 {

26 
	mNONE
, 
	mOP
, 
	mUNARY
, 
	mVAR
,

30 
	mSTR
, 
	mFUNC
,

33 
	mNUM
 = 0x20,

34 
	mREAL
 = 0x21,

35 
	mINT
 = 0x22,

36 
	mBOOL
 = 0x23,

39 
	mIT
 = 0x40,

40 
	mLIST
 = 0x41,

41 
	mTUPLE
 = 0x42,

42 
	mSTUPLE
 = 0x43,

43 
	mMAP
 = 0x44,

46 
	mREF
 = 0x80,

49 
	mANY_TYPE
 = 0xFF

52 
	#ANY_OP
 ""

	)

54 
	sTokíBa£
 {

55 
tokTy≥_t
 
	mty≥
;

57 
	mvútuÆ
 ~
TokíBa£
() {}

58 
TokíBa£
() {}

59 
TokíBa£
(
tokTy≥_t
 
ty≥
) :Åype(type) {}

61 
vútuÆ
 
TokíBa£
* 
˛⁄e
() const = 0;

64 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cTokí
 : 
public
 
TokíBa£
 {

65 
public
:

66 
T
 
vÆ
;

67 
	$Tokí
(
T
 
t
, 
tokTy≥_t
 
ty≥
Ë: 
	`TokíBa£
—y≥), 
	$vÆ
(
t
) {}

68 
vútuÆ
 
TokíBa£
* 
	$˛⁄e
() const {

69  
√w
 
	`Tokí
(*
this
);

70 
	}
}

73 
	gTokíN⁄e
 : 
public
 
TokíBa£
 {

74 
TokíN⁄e
(Ë: 
TokíBa£
(
NONE
) {}

75 
vútuÆ
 
TokíBa£
* 
˛⁄e
() const {

76  
√w
 
TokíN⁄e
(*
this
);

80 
	gTokíU«ry
 : 
public
 
TokíBa£
 {

81 
TokíU«ry
(Ë: 
TokíBa£
(
UNARY
) {}

82 
vútuÆ
 
TokíBa£
* 
˛⁄e
() const {

83  
√w
 
TokíU«ry
(*
this
);

87 
˛ass
 
	g∑ckTokí
;

88 
	g°d
::
	tqueue
<
	tTokíBa£
*> 
	tTokíQueue_t
;

89 ˛as†
	cOµM≠_t
 {

91 
	m°d
::
£t
<
°d
::
°rög
> 
RtoL
;

93 
	m°d
::
m≠
<
°d
::
°rög
, > 
	m¥_m≠
;

95 
	mpublic
:

96 
	$OµM≠_t
() {

99 
¥_m≠
["[]"] = -1;Ör_map["()"] = -1;

100 
¥_m≠
["["] = 0x7FFFFFFF;Ör_map["("] = 0x7FFFFFFF;Ör_map["{"] = 0x7FFFFFFF;

101 
RtoL
.
	`ö£π
("=");

104 
	$add
(c⁄° 
°d
::
°rög
& 
›
, 
¥e˚dí˚
) {

105 i‡(
¥e˚dí˚
 < 0) {

106 
RtoL
.
	`ö£π
(
›
);

107 
¥e˚dí˚
 = -precedence;

110 
¥_m≠
[
›
] = 
¥e˚dí˚
;

111 
	}
}

113 
	$addU«ry
(c⁄° 
°d
::
°rög
& 
›
, 
¥e˚dí˚
) {

114 
	`add
("L"+
›
, 
¥e˚dí˚
);

119 i‡(!
	`exi°s
(
›
)) {

120 
	`add
(
›
, 
¥e˚dí˚
);

122 
	}
}

124 
	$addRightU«ry
(c⁄° 
°d
::
°rög
& 
›
, 
¥e˚dí˚
) {

125 
	`add
("R"+
›
, 
¥e˚dí˚
);

130 i‡(!
	`exi°s
(
›
)) {

131 
	`add
(
›
, 
¥e˚dí˚
);

140 
	}
}

142 
	$¥ec
(c⁄° 
°d
::
°rög
& 
›
Ëc⁄° {  
¥_m≠
.
	`©
(›); 
	}
}

143 
boﬁ
 
	$assoc
(c⁄° 
°d
::
°rög
& 
›
Ëc⁄° {  
RtoL
.
	`cou¡
(›); 
	}
}

144 
boﬁ
 
	$exi°s
(c⁄° 
°d
::
°rög
& 
›
Ëc⁄° {  
¥_m≠
.
	`cou¡
(›); 
	}
}

147 
˛ass
 
	gTokíM≠
;

148 
˛ass
 
	gTokíLi°
;

149 
˛ass
 
	gTu∂e
;

150 
˛ass
 
	gSTu∂e
;

151 
˛ass
 
	gFun˘i⁄
;

152 
	~"∑ckTokí.h
"

155 
	~"c⁄èöîs.h
"

159 
	~"fun˘i⁄s.h
"

163 
	sΩnBuûdî
 {

164 
TokíQueue_t
 
	mΩn
;

165 
	m°d
::
°ack
<
°d
::
°rög
> 
›Sèck
;

166 
uöt8_t
 
	mœ°TokíWasOp
 = 
åue
;

167 
boﬁ
 
	mœ°TokíWasU«ry
 = 
Ál£
;

168 
TokíM≠
 
	msc›e
;

169 c⁄° 
	mOµM≠_t
& 
	m›p
;

174 
uöt32_t
 
	mbøckëLevñ
 = 0;

176 
ΩnBuûdî
(
TokíM≠
 
sc›e
, c⁄° 
OµM≠_t
& 
›p
) : scope(scope), opp(opp) {}

178 
	mpublic
:

179 
˛ónRPN
(
TokíQueue_t
* 
Ωn
);

181 
	mpublic
:

182 
h™dÀ_›
(c⁄° 
°d
::
°rög
& 
›
);

183 
h™dÀ_tokí
(
TokíBa£
* 
tokí
);

184 
›í_bøckë
(c⁄° 
°d
::
°rög
& 
bøckë
);

185 
˛o£_bøckë
(c⁄° 
°d
::
°rög
& 
bøckë
);

190 
ölöe
 
boﬁ
 
isv¨ch¨
(c⁄° 
c
) {

191  
ißÕha
(
c
Ë|| 
	mc
 == '_';

194 
ölöe
 
	m°d
::
°rög
 
∑r£V¨
(c⁄° * 
ex¥
, c⁄° ** 
ª°
 = 0) {

195 
°d
::
°rög°ªam
 
ss
;

196 
	mss
 << *
	mex¥
;

197 ++
	mex¥
;

198 
	mΩnBuûdî
::
isv¨ch¨
(*
ex¥
Ë|| 
isdigô
(*expr)) {

199 
ss
 << *
ex¥
;

200 ++
	mex¥
;

202 i‡(
	mª°
Ë*ª° = 
ex¥
;

203  
	mss
.
°r
();

206 
	m¥iv©e
:

207 
h™dÀ_›Sèck
(c⁄° 
°d
::
°rög
& 
›
);

208 
h™dÀ_bö¨y
(c⁄° 
°d
::
°rög
& 
›
);

209 
h™dÀ_À·_u«ry
(c⁄° 
°d
::
°rög
& 
›
);

210 
h™dÀ_right_u«ry
(c⁄° 
°d
::
°rög
& 
›
);

213 
˛ass
 
	gRefTokí
;

214 
˛ass
 
	g›M≠_t
;

215 
	sevÆu©i⁄D©a
 {

216 
TokíQueue_t
 
	mΩn
;

217 
TokíM≠
 
	msc›e
;

218 c⁄° 
	m›M≠_t
& 
	m›M≠
;

220 
	m°d
::
unique_±r
<
RefTokí
> 
À·
;

222 
	m°d
::
°rög
 
›
;

223 
›ID_t
 
	m›ID
;

225 
evÆu©i⁄D©a
(
TokíQueue_t
 
Ωn
, 
TokíM≠
 
sc›e
, c⁄° 
›M≠_t
& 
›M≠
)

226 : 
Ωn
‘≤), 
sc›e
(sc›e), 
›M≠
(opMap) {}

231 
	trW‹dP¨£r_t
(c⁄° * 
	tex¥
, c⁄° ** 
	tª°
,

232 
	tΩnBuûdî
* 
	td©a
);

233 
	g°d
::
	tm≠
<
	t°d
::
	t°rög
, 
	trW‹dP¨£r_t
*> 
	trW‹dM≠_t
;

234 
	g°d
::
	tm≠
<, 
	trW‹dP¨£r_t
*> 
	trCh¨M≠_t
;

236 
	s∑r£rM≠_t
 {

237 
rW‹dM≠_t
 
	mwm≠
;

238 
rCh¨M≠_t
 
	mcm≠
;

241 
add
(c⁄° 
°d
::
°rög
& 
w‹d
, c⁄° 
rW‹dP¨£r_t
* 
∑r£r
) {

242 
	mwm≠
[
w‹d
] = 
∑r£r
;

246 
add
(
c
, c⁄° 
rW‹dP¨£r_t
* 
∑r£r
) {

247 
	mcm≠
[
c
] = 
∑r£r
;

250 
rW‹dP¨£r_t
* 
föd
(c⁄° 
°d
::
°rög
 
ãxt
) {

251 
rW‹dM≠_t
::
ôî©‹
 
w_ô
;

253 i‡((
	mw_ô
=
wm≠
.
föd
(
ãxt
)Ë!wm≠.
íd
()) {

254  
w_ô
->
£c⁄d
;

260 
rW‹dP¨£r_t
* 
föd
(
c
) {

261 
	mrCh¨M≠_t
::
ôî©‹
 
c_ô
;

263 i‡((
	mc_ô
=
cm≠
.
föd
(
c
)Ë!cm≠.
íd
()) {

264  
c_ô
->
£c⁄d
;

275 ˛as†
	cRefTokí
 : 
public
 
TokíBa£
 {

276 
∑ckTokí
 
‹igöÆ_vÆue
;

278 
	mpublic
:

279 
∑ckTokí
 
key
;

280 
∑ckTokí
 
	m‹igö
;

281 
RefTokí
(
∑ckTokí
 
k
, 
TokíBa£
* 
v
,ÖackTokí 
m
 =ÖackTokí::
	$N⁄e
()) :

282 
	`TokíBa£
(
v
->
ty≥
 | 
REF
), 
	`‹igöÆ_vÆue
(v), 
	`key
(
k
), 
	$‹igö
(
m
) {}

283 
	`RefTokí
(
∑ckTokí
 
k
 =ÖackTokí::
	`N⁄e
(),ÖackTokí 
v
 =ÖackTokí::N⁄e(),ÖackTokí 
m
 =ÖackTokí::
	$N⁄e
()) :

284 
	`TokíBa£
(
v
->
ty≥
 | 
REF
), 
	`‹igöÆ_vÆue
(v), 
	`key
(
k
), 
	$‹igö
(
m
Ë{
	}
}

286 
TokíBa£
* 
	$ªsﬁve
(
TokíM≠
* 
loˇlSc›e
 = 0) const {

287 
TokíBa£
* 
ªsu…
 = 0;

291 i‡(
‹igö
->
ty≥
 =
NONE
 && 
loˇlSc›e
) {

293 
∑ckTokí
* 
r_vÆue
 = 
loˇlSc›e
->
	`föd
(
key
.
	`asSåög
());

294 i‡(
r_vÆue
) {

295 
ªsu…
 = (*
r_vÆue
)->
	`˛⁄e
();

300  
ªsu…
 ?Ñesu… : 
‹igöÆ_vÆue
->
	`˛⁄e
();

301 
	}
}

303 
vútuÆ
 
TokíBa£
* 
	$˛⁄e
() const {

304  
√w
 
	`RefTokí
(*
this
);

305 
	}
}

308 
	s›Sig«tuª_t
 {

309 
tokTy≥_t
 
	mÀ·
; 
	m°d
::
°rög
 
›
;ÅokTy≥_à
	mright
;

310 
›Sig«tuª_t
(c⁄° 
tokTy≥_t
 
L
, c⁄° 
°d
::
°rög
 
›
, c⁄°ÅokTy≥_à
R
)

311 : 
À·
(
L
), 
›
(›), 
right
(
R
) {}

314 ˛as†
	cO≥øti⁄
 {

315 
	mpublic
:

316 
	$∑ckTokí
 (*
	t›Func_t
)(c⁄° 
	t∑ckTokí
& 
	tÀ·
, c⁄°ÖackTokí& 
	tright
,

317 
	tevÆu©i⁄D©a
* 
	td©a
);

319 
public
:

322 
Reje˘
 : 
public
 
°d
::
ex˚±i⁄
 {};

324 
public
:

325 
ölöe
 
uöt32_t
 
	`mask
(
tokTy≥_t
 
ty≥
);

326 
›ID_t
 
	`buûd_mask
(
tokTy≥_t
 
À·
,ÅokTy≥_à
right
);

328 
¥iv©e
:

329 
›ID_t
 
_mask
;

330 
›Func_t
 
_exec
;

332 
public
:

333 
	$O≥øti⁄
(
›Sig«tuª_t
 
sig
, 
›Func_t
 
func
)

334 : 
	`_mask
(
	`buûd_mask
(
sig
.
À·
, sig.
right
)), 
	$_exec
(
func
Ë{
	}
}

336 
	gpublic
:

337 
›ID_t
 
	$gëMask
(Ëc⁄° {  
_mask
; 
	}
}

338 
∑ckTokí
 
	$exec
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

339 
evÆu©i⁄D©a
* 
d©a
) const {

340  
	`_exec
(
À·
, 
right
, 
d©a
);

341 
	}
}

344 
	g°d
::
	tm≠
<
	ttokTy≥_t
, 
	tTokíM≠
> 
	tty≥M≠_t
;

345 
	g°d
::
	tve˘‹
<
	tO≥øti⁄
> 
	t›Li°_t
;

346 
	g›M≠_t
 : 
public
 
°d
::
m≠
<°d::
°rög
, 
	g›Li°_t
> {

347 
add
(c⁄° 
›Sig«tuª_t
 
sig
, 
O≥øti⁄
::
›Func_t
 
func
) {

348 (*
this
)[
sig
.
›
].
push_back
(
O≥øti⁄
(sig, 
func
));

351 
	g°d
::
°rög
 
°r
() const {

352 i‡(
this
->
size
() == 0)  "{}";

354 
	g°d
::
°rög
 
ªsu…
 = "{ ";

355 c⁄°áuto& 
	g∑ú
 : (*
this
)) {

356 
ªsu…
 +"\"" + 
∑ú
.
fú°
 + "\", ";

358 
	gªsu…
.
p›_back
();

359 
	gªsu…
.
p›_back
();

360  
	gªsu…
 + " }";

364 
	sC⁄fig_t
 {

365 
∑r£rM≠_t
 
	m∑r£rM≠
;

366 
OµM≠_t
 
	m›Pª˚dí˚
;

367 
›M≠_t
 
	m›M≠
;

369 
C⁄fig_t
() {}

370 
C⁄fig_t
(
∑r£rM≠_t
 
p
, 
OµM≠_t
 
›p
, 
›M≠_t
 
›M≠
)

371 : 
∑r£rM≠
(
p
), 
›Pª˚dí˚
(
›p
), 
›M≠
(opMap) {}

374 ˛as†
	cˇlcuœt‹
 {

375 
	mpublic
:

376 
C⁄fig_t
& 
DeÁu…
();

378 
	mpublic
:

379 
ty≥M≠_t
& 
ty≥_©åibuã_m≠
();

381 
	mpublic
:

382 
∑ckTokí
 
ˇlcuœã
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
 = &TokíM≠::
em±y
,

383 c⁄° * 
dñim
 = 0, c⁄° ** 
ª°
 = 0);

385 
	mpublic
:

386 
TokíBa£
* 
ˇlcuœã
(c⁄° 
TokíQueue_t
& 
RPN
, 
TokíM≠
 
sc›e
,

387 c⁄° 
C⁄fig_t
& 
c⁄fig
 = 
DeÁu…
());

388 
TokíQueue_t
 
toRPN
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
,

389 c⁄° * 
dñim
 = 0, c⁄° ** 
ª°
 = 0,

390 
C⁄fig_t
 
c⁄fig
 = 
DeÁu…
());

392 
	mpublic
:

394 
RAII_TokíQueue_t
;

396 
	m¥Ÿe˘ed
:

397 
vútuÆ
 c⁄° 
C⁄fig_t
 
	$C⁄fig
(Ëc⁄° {  
	`DeÁu…
(); }

399 
¥iv©e
:

400 
TokíQueue_t
 
RPN
;

402 
public
:

403 
vútuÆ
 ~
	`ˇlcuœt‹
();

404 
	$ˇlcuœt‹
(Ë{ 
this
->
RPN
.
	`push
(
√w
 
	`TokíN⁄e
()); 
	}
}

405 
ˇlcuœt‹
(c⁄° cÆcuœt‹& 
ˇlc
);

406 
ˇlcuœt‹
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
 = &TokíM≠::
em±y
,

407 c⁄° * 
dñim
 = 0, c⁄° ** 
ª°
 = 0,

408 c⁄° 
C⁄fig_t
& 
c⁄fig
 = 
DeÁu…
());

409 
compûe
(c⁄° * 
ex¥
, 
TokíM≠
 
v¨s
 = &TokíM≠::
em±y
,

410 c⁄° * 
dñim
 = 0, c⁄° ** 
ª°
 = 0);

411 
∑ckTokí
 
	$evÆ
(
TokíM≠
 
v¨s
 = &TokíM≠::
em±y
, 
boﬁ
 
kìp_ªfs
 = 
Ál£
) const;

414 
°d
::
°rög
 
	$°r
() const;

415 
°d
::
°rög
 
	`°r
(
TokíQueue_t
 
Ωn
);

418 
ˇlcuœt‹
& 
›î©‹
=(c⁄° cÆcuœt‹& 
ˇlc
);

419 
	}
};

	@test-shunting-yard.cpp

1 
	~<io°ªam
>

2 
	~<mem‹y
>

3 
	~<°rög
>

4 
	~"ˇtch.hµ
"

6 
	~"shu¡ög-y¨d.h
"

8 
TokíM≠
 
	gv¨s
, 
	gem≠
, 
	gtm≠
, 
	gkey3
;

10 
	$PREPARE_ENVIRONMENT
() {

11 
v¨s
["pi"] = 3.14;

12 
v¨s
["b1"] = 0.0;

13 
v¨s
["b2"] = 0.86;

14 
v¨s
["_b"] = 0;

15 
v¨s
["str1"] = "foo";

16 
v¨s
["str2"] = "bar";

17 
v¨s
["str3"] = "foobar";

18 
v¨s
["str4"] = "foo10";

19 
v¨s
["str5"] = "10bar";

21 
v¨s
["m≠"] = 
tm≠
;

22 
tm≠
["key"] = "mapped value";

23 
tm≠
["key1"] = "second mapped value";

24 
tm≠
["key2"] = 10;

25 
tm≠
["key3"] = 
key3
;

26 
tm≠
["key3"]["map1"] = "inception1";

27 
tm≠
["key3"]["map2"] = "inception2";

29 
em≠
["a"] = 10;

30 
em≠
["b"] = 20;

31 
	}
}

33 
TEST_CASE
("Static calculate::calculate()", "[calculate]") {

34 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("-pò+ 1", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(-2.14));

35 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("-pò+ 1 * b1", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(-3.14));

36 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("(20+10)*3/2-3", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(42.0));

37 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1 << 4", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(16.0));

38 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1+(-2*3)", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(-5));

39 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1+_b+(-2*3)", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(-5));

40 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("4 * -3", 
v¨s
).
asI¡
() == -12);

43 
TEST_CASE
("calculate::compile()ánd calculate::eval()", "[compile]") {

44 
ˇlcuœt‹
 
	gc1
;

45 
	gc1
.
compûe
("-pi+1", 
v¨s
);

46 
REQUIRE
(
c1
.
evÆ
().
asDoubÀ
(Ë=
Aµrox
(-2.14));

48 
ˇlcuœt‹
 
c2
("pi+4", 
v¨s
);

49 
REQUIRE
(
c2
.
evÆ
().
asDoubÀ
(Ë=
Aµrox
(7.14));

50 
REQUIRE
(
c2
.
evÆ
().
asDoubÀ
(Ë=
Aµrox
(7.14));

52 
ˇlcuœt‹
 
c3
("pi+b1+b2", 
v¨s
);

53 
REQUIRE
(
c3
.
evÆ
(
v¨s
).
asDoubÀ
(Ë=
Aµrox
(4.0));

56 
TEST_CASE
("BooleanÉxpressions") {

57 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("3 < 3").
asBoﬁ
());

58 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("3 <3").
asBoﬁ
());

59 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("3 > 3").
asBoﬁ
());

60 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("3 >3").
asBoﬁ
());

61 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("3 =3").
asBoﬁ
());

62 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("3 !3").
asBoﬁ
());

64 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("(3 && TrueË=True").
asBoﬁ
());

65 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("(3 && 0Ë=True").
asBoﬁ
());

66 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("(3 || 0Ë=True").
asBoﬁ
());

67 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("(FÆ£ || 0Ë=True").
asBoﬁ
());

69 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("10 =N⁄e").
asBoﬁ
());

70 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("10 !N⁄e").
asBoﬁ
());

71 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("10 ='°r'").
asBoﬁ
());

72 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("10 !'°r'").
asBoﬁ
());

74 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("True")->
ty≥
 =
BOOL
);

75 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("FÆ£")->
ty≥
 =
BOOL
);

76 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("10 ='°r'")->
ty≥
 =
BOOL
);

77 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("10 =10")->
ty≥
 =
BOOL
);

80 
TEST_CASE
("StringÉxpressions") {

81 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("°r1 + så2 =°r3", 
v¨s
).
asBoﬁ
());

82 
REQUIRE_FALSE
(
ˇlcuœt‹
::
ˇlcuœã
("°r1 + så2 !°r3", 
v¨s
).
asBoﬁ
());

83 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("°r1 + 10 =°r4", 
v¨s
).
asBoﬁ
());

84 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("10 + så2 =°r5", 
v¨s
).
asBoﬁ
());

86 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo' + \"b¨\" =°r3", 
v¨s
).
asBoﬁ
());

87 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo' + \"b¨\" !'foob¨\"'", 
v¨s
).
asBoﬁ
());

90 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\'b¨'").
asSåög
() == "foo'bar");

91 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("\"foo\\\"b¨\"").
asSåög
() == "foo\"bar");

94 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\b¨'").
asSåög
() == "foo\\bar");

95 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\«r'").
asSåög
() == "foo\nar");

96 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\èr'").
asSåög
() == "foo\tar");

97 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\t'"));

98 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\t'").
asSåög
() == "foo\t");

101 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\nar'"));

102 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foo\\\«r'").
asSåög
() == "foo\nar");

105 
TEST_CASE
("Testing operatorÖarsing mechanism", "[operator]") {

106 
ˇlcuœt‹
 
	gc1
;

109 
REQUIRE_NOTHROW
(
c1
.
compûe
("['list'] == ['list']"));

110 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

112 
REQUIRE_NOTHROW
(
c1
.
compûe
("['list']== ['list']"));

113 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

115 
REQUIRE_NOTHROW
(
c1
.
compûe
("['list'] ==['list']"));

116 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

118 
REQUIRE_NOTHROW
(
c1
.
compûe
("['list']==['list']"));

119 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

121 
REQUIRE_NOTHROW
(
c1
.
compûe
("{a:'list'} == {a:'list'}"));

122 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

124 
REQUIRE_NOTHROW
(
c1
.
compûe
("{a:'list'}== {a:'list'}"));

125 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

127 
REQUIRE_NOTHROW
(
c1
.
compûe
("{a:'list'} =={a:'list'}"));

128 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

130 
REQUIRE_NOTHROW
(
c1
.
compûe
("{a:'list'}=={a:'list'}"));

131 
REQUIRE
(
c1
.
evÆ
(Ë=
åue
);

134 
	gTe°
;

135 
	sTe°D©a_t
 {

136 
Te°
* 
	mt
;

137 
Te°D©a_t
(Ë: 
t
(0) {}

138 
Te°D©a_t
(c⁄° 
Te°
& 
t
);

139 ~
Te°D©a_t
();

142 
	gTe°
 : 
public
 
C⁄èöî
<
Te°D©a_t
> {

143 
Te°
() {}

144 
£t
(
Te°
 
t
Ë{ 
ªf
->à
√w
 Test(t); }

145 
Te°
* 
gë
(Ë{  
	gªf
->
	gt
; }

147 
	g°d
::
wók_±r
<
Te°D©a_t
> 
wkªf
(Ë{  
ªf
; }

148 
ª£t
(Ë{ 
	gªf
.reset(); }

151 
	gTe°D©a_t
::
	$Te°D©a_t
(c⁄° 
Te°
& 
t
Ë: 
	`t
(
√w
 
	$Te°
(
t
)Ë{
	}
}

152 
Te°D©a_t
::~
	$Te°D©a_t
(Ë{ 
dñëe
 
t
; 
	}
}

154 
TEST_CASE
("Reference counting system", "[rc]") {

155 
SECTION
("Testing constructors:") {

156 
Te°
 
	gt1
;

157 
Te°
 
	gt2
;

158 
	gt2
.
£t
(
t1
);

160 
REQUIRE
(
t1
.
gë
() == 0);

161 
REQUIRE
(*(
t2
.
gë
()Ë=
t1
);

166 
SECTION
("Testing cycles") {

167 
	g°d
::
wók_±r
<
Te°D©a_t
> 
r1
, 
	gr2
, 
	gr3
, 
	gr4
;

169 
Te°
 
	gt1
;

170 
Te°
 
	gt2
;

171 
	gt2
.
£t
(
t1
);

174 
REQUIRE_NOTHROW
(
t1
.
£t
(
t2
));

177 
Te°
 
	gt3
;

178 
Te°
 
	gt4
;

179 
	gt4
.
£t
(
t2
);

182 
	gr1
 = 
t1
.
wkªf
(); 
	gr2
 = 
t2
.wkref();

183 
	gr3
 = 
t3
.
wkªf
(); 
	gr4
 = 
t4
.wkref();

186 
CHECK
(
r1
.
expúed
(Ë=
Ál£
);

187 
CHECK
(
r2
.
expúed
(Ë=
Ál£
);

188 
CHECK
(
r3
.
expúed
(Ë=
åue
);

189 
CHECK
(
r4
.
expúed
(Ë=
åue
);

190 
REQUIRE_NOTHROW
(
r1
.
lock
()->
t
->
ª£t
());

191 
CHECK
(
r1
.
expúed
(Ë=
åue
);

192 
CHECK
(
r2
.
expúed
(Ë=
åue
);

202 
TEST_CASE
("String operations") {

204 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'thêã° %†w‹kög' % 'is'").
asSåög
() == "theÅest is working");

205 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'thêã°†%†%s' % ('¨e', 'w‹kög')").
asSåög
() == "theÅestsáre working");

207 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'w‹k†%s% %s' % (100, 'now')").
asSåög
() == "works 100%Çow");

209 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'esˇ≥ \\%†w‹k†%s' % ('now')").
asSåög
() == "escape %s worksÇow");

211 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("'theÅests %s' % ('are', 'working')"));

212 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("'theÅests %s %s' % ('are')"));

215 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foob¨'[0]").
asSåög
() == "f");

216 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foob¨'[3]").
asSåög
() == "b");

217 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foob¨'[-1]").
asSåög
() == "r");

218 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("'foob¨'[-3]").
asSåög
() == "b");

221 
TEST_CASE
("MapáccessÉxpressions", "[map][map-access]") {

222 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠[\"key\"]", 
v¨s
).
asSåög
() == "mapped value");

223 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠[\"key\"+1]", 
v¨s
).
asSåög
() ==

225 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠[\"key\"+2] + 3 =13", 
v¨s
).
asBoﬁ
(Ë=
åue
);

226 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠.key1", 
v¨s
).
asSåög
() == "second mapped value");

228 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠.key3.m≠1", 
v¨s
).
asSåög
() == "inception1");

229 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠.key3['m≠2']", 
v¨s
).
asSåög
() == "inception2");

230 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m≠[\"no_key\"]", 
v¨s
Ë=
∑ckTokí
::
N⁄e
());

233 
TEST_CASE
("Prototypical inheritanceÅests") {

234 
TokíM≠
 
	gv¨s
;

235 
TokíM≠
 
	g∑ª¡
;

236 
TokíM≠
 
chûd
(&
∑ª¡
);

237 
TokíM≠
 
gønd_chûd
(&
chûd
);

239 
	gv¨s
["a"] = 0;

240 
	gv¨s
["∑ª¡"] = 
∑ª¡
;

241 
	gv¨s
["chûd"] = 
chûd
;

242 
	gv¨s
["gønd_chûd"] = 
gønd_chûd
;

244 
	g∑ª¡
["a"] = 10;

245 
	g∑ª¡
["b"] = 20;

246 
	g∑ª¡
["c"] = 30;

247 
	gchûd
["b"] = 21;

248 
	gchûd
["c"] = 31;

249 
	ggønd_chûd
["c"] = 32;

251 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("gønd_chûd.®- 10", 
v¨s
).
asDoubÀ
() == 0);

252 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("gønd_chûd.b - 20", 
v¨s
).
asDoubÀ
() == 1);

253 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("gønd_chûd.¯- 30", 
v¨s
).
asDoubÀ
() == 2);

255 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("gønd_chûd.®12", 
v¨s
));

256 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("∑ª¡.a", 
v¨s
).
asDoubÀ
() == 10);

257 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("chûd.a", 
v¨s
).
asDoubÀ
() == 10);

258 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("gønd_chûd.a", 
v¨s
).
asDoubÀ
() == 12);

261 
TEST_CASE
("Map usageÉxpressions", "[map][map-usage]") {

262 
TokíM≠
 
	gv¨s
;

263 
	gv¨s
["my_m≠"] = 
TokíM≠
();

264 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠['a'] = 1", 
v¨s
));

265 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠['b'] = 2", 
v¨s
));

266 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠['c'] = 3", 
v¨s
));

268 
REQUIRE
(
v¨s
["my_m≠"].
°r
() == "{ \"a\": 1, \"b\": 2, \"c\": 3 }");

269 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠.Àn()", 
v¨s
).
asI¡
() == 3);

271 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠.p›('b')", 
v¨s
));

273 
REQUIRE
(
v¨s
["my_m≠"].
°r
() == "{ \"a\": 1, \"c\": 3 }");

274 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠.Àn()", 
v¨s
).
asDoubÀ
() == 2);

276 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("deÁu… = my_m≠.p›('b', 3)", 
v¨s
));

277 
REQUIRE
(
v¨s
["deÁu…"].
asI¡
() == 3);

280 
TEST_CASE
("List usageÉxpressions", "[list]") {

281 
TokíM≠
 
	gv¨s
;

282 
	gv¨s
["my_li°"] = 
TokíLi°
();

284 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.push(1)", 
v¨s
));

285 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.push(2)", 
v¨s
));

286 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.push(3)", 
v¨s
));

288 
REQUIRE
(
v¨s
["my_li°"].
°r
() == "[ 1, 2, 3 ]");

289 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.Àn()", 
v¨s
).
asI¡
() == 3);

291 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.p›(1)", 
v¨s
));

293 
REQUIRE
(
v¨s
["my_li°"].
°r
() == "[ 1, 3 ]");

294 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.Àn()", 
v¨s
).
asDoubÀ
() == 2);

296 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.p›()", 
v¨s
));

297 
REQUIRE
(
v¨s
["my_li°"].
°r
() == "[ 1 ]");

298 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.Àn()", 
v¨s
).
asDoubÀ
() == 1);

300 
	gv¨s
["li°"] = 
TokíLi°
();

301 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("li°.push(4).push(5).push(6)", 
v¨s
));

302 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.push(2).push(3)", 
v¨s
));

303 
REQUIRE
(
v¨s
["my_li°"].
°r
() == "[ 1, 2, 3 ]");

304 
REQUIRE
(
v¨s
["li°"].
°r
() == "[ 4, 5, 6 ]");

306 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇàmy_li° +Üi°", 
v¨s
));

307 
REQUIRE
(
v¨s
["c⁄ˇt"].
°r
() == "[ 1, 2, 3, 4, 5, 6 ]");

308 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇt.Àn()", 
v¨s
).
asDoubÀ
() == 6);

311 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇt[-2] = 10", 
v¨s
));

312 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇt[2] = '3'", 
v¨s
));

313 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇt[3] = N⁄e", 
v¨s
));

314 
REQUIRE
(
v¨s
["c⁄ˇt"].
°r
() == "[ 1, 2, \"3\", None, 10, 6 ]");

317 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇt[10]", 
v¨s
));

318 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("c⁄ˇt[-10]", 
v¨s
));

319 
REQUIRE_THROWS
(
v¨s
["c⁄ˇt"].
asLi°
()[10]);

320 
REQUIRE_THROWS
(
v¨s
["c⁄ˇt"].
asLi°
()[-10]);

323 
TokíLi°
 
	gL
;

324 
REQUIRE_NOTHROW
(
L
.
push
("my value"));

325 
REQUIRE_NOTHROW
(
L
.
push
(10));

326 
REQUIRE_NOTHROW
(
L
.
push
(
TokíM≠
()));

327 
REQUIRE_NOTHROW
(
L
.
push
(
TokíLi°
()));

329 
REQUIRE
(
∑ckTokí
(
L
).
°r
() == "[ \"my value\", 10, {}, [] ]");

330 
REQUIRE
(
L
.
p›
().
°r
() == "[]");

331 
REQUIRE
(
∑ckTokí
(
L
).
°r
() == "[ \"my value\", 10, {} ]");

334 
TEST_CASE
("Tuple usageÉxpressions", "[tuple]") {

335 
TokíM≠
 
	gv¨s
;

336 
ˇlcuœt‹
 
	gc
;

338 
REQUIRE_NOTHROW
(
c
.
compûe
("'key':'value'"));

339 
STu∂e
* 
	gt0
 = 
°©ic_ˇ°
<STu∂e*>(
c
.
evÆ
()->
˛⁄e
());

340 
REQUIRE
(
t0
->
ty≥
 =
STUPLE
);

341 
REQUIRE
(
t0
->
li°
().
size
() == 2);

342 
dñëe
 
	gt0
;

344 
REQUIRE_NOTHROW
(
c
.
compûe
("1, 'key':'value', 3"));

345 
Tu∂e
* 
	gt1
 = 
°©ic_ˇ°
<Tu∂e*>(
c
.
evÆ
()->
˛⁄e
());

346 
REQUIRE
(
t1
->
ty≥
 =
TUPLE
);

347 
REQUIRE
(
t1
->
li°
().
size
() == 3);

349 
STu∂e
* 
	gt2
 = 
°©ic_ˇ°
<STu∂e*>(
t1
->
li°
()[1]->
˛⁄e
());

350 
REQUIRE
(
t2
->
ty≥
 =
STUPLE
);

351 
REQUIRE
(
t2
->
li°
().
size
() == 2);

352 
dñëe
 
	gt1
;

353 
dñëe
 
	gt2
;

355 
GlobÆSc›e
 
	gglobÆ
;

356 
REQUIRE_NOTHROW
(
c
.
compûe
("pow, None"));

357 
REQUIRE
(
c
.
evÆ
(
globÆ
).
°r
() == "([Function:Öow], None)");

360 
TEST_CASE
("Listánd map constructors usage") {

361 
GlobÆSc›e
 
	gv¨s
;

362 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠ = m≠()", 
v¨s
));

363 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li° =Üi°()", 
v¨s
));

365 
REQUIRE
(
v¨s
["my_m≠"]->
ty≥
 =
MAP
);

366 
REQUIRE
(
v¨s
["my_li°"]->
ty≥
 =
LIST
);

367 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("my_li°.Àn()", 
v¨s
).
asDoubÀ
() == 0);

369 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li° =Üi°(1,'2',N⁄e,m≠(),li°('sub_li°'))", 
v¨s
));

370 
REQUIRE
(
v¨s
["my_li°"].
°r
() == "[ 1, \"2\", None, {}, [ \"sub_list\" ] ]");

373 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠ = m≠()", 
v¨s
));

374 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠.®1", 
v¨s
));

375 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_m≠.b = 2", 
v¨s
));

376 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("my_li° =Üi°(my_m≠)", 
v¨s
));

377 
REQUIRE
(
v¨s
["my_li°"].
°r
() == "[ \"a\", \"b\" ]");

380 
TEST_CASE
("Map '{}'ándÜist '[]' constructor usage") {

381 
ˇlcuœt‹
 
	gc1
;

382 
TokíM≠
 
	gv¨s
;

384 
REQUIRE_NOTHROW
(
c1
.
compûe
("{ 'a': 1 }.a"));

385 
REQUIRE
(
c1
.
evÆ
().
asI¡
() == 1);

387 
REQUIRE_NOTHROW
(
c1
.
compûe
("M = {'a': 1}"));

388 
REQUIRE
(
c1
.
evÆ
().
°r
() == "{ \"a\": 1 }");

390 
REQUIRE_NOTHROW
(
c1
.
compûe
("[ 1, 2 ].len()"));

391 
REQUIRE
(
c1
.
evÆ
().
asI¡
() == 2);

393 
REQUIRE_NOTHROW
(
c1
.
compûe
("L = [1,2]"));

394 
REQUIRE
(
c1
.
evÆ
().
°r
() == "[ 1, 2 ]");

397 
TEST_CASE
("TestÜist iterable behavior") {

398 
GlobÆSc›e
 
	gv¨s
;

399 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("L =Üi°(1,2,3)", 
v¨s
));

400 
Iãøt‹
* 
	gô
;

401 
REQUIRE_NOTHROW
(
ô
 = 
v¨s
["L"].
asLi°
().
gëIãøt‹
());

402 
∑ckTokí
* 
	g√xt
;

403 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

404 
REQUIRE
(
√xt
 != 0);

405 
REQUIRE
(
√xt
->
asDoubÀ
() == 1);

407 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

408 
REQUIRE
(
√xt
 != 0);

409 
REQUIRE
(
√xt
->
asDoubÀ
() == 2);

411 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

412 
REQUIRE
(
√xt
 != 0);

413 
REQUIRE
(
√xt
->
asDoubÀ
() == 3);

415 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

416 
REQUIRE
(
√xt
 == 0);

418 
dñëe
 
	gô
;

421 
TEST_CASE
("Test map iterable behavior") {

422 
GlobÆSc›e
 
	gv¨s
;

423 
	gv¨s
["M"] = 
TokíM≠
();

424 
	gv¨s
["M"]["a"] = 1;

425 
	gv¨s
["M"]["b"] = 2;

426 
	gv¨s
["M"]["c"] = 3;

428 
Iãøt‹
* 
	gô
;

429 
REQUIRE_NOTHROW
(
ô
 = 
v¨s
["M"].
asM≠
().
gëIãøt‹
());

430 
∑ckTokí
* 
	g√xt
;

431 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

432 
REQUIRE
(
√xt
 != 0);

433 
REQUIRE
(
√xt
->
asSåög
() == "a");

435 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

436 
REQUIRE
(
√xt
 != 0);

437 
REQUIRE
(
√xt
->
asSåög
() == "b");

439 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

440 
REQUIRE
(
√xt
 != 0);

441 
REQUIRE
(
√xt
->
asSåög
() == "c");

443 
REQUIRE_NOTHROW
(
√xt
 = 
ô
->next());

444 
REQUIRE
(
√xt
 == 0);

446 
dñëe
 
	gô
;

449 
TEST_CASE
("Function usageÉxpressions") {

450 
GlobÆSc›e
 
	gv¨s
;

451 
	gv¨s
["pi"] = 3.141592653589793;

452 
	gv¨s
["a"] = -4;

454 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("sqπ(4)", 
v¨s
).
asDoubÀ
() == 2);

455 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("sö’i)", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(0));

456 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("cos’i/2)", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(0));

457 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("èn’i)", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(0));

458 
ˇlcuœt‹
 
c
("a + sqrt(4) * 2");

459 
REQUIRE
(
c
.
evÆ
(
v¨s
).
asDoubÀ
() == 0);

460 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("sqπ(4-a*3Ë* 2", 
v¨s
).
asDoubÀ
() == 8);

461 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("abs(42)", 
v¨s
).
asDoubÀ
() == 42);

462 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("abs(-42)", 
v¨s
).
asDoubÀ
() == 42);

465 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("pow(2,2)", 
v¨s
).
asDoubÀ
() == 4);

466 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("pow(2,3)", 
v¨s
).
asDoubÀ
() == 8);

467 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("pow(2,a)", 
v¨s
).
asDoubÀ
(Ë=
Aµrox
(1./16));

468 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("pow(2,a+4)", 
v¨s
).
asDoubÀ
() == 1);

470 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("foo(10)"));

471 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("foo(10),"));

472 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("foo,(10)"));

474 
REQUIRE
(
TokíM≠
::
deÁu…_globÆ
()["abs"].
°r
() == "[Function:ábs]");

475 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1,2,3,4,5").
°r
() == "(1, 2, 3, 4, 5)");

477 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" flﬂt('0.1'Ë").
asDoubÀ
() == 0.1);

478 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("Êﬂt(10)").
asDoubÀ
() == 10);

480 
	gv¨s
["a"] = 0;

481 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ÉvÆ('®3'Ë", 
v¨s
).
asDoubÀ
() == 3);

482 
REQUIRE
(
v¨s
["a"] == 3);

484 
	gv¨s
["m"] = 
TokíM≠
();

485 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("1 + flﬂt(mË* 3", 
v¨s
));

486 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("float('notáÇumber')"));

488 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("pow(1,-10)"));

489 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("pow(1,+10)"));

491 
	gv¨s
["base"] = 2;

492 
	gc
.
compûe
("pow(ba£,2)", 
v¨s
);

493 
	gv¨s
["base"] = 3;

494 
REQUIRE
(
c
.
evÆ
().
asDoubÀ
() == 4);

495 
REQUIRE
(
c
.
evÆ
(
v¨s
).
asDoubÀ
() == 9);

498 
TEST_CASE
("Built-inÉxtend() function") {

499 
GlobÆSc›e
 
	gv¨s
;

501 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("®m≠()", 
v¨s
));

502 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("b =Éxãnd◊)", 
v¨s
));

503 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("a.®10", 
v¨s
));

504 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("b.a", 
v¨s
).
asDoubÀ
() == 10);

505 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("b.®20", 
v¨s
));

506 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("a.a", 
v¨s
).
asDoubÀ
() == 10);

507 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("b.a", 
v¨s
).
asDoubÀ
() == 20);

509 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("¯exãnd(b)", 
v¨s
));

510 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("a.ö°™˚of(b)", 
v¨s
).
asBoﬁ
(Ë=
Ál£
);

511 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("a.ö°™˚of(c)", 
v¨s
).
asBoﬁ
(Ë=
Ál£
);

512 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("b.ö°™˚of◊)", 
v¨s
).
asBoﬁ
(Ë=
åue
);

513 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("c.ö°™˚of◊)", 
v¨s
).
asBoﬁ
(Ë=
åue
);

514 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("c.ö°™˚of(b)", 
v¨s
).
asBoﬁ
(Ë=
åue
);

518 
∑ckTokí
 
	$m≠_°r
(
TokíM≠
 
sc›e
) {

520 
	}
}

522 
TEST_CASE
("Built-in str() function") {

523 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så(N⁄eË").
asSåög
() == "None");

524 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så(10Ë").
asSåög
() == "10");

525 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så(10.1Ë").
asSåög
() == "10.1");

526 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så('ãxto'Ë").
asSåög
() == "texto");

527 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så÷i°(1,2,3)Ë").
asSåög
() == "[ 1, 2, 3 ]");

528 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så(m≠()Ë").
asSåög
() == "{}");

529 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så(m≠Ë").
asSåög
() == "[Function: map]");

531 
	gv¨s
["ôî©‹"] = 
∑ckTokí
(
√w
 
TokíLi°
());

532 
	gv¨s
["ôî©‹"]->
	gty≥
 = 
IT
;

533 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("°r(ôî©‹)", 
v¨s
).
asSåög
() == "[Iterator]");

535 
TokíM≠
 
	gv¨s
;

536 
	gv¨s
["my_m≠"] = 
TokíM≠
();

537 
	gv¨s
["my_m≠"]["__°r__"] = 
CµFun˘i⁄
(&
m≠_°r
, {}, "map_str");

539 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(" så(my_m≠Ë", 
v¨s
) == "custom map str");

542 
TEST_CASE
("Multipleárgument functions") {

543 
GlobÆSc›e
 
	gv¨s
;

544 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("tŸÆ = sum(1,2,3,4)", 
v¨s
));

545 
REQUIRE
(
v¨s
["tŸÆ"].
asDoubÀ
() == 10);

548 
TEST_CASE
("Passing keywordárgumentsÅo functions", "[function][kwargs]") {

549 
GlobÆSc›e
 
	gv¨s
;

550 
ˇlcuœt‹
 
	gc1
;

551 
REQUIRE_NOTHROW
(
c1
.
compûe
("my_m≠ = m≠('a':1,'b':2)", 
v¨s
));

552 
REQUIRE_NOTHROW
(
c1
.
evÆ
(
v¨s
));

554 
TokíM≠
 
	gm≠
;

555 
REQUIRE_NOTHROW
(
m≠
 = 
v¨s
["my_m≠"].
asM≠
());

557 
REQUIRE
(
m≠
["a"].
asI¡
() == 1);

558 
REQUIRE
(
m≠
["b"].
asI¡
() == 2);

560 
	gªsu…
;

561 
REQUIRE_NOTHROW
(
c1
.
compûe
("result =Öow(2, 'exp': 3)"));

562 
REQUIRE_NOTHROW
(
c1
.
evÆ
(
v¨s
));

563 
REQUIRE_NOTHROW
(
ªsu…
 = 
v¨s
["ªsu…"].
asDoubÀ
());

564 
REQUIRE
(
ªsu…
 == 8.0);

566 
REQUIRE_NOTHROW
(
c1
.
compûe
("result =Öow('exp': 3, 'number': 2)"));

567 
REQUIRE_NOTHROW
(
c1
.
evÆ
(
v¨s
));

568 
REQUIRE_NOTHROW
(
ªsu…
 = 
v¨s
["ªsu…"].
asDoubÀ
());

569 
REQUIRE
(
ªsu…
 == 8.0);

572 
TEST_CASE
("Default functions") {

573 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(N⁄e)").
asSåög
() == "none");

574 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(10.0)").
asSåög
() == "real");

575 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(10)").
asSåög
() == "integer");

576 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(True)").
asSåög
() == "boolean");

577 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥('°r')").
asSåög
() == "string");

578 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(°r)").
asSåög
() == "function");

579 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥÷i°())").
asSåög
() == "list");

580 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(m≠())").
asSåög
() == "map");

582 
TokíM≠
 
	gv¨s
;

583 
	gv¨s
["mym≠"] = 
TokíM≠
();

584 
	gv¨s
["mymap"]["__type__"] = "my_type";

585 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("ty≥(mym≠)", 
v¨s
).
asSåög
() == "my_type");

588 
TEST_CASE
("Type specific functions") {

589 
TokíM≠
 
	gv¨s
;

590 
	gv¨s
["s1"] = "String";

591 
	gv¨s
["s2"] = "á b ";

593 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("s1.Àn()", 
v¨s
).
asDoubÀ
() == 6);

594 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("s1.lowî()", 
v¨s
).
asSåög
() == "string");

595 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("s1.uµî()", 
v¨s
).
asSåög
() == "STRING");

596 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("s2.°rù()", 
v¨s
).
asSåög
() == "a b");

598 
ˇlcuœt‹
 
c1
("L = 'a, b'.•lô(', ')", 
v¨s
);

599 
REQUIRE
(
c1
.
evÆ
(
v¨s
).
°r
() == "[ \"a\", \"b\" ]");

601 
ˇlcuœt‹
 
c2
("L.join(', ')");

602 
REQUIRE
(
c2
.
evÆ
(
v¨s
).
asSåög
() == "a, b");

605 
TEST_CASE
("AssignmentÉxpressions") {

606 
GlobÆSc›e
 
	gv¨s
;

607 
	gˇlcuœt‹
::
ˇlcuœã
("assignmíà10", 
v¨s
);

610 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("assignmít", 
v¨s
).
asDoubÀ
() == 10);

613 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("assignmíà20", 
v¨s
));

614 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("assignmít", 
v¨s
).
asDoubÀ
() == 20);

617 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("®b = 20", 
v¨s
));

618 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("®b = c = d = 30", 
v¨s
));

619 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("®=b && b =¯&& b =d && d =30", 
v¨s
Ë=
åue
);

621 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("teste='b'"));

626 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("¥öà'somëhög'", 
v¨s
));

627 
REQUIRE
(
v¨s
["¥öt"].
asSåög
() == "something");

628 
REQUIRE
(
TokíM≠
::
deÁu…_globÆ
()["¥öt"].
°r
() == "[Function:Örint]");

632 
TokíM≠
 
	gchûd
 = 
v¨s
.
gëChûd
();

633 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("¥öà'somëhögÉl£'", 
v¨s
));

634 
REQUIRE
(
v¨s
["¥öt"].
asSåög
() == "somethingÉlse");

635 
REQUIRE
(
chûd
["¥öt"]->
ty≥
 =
NONE
);

638 
TEST_CASE
("AssignmentÉxpressions on maps") {

639 
	gv¨s
["m"] = 
TokíM≠
();

640 
	gˇlcuœt‹
::
ˇlcuœã
("m['a¢'] = 10", 
v¨s
);

643 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m['a¢']", 
v¨s
).
asDoubÀ
() == 10);

646 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("m['a¢'] = 20", 
v¨s
));

647 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m['a¢']", 
v¨s
).
asDoubÀ
() == 20);

650 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("m.®m.b = 20", 
v¨s
));

651 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("m.®m.b = m.¯m.d = 30", 
v¨s
));

652 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m.®=m.b && m.b =m.¯&& m.b =m.d && m.d =30", 
v¨s
Ë=
åue
);

654 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("m.m = m", 
v¨s
));

655 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("10 + (®m.®m.m.b)", 
v¨s
) == 40);

657 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
("m.m = N⁄e", 
v¨s
));

658 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("m.m", 
v¨s
)->
ty≥
 =
NONE
);

661 
TEST_CASE
("Scope management") {

662 
ˇlcuœt‹
 
c
("pi+b1+b2");

663 
TokíM≠
 
	g∑ª¡
;

664 
	g∑ª¡
["pi"] = 3.14;

665 
	g∑ª¡
["b1"] = 0;

666 
	g∑ª¡
["b2"] = 0.86;

668 
TokíM≠
 
	gchûd
 = 
∑ª¡
.
gëChûd
();

671 
REQUIRE
(
c
.
evÆ
(
chûd
).
asDoubÀ
(Ë=
Aµrox
(4));

673 
	gchûd
["b2"] = 1.0;

674 
REQUIRE
(
c
.
evÆ
(
chûd
).
asDoubÀ
(Ë=
Aµrox
(4.14));

677 
TokíM≠
 
	gvm≠
 = 
chûd
.
gëChûd
();

678 
	gvm≠
["b1"] = -1.14;

679 
REQUIRE
(
c
.
evÆ
(
vm≠
).
asDoubÀ
(Ë=
Aµrox
(3.0));

681 
TokíM≠
 
	gc›y
 = 
vm≠
;

682 
ˇlcuœt‹
 
c2
("pi+b1+b2", 
c›y
);

683 
REQUIRE
(
c2
.
evÆ
().
asDoubÀ
(Ë=
Aµrox
(3.0));

684 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("pi+b1+b2", 
c›y
).
asDoubÀ
(Ë=
Aµrox
(3.0));

690 
TEST_CASE
("Parsingás slaveÖarser") {

691 c⁄° * 
	g‹igöÆ_code
 = "a=1; b=2\n c=a+b }";

692 c⁄° * 
	gcode
 = 
‹igöÆ_code
;

693 
TokíM≠
 
	gv¨s
;

694 
ˇlcuœt‹
 
	gc1
, 
	gc2
, 
	gc3
;

697 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
(
code
, 
v¨s
, ";}\n", &code));

698 
REQUIRE
(
code
 =&(
‹igöÆ_code
[3]));

699 
REQUIRE
(
v¨s
["a"].
asDoubÀ
() == 1);

702 
REQUIRE_NOTHROW
((
c2
 = 
ˇlcuœt‹
(++
code
, 
v¨s
, ";}\n", &code)));

703 
REQUIRE
(
code
 =&(
‹igöÆ_code
[8]));

706 
REQUIRE_NOTHROW
(
c3
.
compûe
(++
code
, 
v¨s
, ";}\n", &code));

707 
REQUIRE
(
code
 =&(
‹igöÆ_code
[16]));

709 
REQUIRE_NOTHROW
(
c2
.
evÆ
(
v¨s
));

710 
REQUIRE
(
v¨s
["b"] == 2);

712 
REQUIRE_NOTHROW
(
c3
.
evÆ
(
v¨s
));

713 
REQUIRE
(
v¨s
["c"] == 3);

716 c⁄° * 
	gif_code
 = "if (á+(b*c) == 3 ) { ... }";

717 c⁄° * 
	gmu…ûöe
 = "a = (\n 1,\n 2,\n 3\n)\nÖrint(a);";

719 
	gcode
 = 
if_code
;

720 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
(
if_code
+4, 
v¨s
, ")", &
code
));

721 
REQUIRE
(
code
 =&(
if_code
[18]));

723 
	gcode
 = 
mu…ûöe
;

724 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
(
mu…ûöe
, 
v¨s
, "\n;", &
code
));

725 
REQUIRE
(
code
 =&(
mu…ûöe
[21]));

727 c⁄° * 
	gîr‹_ã°
 = "a = (; 1,; 2,; 3;)\nÖrint(a);";

728 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
(
îr‹_ã°
, 
v¨s
, "\n;", &
code
));

732 
TEST_CASE
("operation_id() function", "[op_id]") {

733 
	#›ID
(
t1
, 
t2
Ë
O≥øti⁄
::
	`buûd_mask
—1,Å2)

	)

734 
REQUIRE
((
›ID
(
NONE
, NONE)) == 0x0000000100000001);

735 
REQUIRE
((
›ID
(
FUNC
, FUNC)) == 0x0000002000000020);

736 
REQUIRE
((
›ID
(
FUNC
, 
ANY_TYPE
)) == 0x000000200000FFFF);

737 
REQUIRE
((
›ID
(
FUNC
, 
ANY_TYPE
)) == 0x000000200000FFFF);

742 
	gmyCÆc
 : 
public
 
ˇlcuœt‹
 {

743 
C⁄fig_t
& 
my_c⁄fig
() {

744 
C⁄fig_t
 
c⁄f
;

745  
	gc⁄f
;

748 c⁄° 
C⁄fig_t
 
C⁄fig
(Ëc⁄° {  
my_c⁄fig
(); }

750 
usög
 
	gˇlcuœt‹
::
ˇlcuœt‹
;

753 
∑ckTokí
 
	$›1
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

754 
evÆu©i⁄D©a
* 
d©a
) {

755  
ˇlcuœt‹
::
	`DeÁu…
().
›M≠
["%"][0].
	`exec
(
À·
, 
right
, 
d©a
);

756 
	}
}

758 
∑ckTokí
 
	$›2
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

759 
evÆu©i⁄D©a
* 
d©a
) {

760  
ˇlcuœt‹
::
	`DeÁu…
().
›M≠
[","][0].
	`exec
(
À·
, 
right
, 
d©a
);

761 
	}
}

763 
∑ckTokí
 
	$›3
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

764 
evÆu©i⁄D©a
* 
d©a
) {

765  
À·
.
	`asDoubÀ
(Ë- 
right
.asDouble();

766 
	}
}

768 
∑ckTokí
 
	$›4
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

769 
evÆu©i⁄D©a
* 
d©a
) {

770  
À·
.
	`asDoubÀ
(Ë* 
right
.asDouble();

771 
	}
}

773 
∑ckTokí
 
	$¶ash_›
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

774 
evÆu©i⁄D©a
* 
d©a
) {

775  
À·
.
	`asDoubÀ
(Ë/ 
right
.asDouble();

776 
	}
}

778 
∑ckTokí
 
	$nŸ_u«ry_›
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

779 
evÆu©i⁄D©a
* 
d©a
) {

780  ~
right
.
	`asI¡
();

781 
	}
}

783 
∑ckTokí
 
	$nŸ_right_u«ry_›
(c⁄° 
∑ckTokí
& 
À·
, c⁄°ÖackTokí& 
right
,

784 
evÆu©i⁄D©a
* 
d©a
) {

785  ~
À·
.
	`asI¡
();

786 
	}
}

788 
	$¶ash
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

789 
d©a
->
	`h™dÀ_›
("*");

792 *
ª°
 = ++
ex¥
;

793 
	}
}

795 
	$¶ash_¶ash
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

796 
d©a
->
	`h™dÀ_›
("-");

797 
	}
}

799 
	smyCÆcSèπup
 {

800 
myCÆcSèπup
() {

801 
	mOµM≠_t
& 
	m›p
 = 
myCÆc
::
my_c⁄fig
().
›Pª˚dí˚
;

802 
	m›p
.
add
(".", 1);

803 
	m›p
.
add
("+", 2); opp.add("*", 2);

804 
	m›p
.
add
("/", 3);

807 
	m›p
.
add
("-", -3);

810 
	m›p
.
addU«ry
("~", 4);

811 
	m›p
.
addRightU«ry
("~", 4);

812 
	m›p
.
addRightU«ry
("!", 1);

814 
	m›M≠_t
& 
	m›M≠
 = 
myCÆc
::
my_c⁄fig
().
›M≠
;

815 
	m›M≠
.
add
({
STR
, "+", 
TUPLE
}, &
›1
);

816 
	m›M≠
.
add
({
ANY_TYPE
, ".", ANY_TYPE}, &
›2
);

817 
	m›M≠
.
add
({
NUM
, "-", NUM}, &
›3
);

818 
	m›M≠
.
add
({
NUM
, "*", NUM}, &
›4
);

819 
	m›M≠
.
add
({
NUM
, "/", NUM}, &
¶ash_›
);

820 
	m›M≠
.
add
({
UNARY
, "~", 
NUM
}, &
nŸ_u«ry_›
);

821 
	m›M≠
.
add
({
NUM
, "~", 
UNARY
}, &
nŸ_right_u«ry_›
);

822 
	m›M≠
.
add
({
NUM
, "!", 
UNARY
}, &
nŸ_right_u«ry_›
);

824 
	m∑r£rM≠_t
& 
	m∑r£r
 = 
myCÆc
::
my_c⁄fig
().
∑r£rM≠
;

825 
	m∑r£r
.
add
('/', &
¶ash
);

826 
	m∑r£r
.
add
("//", &
¶ash_¶ash
);

828 } 
	gmyCÆcSèπup
;

832 
TEST_CASE
("Adhoc operations", "[operation][config]") {

833 
myCÆc
 
	gc1
, 
	gc2
;

834 c⁄° * 
	gexp
 = "'Lets create %s operators%s' + ('adhoc' . '!' )";

835 
REQUIRE_NOTHROW
(
c1
.
compûe
(
exp
));

836 
REQUIRE_NOTHROW
(
c2
 = 
myCÆc
(
exp
, 
v¨s
, 0, 0, myCÆc::
my_c⁄fig
()));

838 
REQUIRE
(
c1
.
evÆ
() == "Lets createádhoc operators!");

839 
REQUIRE
(
c2
.
evÆ
() == "Lets createádhoc operators!");

842 
	gexp
 = "'Lets create %s operators%s' + 'adhoc' . '!'";

843 
REQUIRE_NOTHROW
(
c1
.
compûe
(
exp
));

844 
REQUIRE
(
c1
.
evÆ
() == "Lets createádhoc operators!");

846 
	gexp
 = "2 - 1 * 1";

847 
REQUIRE_NOTHROW
(
c1
.
compûe
(
exp
));

848 
REQUIRE
(
c1
.
evÆ
() == 1);

851 
	gexp
 = "2 - 1";

852 
REQUIRE_NOTHROW
(
c1
.
compûe
(
exp
));

853 
REQUIRE
(
c1
.
evÆ
() == 1);

856 
	gexp
 = "2 - 1 - 1";

857 
REQUIRE_NOTHROW
(
c1
.
compûe
(
exp
));

858 
REQUIRE
(
c1
.
evÆ
() == 2);

861 
TEST_CASE
("Adhoc unary operations", "[operation][unary][config]") {

862 
SECTION
("Left Unary Operators") {

863 
myCÆc
 
	gc1
;

867 
REQUIRE_NOTHROW
(
c1
.
compûe
("~10"));

868 
REQUIRE
(
c1
.
evÆ
() == ~10l);

870 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * ~10"));

871 
REQUIRE
(
c1
.
evÆ
() == 2 * ~10l);

873 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * ~10 * 3"));

874 
REQUIRE
(
c1
.
evÆ
() == 2 * ~(10l*3));

876 
ˇlcuœt‹
 
	gc2
;

881 
REQUIRE_NOTHROW
(
c2
.
compûe
("(2 * -10) * 3"));

882 
REQUIRE
(
c2
.
evÆ
() == 2 * -10 * 3);

884 
REQUIRE_NOTHROW
(
c2
.
compûe
("2 * (-10 * 3)"));

885 
REQUIRE
(
c2
.
evÆ
() == 2 * (-10 * 3));

887 
REQUIRE_NOTHROW
(
c2
.
compûe
("2 * -(10 * 3)"));

888 
REQUIRE
(
c2
.
evÆ
() == 2 * -(10 * 3));

891 
REQUIRE_NOTHROW
(
c2
.
compûe
("-10 - 2"));

892 
REQUIRE
(
c2
.
evÆ
() == -12);

894 
TokíM≠
 
	gv¨s
;

895 
	gv¨s
["sc›e_m≠"] = 
TokíM≠
();

896 
	gv¨s
["scope_map"]["my_var"] = 10;

898 
REQUIRE_NOTHROW
(
c2
.
compûe
("- scope_map . my_var"));

899 
REQUIRE
(
c2
.
evÆ
(
v¨s
) == -10);

902 
SECTION
("Right unary operators") {

903 
myCÆc
 
	gc1
;

906 
REQUIRE_NOTHROW
(
c1
.
compûe
("10~"));

907 
REQUIRE
(
c1
.
evÆ
() == ~10l);

909 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * 10~"));

910 
REQUIRE
(
c1
.
evÆ
() == ~(2*10l));

912 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * 10~ * 3"));

913 
REQUIRE
(
c1
.
evÆ
() == ~(2*10l) * 3);

916 
REQUIRE_NOTHROW
(
c1
.
compûe
("10!"));

917 
REQUIRE
(
c1
.
evÆ
() == ~10l);

919 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * 10!"));

920 
REQUIRE
(
c1
.
evÆ
() == 2 * ~10l);

922 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * 10! * 3"));

923 
REQUIRE
(
c1
.
evÆ
() == 2 * ~10l * 3);

926 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 * (10~ * 3)"));

927 
REQUIRE
(
c1
.
evÆ
() == 2 * ~10l * 3);

929 
REQUIRE_NOTHROW
(
c1
.
compûe
("(2 * 10~) * 3"));

930 
REQUIRE
(
c1
.
evÆ
() == ~(2*10l) * 3);

932 
REQUIRE_NOTHROW
(
c1
.
compûe
("(2 * 10)~ * 3"));

933 
REQUIRE
(
c1
.
evÆ
() == ~(2*10l) * 3);

937 
TEST_CASE
("AdhocÑeservedWordÖarsers", "[parser][config]") {

938 
myCÆc
 
	gc1
;

940 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 / 2"));

941 
REQUIRE
(
c1
.
evÆ
().
asI¡
() == 1);

943 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 // 2"));

944 
REQUIRE
(
c1
.
evÆ
().
asI¡
() == 0);

946 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 /? 2"));

947 
REQUIRE
(
c1
.
evÆ
().
asI¡
() == 4);

949 
REQUIRE_NOTHROW
(
c1
.
compûe
("2 /! 2"));

950 
REQUIRE
(
c1
.
evÆ
().
asI¡
() == 4);

953 
TEST_CASE
("CustomÖarser for operator ':'", "[parser]") {

954 
∑ckTokí
 
	gp1
;

955 
ˇlcuœt‹
 
	gc2
;

957 
REQUIRE_NOTHROW
(
c2
.
compûe
("{á : 1 }"));

958 
REQUIRE_NOTHROW
(
p1
 = 
c2
.
evÆ
());

959 
REQUIRE
(
p1
["a"] == 1);

961 
REQUIRE_NOTHROW
(
c2
.
compûe
("map(a : 1, b:2, c: \"c\")"));

962 
REQUIRE_NOTHROW
(
p1
 = 
c2
.
evÆ
());

963 
REQUIRE
(
p1
["a"] == 1);

964 
REQUIRE
(
p1
["b"] == 2);

965 
REQUIRE
(
p1
["c"] == "c");

968 
TEST_CASE
("Resource management") {

969 
ˇlcuœt‹
 
	gC1
, 
C2
("1 + 1");

975 
REQUIRE_NOTHROW
(
ˇlcuœt‹
 
C3
(
C2
));

977 
REQUIRE_NOTHROW
(
C1
 = 
C2
);

982 
TEST_CASE
("Adhoc operatorÖarser", "[operator]") {

984 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1 + 1 # Andá commít!").
asI¡
() == 2);

985 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1 + 1 /*Andá commít!*/").
asI¡
() == 2);

986 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1 /* + 1 */").
asI¡
() == 1);

987 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
("1 /* in-bëwì¿*/ + 1").
asI¡
() == 2);

989 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("1 + 1 /* NeverÉnding comment"));

991 
TokíM≠
 
	gv¨s
;

992 c⁄° * 
	gex¥
 = "#12345\n - 10";

993 
REQUIRE_NOTHROW
(
ˇlcuœt‹
::
ˇlcuœã
(
ex¥
, 
v¨s
, "\n", &expr));

994 
REQUIRE
(*
ex¥
 == '\n');

996 ++
	gex¥
;

997 
REQUIRE
(
ˇlcuœt‹
::
ˇlcuœã
(
ex¥
).
asI¡
() == -10);

1000 
TEST_CASE
("Exception management") {

1001 
ˇlcuœt‹
 
	geˇlc1
, 
	geˇlc2
;

1002 
	geˇlc1
.
compûe
("a+b+dñ", 
em≠
);

1003 
	gem≠
["del"] = 30;

1005 
REQUIRE_THROWS
(
eˇlc2
.
compûe
(""));

1006 
REQUIRE_THROWS
(
eˇlc2
.
compûe
(" "));

1009 
REQUIRE
(
ˇlcuœt‹
().
evÆ
().
°r
() == "None");

1011 
REQUIRE_THROWS
(
eˇlc1
.
evÆ
());

1012 
REQUIRE_NOTHROW
(
eˇlc1
.
evÆ
(
em≠
));

1014 
	gem≠
.
îa£
("del");

1015 
REQUIRE_THROWS
(
eˇlc1
.
evÆ
(
em≠
));

1017 
	gem≠
["del"] = 0;

1018 
	gem≠
.
îa£
("a");

1019 
REQUIRE_NOTHROW
(
eˇlc1
.
evÆ
(
em≠
));

1021 
REQUIRE_NOTHROW
(
ˇlcuœt‹
 
c5
("10 + - - 10"));

1022 
REQUIRE_THROWS
(
ˇlcuœt‹
 
c5
("10 + +"));

1023 
REQUIRE_NOTHROW
(
ˇlcuœt‹
 
c5
("10 + -10"));

1024 
REQUIRE_THROWS
(
ˇlcuœt‹
 
c5
("c.[10]"));

1026 
TokíM≠
 
	gv1
;

1027 
	gv1
["m≠"] = 
TokíM≠
();

1029 
REQUIRE_THROWS
(
ˇlcuœt‹
("m≠ * 0").
evÆ
(
v1
));

1033 
REQUIRE_THROWS
(
ˇlcuœt‹
::
ˇlcuœã
("a+2*no_such_v¨übÀ", 
v¨s
));

1035 
REQUIRE_THROWS
(
eˇlc2
.
compûe
("print('hello'))"));

1036 
REQUIRE_THROWS
(
eˇlc2
.
compûe
("map()['hello']]"));

1037 
REQUIRE_THROWS
(
eˇlc2
.
compûe
("map(['hello']]"));

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	$©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@builtin-features.inc

1 
	~<c°dio
>

2 
	~<c°dlib
>

3 
	~<°rög
>

4 
	~<°dex˚±
>

5 
	~<˚ºno
>

6 
	~<s°ªam
>

7 
	~<io°ªam
>

8 
	~<c˘y≥
>

10 
	~"shu¡ög-y¨d.h
"

11 
	~"shu¡ög-y¨d-ex˚±i⁄s.h
"

19 #ifde‡
STATIC_CPARSE_STARTUP


20 
	#__CPARSE_STARTUP
 
__Sèπup__


	)

22 
	#__CPARSE_STARTUP


	)

25 
	~"buûtö-„©uªs/fun˘i⁄s.öc
"

27 
	~"buûtö-„©uªs/›î©i⁄s.öc
"

29 
	~"buûtö-„©uªs/ª£rvedW‹ds.öc
"

31 
	~"buûtö-„©uªs/ty≥S≥cificFun˘i⁄s.öc
"

38 #i‚de‡
STATIC_CPARSE_STARTUP


40 
	$˝¨£_°¨tup
() {

41 
buûtö_fun˘i⁄s
::
	`Sèπup
();

42 
buûtö_›î©i⁄s
::
	`Sèπup
();

43 
buûtö_ª£rvedW‹ds
::
	`Sèπup
();

44 
buûtö_ty≥S≥cificFun˘i⁄s
::
	`Sèπup
();

45 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@builtin-features/functions.inc

1 
	~<cm©h
>

3 
«me•a˚
 
	gbuûtö_fun˘i⁄s
 {

7 
∑ckTokí
 
deÁu…_¥öt
(
TokíM≠
 
sc›e
) {

9 
TokíLi°
 
	gli°
 = 
sc›e
["¨gs"].
asLi°
();

11 
boﬁ
 
	gfú°
 = 
åue
;

12 
∑ckTokí
 
	gôem
 : 
li°
.list()) {

13 i‡(
fú°
) {

14 
fú°
 = 
Ál£
;

16 
	g°d
::
cout
 << " ";

19 i‡(
	gôem
->
	gty≥
 =
STR
) {

20 
°d
::
cout
 << 
ôem
.
asSåög
();

22 
	g°d
::
cout
 << 
ôem
.
°r
();

26 
	g°d
::
cout
 << 
°d
::
ídl
;

28  
	g∑ckTokí
::
N⁄e
();

31 
∑ckTokí
 
deÁu…_sum
(
TokíM≠
 
sc›e
) {

33 
TokíLi°
 
	gli°
 = 
sc›e
["¨gs"].
asLi°
();

35 i‡(
	gli°
.
li°
().
size
(Ë=1 &&Üi°.li°().
‰⁄t
()->
ty≥
 =
LIST
) {

36 
li°
 =Üi°.li°().
‰⁄t
().
asLi°
();

39 
	gsum
 = 0;

40 
∑ckTokí
 
	gnum
 : 
li°
.list()) {

41 
sum
 +
num
.
asDoubÀ
();

44  
	gsum
;

47 
∑ckTokí
 
deÁu…_evÆ
(
TokíM≠
 
sc›e
) {

48 
	g°d
::
°rög
 
code
 = 
sc›e
["vÆue"].
asSåög
();

50  
	gˇlcuœt‹
::
ˇlcuœã
(
code
.
c_°r
(), 
sc›e
);

53 
∑ckTokí
 
deÁu…_Êﬂt
(
TokíM≠
 
sc›e
) {

54 
∑ckTokí
 
	gtok
 = 
sc›e
["value"];

55 i‡(
	gtok
->
	gty≥
 & 
	gNUM
ËÅok.
asDoubÀ
();

58 * 
	gª°
;

59 c⁄° 
	g°d
::
°rög
& 
°r
 = 
tok
.
asSåög
();

60 
	gî∫o
 = 0;

61 
	gªt
 = 
°πod
(
°r
.
c_°r
(), &
ª°
);

63 i‡(
	g°r
 =
ª°
) {

64 
throw
 
°d
::
ru¡ime_îr‹
("CouldÇŸ c⁄vîà\"" + 
°r
 + "\"Åo float!");

65 } i‡(
	gî∫o
) {

66 
	g°d
::
ønge_îr‹
("ValueÅoo big orÅoo smallÅo fitá Double!");

68  
	gªt
;

71 
∑ckTokí
 
deÁu…_öt
(
TokíM≠
 
sc›e
) {

72 
∑ckTokí
 
	gtok
 = 
sc›e
["value"];

73 i‡(
	gtok
->
	gty≥
 & 
	gNUM
ËÅok.
asI¡
();

76 * 
	gª°
;

77 c⁄° 
	g°d
::
°rög
& 
°r
 = 
tok
.
asSåög
();

78 
	gî∫o
 = 0;

79 
öt64_t
 
	gªt
 = 
°πﬁ
(
°r
.
c_°r
(), &
ª°
, 10);

81 i‡(
	g°r
 =
ª°
) {

82 
throw
 
°d
::
ru¡ime_îr‹
("CouldÇŸ c⁄vîà\"" + 
°r
 + "\"Åo integer!");

83 } i‡(
	gî∫o
) {

84 
	g°d
::
ønge_îr‹
("ValueÅoo big orÅoo smallÅo fitán Integer!");

86  
	gªt
;

89 
∑ckTokí
 
deÁu…_°r
(
TokíM≠
 
sc›e
) {

91 
∑ckTokí
 
	gtok
 = 
sc›e
["value"];

92 i‡(
	gtok
->
	gty≥
 =
STR
Ë 
tok
;

93  
	gtok
.
°r
();

96 
∑ckTokí
 
deÁu…_ty≥
(
TokíM≠
 
sc›e
) {

97 
∑ckTokí
 
	gtok
 = 
sc›e
["value"];

98 
∑ckTokí
* 
	gp_ty≥
;

100 
	gtok
->
	gty≥
) {

101 
	gNONE
:  "none";

102 
	gVAR
:  "variable";

103 
	gREAL
:  "real";

104 
	gINT
:  "integer";

105 
	gBOOL
:  "boolean";

106 
	gSTR
:  "string";

107 
	gFUNC
:  "function";

108 
	gIT
:  "iterable";

109 
	gTUPLE
:  "tuple";

110 
	gSTUPLE
:  "argumentÅuple";

111 
	gLIST
:  "list";

112 
	gMAP
:

113 
p_ty≥
 = 
tok
.
asM≠
().
föd
("__type__");

114 i‡(
	gp_ty≥
 && (*p_ty≥)->
	gty≥
 =
STR
) {

115  *
p_ty≥
;

123 
∑ckTokí
 
deÁu…_sqπ
(
TokíM≠
 
sc›e
) {

125 
	gnumbî
 = 
sc›e
["num"].
asDoubÀ
();

127  
sqπ
(
numbî
);

129 
∑ckTokí
 
deÁu…_sö
(
TokíM≠
 
sc›e
) {

131 
	gnumbî
 = 
sc›e
["num"].
asDoubÀ
();

133  
sö
(
numbî
);

135 
∑ckTokí
 
deÁu…_cos
(
TokíM≠
 
sc›e
) {

137 
	gnumbî
 = 
sc›e
["num"].
asDoubÀ
();

139  
cos
(
numbî
);

141 
∑ckTokí
 
deÁu…_èn
(
TokíM≠
 
sc›e
) {

143 
	gnumbî
 = 
sc›e
["num"].
asDoubÀ
();

145  
èn
(
numbî
);

147 
∑ckTokí
 
deÁu…_abs
(
TokíM≠
 
sc›e
) {

149 
	gnumbî
 = 
sc›e
["num"].
asDoubÀ
();

151  
	g°d
::
abs
(
numbî
);

154 c⁄° 
¨gs_t
 
	gpow_¨gs
 = {"number", "exp"};

155 
∑ckTokí
 
deÁu…_pow
(
TokíM≠
 
sc›e
) {

157 
	gnumbî
 = 
sc›e
["numbî"].
asDoubÀ
();

158 
	gexp
 = 
sc›e
["exp"].
asDoubÀ
();

160  
pow
(
numbî
, 
exp
);

165 
∑ckTokí
 
deÁu…_li°
(
TokíM≠
 
sc›e
) {

167 
TokíLi°
 
	gli°
 = 
sc›e
["¨gs"].
asLi°
();

170 i‡(
	gli°
.
li°
().
size
(Ë=1 &&Üi°.li°()[0]->
ty≥
 & 
IT
) {

171 
TokíLi°
 
√w_li°
;

172 
Iãøt‹
* 
	gô
 = 
°©ic_ˇ°
<
IãøbÀ
*>(
li°
.li°()[0].
tokí
())->
gëIãøt‹
();

174 
∑ckTokí
* 
	g√xt
 = 
ô
->
√xt
();

175 
	g√xt
) {

176 
	g√w_li°
.
li°
().
push_back
(*
√xt
);

177 
	g√xt
 = 
ô
->
√xt
();

180 
dñëe
 
	gô
;

181  
	g√w_li°
;

183  
	gli°
;

187 
∑ckTokí
 
deÁu…_m≠
(
TokíM≠
 
sc›e
) {

188  
	gsc›e
["kwargs"];

193 
∑ckTokí
 
deÁu…_exãnd
(
TokíM≠
 
sc›e
) {

194 
∑ckTokí
 
	gtok
 = 
sc›e
["value"];

196 i‡(
	gtok
->
	gty≥
 =
MAP
) {

197  
tok
.
asM≠
().
gëChûd
();

199 
throw
 
	g°d
::
ru¡ime_îr‹
(
tok
.
°r
() + " isÇotÉxtensible!");

204 
	g°d
::
°rög
 
∑ckTokí_°r
(c⁄° 
TokíBa£
* 
ba£
, 
uöt32_t
 
√°
) {

205 c⁄° 
Fun˘i⁄
* 
	gfunc
;

209 c⁄° 
TokíM≠
* 
	gty≥Funcs
;

210 i‡(
	gba£
->
	gty≥
 =
MAP
) {

211 
ty≥Funcs
 = 
°©ic_ˇ°
<c⁄° 
TokíM≠
*>(
ba£
);

213 
	gty≥Funcs
 = &
ˇlcuœt‹
::
ty≥_©åibuã_m≠
()[
ba£
->
ty≥
];

217 c⁄° 
∑ckTokí
* 
	gp_func
 = 
ty≥Funcs
->
föd
("__str__");

218 i‡(
	gp_func
 && (*p_func)->
	gty≥
 =
FUNC
) {

221 
func
 = 
p_func
->
asFunc
();

222 
∑ckTokí
 
	g_this
 =ÖackTokí(
ba£
->
˛⁄e
());

223 
TokíLi°
 
	g¨gs
;

224 
	g¨gs
.
push
(
°©ic_ˇ°
<
öt64_t
>(
√°
));

225  
	gFun˘i⁄
::
ˇŒ
(
_this
, 
func
, &
¨gs
, 
TokíM≠
()).
asSåög
();

233 
	sSèπup
 {

234 
Sèπup
() {

235 
	gTokíM≠
& 
	gglobÆ
 = 
TokíM≠
::
deÁu…_globÆ
();

237 
	gglobÆ
["¥öt"] = 
CµFun˘i⁄
(&
deÁu…_¥öt
, "print");

238 
	gglobÆ
["sum"] = 
CµFun˘i⁄
(&
deÁu…_sum
, "sum");

239 
	gglobÆ
["sqπ"] = 
CµFun˘i⁄
(&
deÁu…_sqπ
, {"num"}, "sqrt");

240 
	gglobÆ
["sö"] = 
CµFun˘i⁄
(&
deÁu…_sö
, {"num"}, "sin");

241 
	gglobÆ
["cos"] = 
CµFun˘i⁄
(&
deÁu…_cos
, {"num"}, "cos");

242 
	gglobÆ
["èn"] = 
CµFun˘i⁄
(&
deÁu…_èn
, {"num"}, "tan");

243 
	gglobÆ
["abs"] = 
CµFun˘i⁄
(&
deÁu…_abs
, {"num"}, "abs");

244 
	gglobÆ
["pow"] = 
CµFun˘i⁄
(&
deÁu…_pow
, 
pow_¨gs
, "pow");

245 
	gglobÆ
["Êﬂt"] = 
CµFun˘i⁄
(&
deÁu…_Êﬂt
, {"value"}, "float");

246 
	gglobÆ
["ªÆ"] = 
CµFun˘i⁄
(&
deÁu…_Êﬂt
, {"value"}, "real");

247 
	gglobÆ
["öt"] = 
CµFun˘i⁄
(&
deÁu…_öt
, {"value"}, "int");

248 
	gglobÆ
["°r"] = 
CµFun˘i⁄
(&
deÁu…_°r
, {"value"}, "str");

249 
	gglobÆ
["evÆ"] = 
CµFun˘i⁄
(&
deÁu…_evÆ
, {"value"}, "eval");

250 
	gglobÆ
["ty≥"] = 
CµFun˘i⁄
(&
deÁu…_ty≥
, {"value"}, "type");

251 
	gglobÆ
["exãnd"] = 
CµFun˘i⁄
(&
deÁu…_exãnd
, {"value"}, "extend");

254 
	gglobÆ
["li°"] = 
CµFun˘i⁄
(&
deÁu…_li°
, "list");

255 
	gglobÆ
["m≠"] = 
CµFun˘i⁄
(&
deÁu…_m≠
, "map");

258 
	g∑ckTokí
::
°r_cu°om
(Ë
∑ckTokí_°r
;

260 } 
	g__CPARSE_STARTUP
;

	@builtin-features/operations.inc

1 
	~<cm©h
>

3 
«me•a˚
 
	gbuûtö_›î©i⁄s
 {

6 
∑ckTokí
 
Assign
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

7 
	g∑ckTokí
& 
	gkey
 = 
d©a
->
À·
->
key
;

8 
	g∑ckTokí
& 
	g‹igö
 = 
d©a
->
À·
->
‹igö
;

11 i‡(
	gkey
->
	gty≥
 =
STR
) {

12 
°d
::
°rög
& 
v¨_«me
 = 
key
.
asSåög
();

15 i‡(
	g‹igö
->
	gty≥
 =
MAP
) {

16 
TokíM≠
& 
m≠
 = 
‹igö
.
asM≠
();

17 
	gm≠
[
v¨_«me
] = 
right
;

22 
TokíM≠
* 
	gm≠
 = 
d©a
->
sc›e
.
födM≠
(
v¨_«me
);

28 i‡(!
	gm≠
 || *m≠ =
TokíM≠
::
deÁu…_globÆ
()) {

29 
d©a
->
sc›e
[
v¨_«me
] = 
right
;

31 (*
	gm≠
)[
v¨_«me
] = 
right
;

35 } i‡(
	gkey
->
	gty≥
 & 
	gNUM
) {

36 i‡(
	g‹igö
->
	gty≥
 =
LIST
) {

37 
TokíLi°
& 
li°
 = 
‹igö
.
asLi°
();

38 
size_t
 
	gödex
 = 
key
.
asI¡
();

39 
	gli°
[
ödex
] = 
right
;

41 
throw
 
	g°d
::
domaö_îr‹
("Left operand ofássignment isÇotáÜist!");

44 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
key
, 
right
);

46  
	gright
;

49 
∑ckTokí
 
Comma
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

50 i‡(
	gÀ·
->
	gty≥
 =
TUPLE
) {

51 
À·
.
asTu∂e
().
li°
().
push_back
(
right
);

52  
	gÀ·
;

54  
Tu∂e
(
À·
, 
right
);

58 
∑ckTokí
 
Cﬁ⁄
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

59 i‡(
	gÀ·
->
	gty≥
 =
STUPLE
) {

60 
À·
.
asSTu∂e
().
li°
().
push_back
(
right
);

61  
	gÀ·
;

63  
STu∂e
(
À·
, 
right
);

67 
∑ckTokí
 
EquÆ
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

68 i‡(
	gÀ·
->
	gty≥
 =
VAR
 || 
right
->
ty≥
 == VAR) {

69 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
À·
, 
right
);

72  
	gÀ·
 =
right
;

75 
∑ckTokí
 
Dif„ª¡
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

76 i‡(
	gÀ·
->
	gty≥
 =
VAR
 || 
right
->
ty≥
 == VAR) {

77 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
À·
, 
right
);

80  
	gÀ·
 !
right
;

83 
∑ckTokí
 
M≠Index
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

84 
	gTokíM≠
& 
	gÀ·
 = 
p_À·
.
asM≠
();

85 
	g°d
::
°rög
& 
right
 = 
p_right
.
asSåög
();

86 c⁄° 
	g°d
::
°rög
& 
›
 = 
d©a
->op;

88 i‡(
	g›
 ="[]" || 
›
 == ".") {

89 
∑ckTokí
* 
p_vÆue
 = 
À·
.
föd
(
right
);

91 i‡(
	gp_vÆue
) {

92  
RefTokí
(
right
, *
p_vÆue
, 
À·
);

94  
RefTokí
(
right
, 
∑ckTokí
::
N⁄e
(), 
À·
);

97 
throw
 
undeföed_›î©i⁄
(
›
, 
À·
, 
right
);

102 
∑ckTokí
 
Ty≥S≥cificFun˘i⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

103 i‡(
	gp_À·
->
	gty≥
 =
MAP
Ë
throw
 
O≥øti⁄
::
Reje˘
();

105 
	gTokíM≠
& 
	g©å_m≠
 = 
ˇlcuœt‹
::
ty≥_©åibuã_m≠
()[
p_À·
->
ty≥
];

106 
	g°d
::
°rög
& 
key
 = 
p_right
.
asSåög
();

108 
∑ckTokí
* 
	g©å
 = 
©å_m≠
.
föd
(
key
);

109 i‡(
	g©å
) {

113  
RefTokí
(
key
, (*
©å
), 
p_À·
);

115 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
p_À·
, 
p_right
);

119 
∑ckTokí
 
U«ryNumîÆO≥øti⁄
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

120 c⁄° 
	g°d
::
°rög
& 
›
 = 
d©a
->op;

122 i‡(
	g›
 == "+") {

123  
right
;

124 } i‡(
	g›
 == "-") {

125  -
right
.
asDoubÀ
();

127 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
À·
, 
right
);

131 
∑ckTokí
 
NumîÆO≥øti⁄
(c⁄°ÖackTokí& 
À·
, c⁄°ÖackTokí& 
right
, 
evÆu©i⁄D©a
* 
d©a
) {

132 
	gÀ·_d
, 
	gright_d
;

133 
öt64_t
 
	gÀ·_i
, 
	gright_i
;

136 
	gÀ·_d
 = 
À·
.
asDoubÀ
();

137 
	gÀ·_i
 = 
À·
.
asI¡
();

139 
	gright_d
 = 
right
.
asDoubÀ
();

140 
	gright_i
 = 
right
.
asI¡
();

142 c⁄° 
	g°d
::
°rög
& 
›
 = 
d©a
->op;

144 i‡(
	g›
 == "+") {

145  
À·_d
 + 
right_d
;

146 } i‡(
	g›
 == "*") {

147  
À·_d
 * 
right_d
;

148 } i‡(
	g›
 == "-") {

149  
À·_d
 - 
right_d
;

150 } i‡(
	g›
 == "/") {

151  
À·_d
 / 
right_d
;

152 } i‡(
	g›
 == "<<") {

153  
À·_i
 << 
right_i
;

154 } i‡(
	g›
 == "**") {

155  
pow
(
À·_d
, 
right_d
);

156 } i‡(
	g›
 == ">>") {

157  
À·_i
 >> 
right_i
;

158 } i‡(
	g›
 == "%") {

159  
À·_i
 % 
right_i
;

160 } i‡(
	g›
 == "<") {

161  
À·_d
 < 
right_d
;

162 } i‡(
	g›
 == ">") {

163  
À·_d
 > 
right_d
;

164 } i‡(
	g›
 == "<=") {

165  
À·_d
 <
right_d
;

166 } i‡(
	g›
 == ">=") {

167  
À·_d
 >
right_d
;

168 } i‡(
	g›
 == "&&") {

169  
À·_i
 && 
right_i
;

170 } i‡(
	g›
 == "||") {

171  
À·_i
 || 
right_i
;

173 
throw
 
undeföed_›î©i⁄
(
›
, 
À·
, 
right
);

177 
∑ckTokí
 
F‹m©O≥øti⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

178 
	g°d
::
°rög
& 
s_À·
 = 
p_À·
.
asSåög
();

179 c⁄° * 
	gÀ·
 = 
s_À·
.
c_°r
();

181 
Tu∂e
 
	gright
;

183 i‡(
	gp_right
->
	gty≥
 =
TUPLE
) {

184 
right
 = 
p_right
.
asTu∂e
();

186 
	gright
 = 
Tu∂e
(
p_right
);

189 
	g°d
::
°rög
 
ªsu…
;

190 c⁄° 
	g∑ckTokí
& 
	gtokí
 : 
right
.
li°
()) {

192 *
À·
 && (*left != '%' ||Üeft[1] != 's')) {

193 i‡(*
À·
 == '\\' &&Üeft[1] == '%') ++left;

194 
	gªsu…
.
push_back
(*
À·
);

195 ++
	gÀ·
;

198 i‡(*
	gÀ·
 == '\0') {

199 
throw
 
ty≥_îr‹
("Notállárguments converted during string formatting");

201 
	gÀ·
 += 2;

205 i‡(
	gtokí
->
	gty≥
 =
STR
) {

208 
ªsu…
 +
tokí
.
asSåög
();

210 
	gªsu…
 +
tokí
.
°r
();

215 *
	gÀ·
 && (*À· !'%' || 
À·
[1] != 's')) {

216 i‡(*
À·
 == '\\' &&Üeft[1] == '%') ++left;

217 
	gªsu…
.
push_back
(*
À·
);

218 ++
	gÀ·
;

221 i‡(*
	gÀ·
 != '\0') {

222 
throw
 
ty≥_îr‹
("NotÉnoughárguments for format string");

224  
	gªsu…
;

228 
∑ckTokí
 
SåögOnSåögO≥øti⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

229 c⁄° 
	g°d
::
°rög
& 
À·
 = 
p_À·
.
asSåög
();

230 c⁄° 
	g°d
::
°rög
& 
right
 = 
p_right
.
asSåög
();

231 c⁄° 
	g°d
::
°rög
& 
›
 = 
d©a
->op;

233 i‡(
	g›
 == "+") {

234  
À·
 + 
right
;

235 } i‡(
	g›
 == "==") {

236  (
À·
 =
right
);

237 } i‡(
	g›
 == "!=") {

238  (
À·
 !
right
);

240 
throw
 
undeföed_›î©i⁄
(
›
, 
p_À·
, 
p_right
);

244 
∑ckTokí
 
SåögOnNumbîO≥øti⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

245 c⁄° 
	g°d
::
°rög
& 
À·
 = 
p_À·
.
asSåög
();

246 c⁄° 
	g°d
::
°rög
& 
›
 = 
d©a
->op;

248 
	g°d
::
°rög°ªam
 
ss
;

249 i‡(
	g›
 == "+") {

250 
ss
 << 
À·
 << 
p_right
.
asDoubÀ
();

251  
	gss
.
°r
();

252 } i‡(
	g›
 == "[]") {

253 
öt64_t
 
ödex
 = 
p_right
.
asI¡
();

255 i‡(
	gödex
 < 0) {

257 
	gödex
 +
À·
.
size
();

259 i‡(
	gödex
 < 0 || 
	g°©ic_ˇ°
<
	gsize_t
>(ödexË>
À·
.
size
()) {

260 
throw
 
°d
::
domaö_îr‹
("String index out ofÑange!");

263 
	gss
 << 
	gÀ·
[
ödex
];

264  
	gss
.
°r
();

266 
throw
 
undeföed_›î©i⁄
(
›
, 
p_À·
, 
p_right
);

270 
∑ckTokí
 
NumbîOnSåögO≥øti⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

271 
	gÀ·
 = 
p_À·
.
asDoubÀ
();

272 c⁄° 
	g°d
::
°rög
& 
right
 = 
p_right
.
asSåög
();

274 
	g°d
::
°rög°ªam
 
ss
;

275 i‡(
	gd©a
->
	g›
 == "+") {

276 
ss
 << 
À·
 << 
right
;

277  
	gss
.
°r
();

279 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
p_À·
, 
p_right
);

283 
∑ckTokí
 
Li°OnNumbîO≥øti⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

284 
TokíLi°
 
	gÀ·
 = 
p_À·
.
asLi°
();

286 i‡(
	gd©a
->
	g›
 == "[]") {

287 
öt64_t
 
ödex
 = 
p_right
.
asI¡
();

289 i‡(
	gödex
 < 0) {

291 
	gödex
 +
À·
.
li°
().
size
();

294 i‡(
	gödex
 < 0 || 
	g°©ic_ˇ°
<
	gsize_t
>(ödexË>
À·
.
li°
().
size
()) {

295 
throw
 
°d
::
domaö_îr‹
("List index out ofÑange!");

298 
	g∑ckTokí
& 
	gvÆue
 = 
À·
.
li°
()[
ödex
];

300  
RefTokí
(
ödex
, 
vÆue
, 
p_À·
);

302 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
p_À·
, 
p_right
);

306 
∑ckTokí
 
Li°OnLi°O≥øti⁄
(c⁄°ÖackTokí& 
p_À·
, c⁄°ÖackTokí& 
p_right
, 
evÆu©i⁄D©a
* 
d©a
) {

307 
	gTokíLi°
& 
	gÀ·
 = 
p_À·
.
asLi°
();

308 
	gTokíLi°
& 
	gright
 = 
p_right
.
asLi°
();

310 i‡(
	gd©a
->
	g›
 == "+") {

312 
TokíLi°
 
ªsu…
;

313 
	gªsu…
.
li°
(Ë
À·
.list();

316 
	g∑ckTokí
& 
	gp
 : 
right
.
li°
()) {

317 
ªsu…
.
li°
().
push_back
(
p
);

320  
	gªsu…
;

322 
throw
 
undeföed_›î©i⁄
(
d©a
->
›
, 
À·
, 
right
);

326 
	sSèπup
 {

327 
Sèπup
() {

331 
	gOµM≠_t
& 
	g›p
 = 
ˇlcuœt‹
::
DeÁu…
().
›Pª˚dí˚
;

332 
	g›p
.
add
("[]", 2); opp.add("()", 2); opp.add(".", 2);

333 
	g›p
.
add
("**", 3);

334 
	g›p
.
add
("*", 5); opp.add("/", 5); opp.add("%", 5);

335 
	g›p
.
add
("+", 6); opp.add("-", 6);

336 
	g›p
.
add
("<<", 7); opp.add(">>", 7);

337 
	g›p
.
add
("<", 8); opp.add("<=", 8); opp.add(">=", 8); opp.add(">", 8);

338 
	g›p
.
add
("==", 9); opp.add("!=", 9);

339 
	g›p
.
add
("&&", 13);

340 
	g›p
.
add
("||", 14);

341 
	g›p
.
add
("=", 15); opp.add(":", 15);

342 
	g›p
.
add
(",", 16);

345 
	g›p
.
addU«ry
("+", 3); opp.addUnary("-", 3);

348 
	g›M≠_t
& 
	g›M≠
 = 
ˇlcuœt‹
::
DeÁu…
().
›M≠
;

349 
	g›M≠
.
add
({
ANY_TYPE
, "=", ANY_TYPE}, &
Assign
);

350 
	g›M≠
.
add
({
ANY_TYPE
, ",", ANY_TYPE}, &
Comma
);

351 
	g›M≠
.
add
({
ANY_TYPE
, ":", ANY_TYPE}, &
Cﬁ⁄
);

352 
	g›M≠
.
add
({
ANY_TYPE
, "==", ANY_TYPE}, &
EquÆ
);

353 
	g›M≠
.
add
({
ANY_TYPE
, "!=", ANY_TYPE}, &
Dif„ª¡
);

354 
	g›M≠
.
add
({
MAP
, "[]", 
STR
}, &
M≠Index
);

355 
	g›M≠
.
add
({
ANY_TYPE
, ".", 
STR
}, &
Ty≥S≥cificFun˘i⁄
);

356 
	g›M≠
.
add
({
MAP
, ".", 
STR
}, &
M≠Index
);

357 
	g›M≠
.
add
({
STR
, "%", 
ANY_TYPE
}, &
F‹m©O≥øti⁄
);

360 
	g›M≠
.
add
({
NUM
, 
ANY_OP
, NUM}, &
NumîÆO≥øti⁄
);

361 
	g›M≠
.
add
({
UNARY
, 
ANY_OP
, 
NUM
}, &
U«ryNumîÆO≥øti⁄
);

362 
	g›M≠
.
add
({
STR
, 
ANY_OP
, STR}, &
SåögOnSåögO≥øti⁄
);

363 
	g›M≠
.
add
({
STR
, 
ANY_OP
, 
NUM
}, &
SåögOnNumbîO≥øti⁄
);

364 
	g›M≠
.
add
({
NUM
, 
ANY_OP
, 
STR
}, &
NumbîOnSåögO≥øti⁄
);

365 
	g›M≠
.
add
({
LIST
, 
ANY_OP
, 
NUM
}, &
Li°OnNumbîO≥øti⁄
);

366 
	g›M≠
.
add
({
LIST
, 
ANY_OP
, LIST}, &
Li°OnLi°O≥øti⁄
);

368 } 
	g__CPARSE_STARTUP
;

	@builtin-features/reservedWords.inc

2 
«me•a˚
 
	gbuûtö_ª£rvedW‹ds
 {

5 
∑ckTokí
 
	gåueTokí
 =ÖackTokí(
åue
);

6 
∑ckTokí
 
	gÁl£Tokí
 =ÖackTokí(
Ál£
);

7 
∑ckTokí
 
	gn⁄eTokí
 =ÖackTokí::
N⁄e
();

9 
True
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

10 
	gd©a
->
h™dÀ_tokí
(
åueTokí
->
˛⁄e
());

13 
FÆ£
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

14 
	gd©a
->
h™dÀ_tokí
(
Ál£Tokí
->
˛⁄e
());

17 
N⁄e
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

18 
	gd©a
->
h™dÀ_tokí
(
n⁄eTokí
->
˛⁄e
());

21 
LöeCommít
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

22 *
	gex¥
 && *ex¥ !'\n'Ë++
ex¥
;

23 *
	gª°
 = 
ex¥
;

26 
SœshSèrCommít
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

27 *
	gex¥
 && !”x¥[0] ='*' && 
ex¥
[1] == '/')) ++expr;

28 i‡(*
	gex¥
 == '\0') {

29 
throw
 
sy¡ax_îr‹
("UnexpectedÉnd of fileáfter '/*' comment!");

32 
	gex¥
 += 2;

33 *
	gª°
 = 
ex¥
;

36 
Keyw‹dO≥øt‹
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

38 i‡(
	gd©a
->
	gΩn
.
back
()->
	gty≥
 =
VAR
) {

39 
d©a
->
Ωn
.
back
()->
ty≥
 = 
STR
;

41 
	gd©a
->
h™dÀ_›
(":");

44 
DŸO≥øt‹
(c⁄° * 
ex¥
, c⁄° ** 
ª°
, 
ΩnBuûdî
* 
d©a
) {

45 
	gd©a
->
h™dÀ_›
(".");

47 *
	gex¥
 && 
is•a˚
(*
ex¥
)) ++expr;

50 i‡(!
	gΩnBuûdî
::
isv¨ch¨
(*
ex¥
)) {

51 
throw
 
sy¡ax_îr‹
("Expected variableÇameáfter '.' operator");

55 
	g°d
::
°rög
 
key
 = 
ΩnBuûdî
::
∑r£V¨
(
ex¥
, 
ª°
);

56 
	gd©a
->
h™dÀ_tokí
(
√w
 
Tokí
<
°d
::
°rög
>(
key
, 
STR
));

59 
	sSèπup
 {

60 
Sèπup
() {

61 
	g∑r£rM≠_t
& 
	g∑r£r
 = 
ˇlcuœt‹
::
DeÁu…
().
∑r£rM≠
;

62 
	g∑r£r
.
add
("True", &
True
);

63 
	g∑r£r
.
add
("FÆ£", &
FÆ£
);

64 
	g∑r£r
.
add
("N⁄e", &
N⁄e
);

65 
	g∑r£r
.
add
("#", &
LöeCommít
);

66 
	g∑r£r
.
add
("//", &
LöeCommít
);

67 
	g∑r£r
.
add
("/*", &
SœshSèrCommít
);

68 
	g∑r£r
.
add
(":", &
Keyw‹dO≥øt‹
);

69 
	g∑r£r
.
add
(':', &
Keyw‹dO≥øt‹
);

70 
	g∑r£r
.
add
(".", &
DŸO≥øt‹
);

71 
	g∑r£r
.
add
('.', &
DŸO≥øt‹
);

73 } 
	g__CPARSE_STARTUP
;

	@builtin-features/typeSpecificFunctions.inc

2 
«me•a˚
 
	gbuûtö_ty≥S≥cificFun˘i⁄s
 {

6 c⁄° 
¨gs_t
 
	gm≠_p›_¨gs
 = {"key", "default"};

7 
∑ckTokí
 
m≠_p›
(
TokíM≠
 
sc›e
) {

8 
TokíM≠
 
	gm≠
 = 
sc›e
["this"].
asM≠
();

9 
	g°d
::
°rög
 
key
 = 
sc›e
["key"].
asSåög
();

12 i‡(
	gm≠
.
m≠
().
cou¡
(
key
)) {

13 
∑ckTokí
 
	gvÆue
 = 
m≠
[
key
];

14 
	gm≠
.
îa£
(
key
);

15  
	gvÆue
;

19 
∑ckTokí
* 
	gdef
 = 
sc›e
.
föd
("default");

20 i‡(
	gdef
) {

21  *
	gdef
;

23  
	g∑ckTokí
::
N⁄e
();

27 
∑ckTokí
 
m≠_Àn
(
TokíM≠
 
sc›e
) {

28 
TokíM≠
 
	gm≠
 = 
sc›e
.
föd
("this")->
asM≠
();

29  
	gm≠
.
m≠
().
size
();

32 
∑ckTokí
 
deÁu…_ö°™˚of
(
TokíM≠
 
sc›e
) {

33 
TokíM≠
 
	g_su≥r
 = 
sc›e
["vÆue"].
asM≠
();

34 
TokíM≠
* 
	g_this
 = 
sc›e
["this"].
asM≠
().
∑ª¡
();

36 
TokíM≠
* 
	g∑ª¡
 = 
_this
;

37 
	g∑ª¡
) {

38 i‡((*
	g∑ª¡
Ë=
_su≥r
) {

39  
åue
;

42 
	g∑ª¡
 = 
∑ª¡
->parent();

45  
	gÁl£
;

50 c⁄° 
¨gs_t
 
	gpush_¨gs
 = {"item"};

51 
∑ckTokí
 
li°_push
(
TokíM≠
 
sc›e
) {

52 
∑ckTokí
* 
	gli°
 = 
sc›e
.
föd
("this");

53 
∑ckTokí
* 
	gtokí
 = 
sc›e
.
föd
("item");

56 
	gli°
->
asLi°
().
li°
().
push_back
(*
tokí
);

58  *
	gli°
;

61 c⁄° 
¨gs_t
 
	gli°_p›_¨gs
 = {"pos"};

62 
∑ckTokí
 
li°_p›
(
TokíM≠
 
sc›e
) {

63 
TokíLi°
 
	gli°
 = 
sc›e
.
föd
("this")->
asLi°
();

64 
∑ckTokí
* 
	gtokí
 = 
sc›e
.
föd
("pos");

66 
öt64_t
 
	gpos
;

68 i‡((*
	gtokí
)->
	gty≥
 & 
	gNUM
) {

69 
	gpos
 = 
tokí
->
asI¡
();

72 i‡(
	gpos
 < 0Ëpo†
li°
.li°().
size
()-
pos
;

74 
	gpos
 = 
li°
.li°().
size
()-1;

77 
∑ckTokí
 
	gªsu…
 = 
li°
.li°()[
pos
];

81 
	gli°
.
li°
().
îa£
÷i°.li°().
begö
(Ë+ 
pos
);

83  
	gªsu…
;

86 
∑ckTokí
 
li°_Àn
(
TokíM≠
 
sc›e
) {

87 
TokíLi°
 
	gli°
 = 
sc›e
.
föd
("this")->
asLi°
();

88  
	gli°
.
li°
().
size
();

91 
∑ckTokí
 
li°_joö
(
TokíM≠
 
sc›e
) {

92 
TokíLi°
 
	gli°
 = 
sc›e
["this"].
asLi°
();

93 
	g°d
::
°rög
 
ch¨s
 = 
sc›e
["ch¨s"].
asSåög
();

94 
	g°d
::
°rög°ªam
 
ªsu…
;

96 
	g°d
::
ve˘‹
<
∑ckTokí
>::
c⁄°_ôî©‹
 
ô
 = 
li°
.li°().
begö
();

97 
	gªsu…
 << 
	gô
->
asSåög
();

98 ++
	gô
; ià!
li°
.li°().
íd
(); ++it) {

99 
	gªsu…
 << 
	gch¨s
 << 
	gô
->
asSåög
();

102  
	gªsu…
.
°r
();

107 
∑ckTokí
 
°rög_Àn
(
TokíM≠
 
sc›e
) {

108 
	g°d
::
°rög
 
°r
 = 
sc›e
["this"].
asSåög
();

109  
	g°©ic_ˇ°
<
	göt64_t
>(
	g°r
.
size
());

112 
∑ckTokí
 
°rög_lowî
(
TokíM≠
 
sc›e
) {

113 
	g°d
::
°rög
 
°r
 = 
sc›e
["this"].
asSåög
();

114 
	g°d
::
°rög
 
out
;

115 
	gc
 : 
°r
) {

116 
out
.
push_back
(
tﬁowî
(
c
));

118  
	gout
;

121 
∑ckTokí
 
°rög_uµî
(
TokíM≠
 
sc›e
) {

122 
	g°d
::
°rög
 
°r
 = 
sc›e
["this"].
asSåög
();

123 
	g°d
::
°rög
 
out
;

124 
	gc
 : 
°r
) {

125 
out
.
push_back
(
touµî
(
c
));

127  
	gout
;

130 
∑ckTokí
 
°rög_°rù
(
TokíM≠
 
sc›e
) {

131 
	g°d
::
°rög
 
°r
 = 
sc›e
["this"].
asSåög
();

133 
	g°d
::
°rög
::
c⁄°_ôî©‹
 
ô
 = 
°r
.
begö
();

134 
	gô
 !
°r
.
íd
(Ë&& 
is•a˚
(*
ô
)) ++it;

136 
	g°d
::
°rög
::
c⁄°_ªvî£_ôî©‹
 
rô
 = 
°r
.
rbegö
();

137 
	grô
.
ba£
(Ë!
ô
 && 
is•a˚
(*
rô
)) ++rit;

139  
	g°d
::
°rög
(
ô
, 
rô
.
ba£
());

142 
∑ckTokí
 
°rög_•lô
(
TokíM≠
 
sc›e
) {

143 
TokíLi°
 
	gli°
;

144 
	g°d
::
°rög
 
°r
 = 
sc›e
["this"].
asSåög
();

145 
	g°d
::
°rög
 
•lô_ch¨s
 = 
sc›e
["ch¨s"].
asSåög
();

148 
size_t
 
	g°¨t
 = 0;

149 
size_t
 
	gi
 = 
°r
.
föd
(
•lô_ch¨s
, 0);

150 
size_t
 
	gsize
 = 
•lô_ch¨s
.
size
();

151 
	gi
 < 
	g°r
.
size
()) {

153 
	gli°
.
push
(
°d
::
°rög
(
°r
, 
°¨t
, 
i
-start));

155 
	g°¨t
 = 
i
 + 
size
;

156 
	gi
 = 
°r
.
föd
(
•lô_ch¨s
, 
°¨t
);

160 
	gli°
.
push
(
°d
::
°rög
(
°r
, 
°¨t
, så.
size
()-start));

162  
	gli°
;

167 
	sSèπup
 {

168 
Sèπup
() {

169 
	gTokíM≠
& 
	gba£_li°
 = 
ˇlcuœt‹
::
ty≥_©åibuã_m≠
()[
LIST
];

170 
	gba£_li°
["push"] = 
CµFun˘i⁄
(
li°_push
, 
push_¨gs
, "push");

171 
	gba£_li°
["p›"] = 
CµFun˘i⁄
(
li°_p›
, 
li°_p›_¨gs
, "pop");

172 
	gba£_li°
["Àn"] = 
CµFun˘i⁄
(
li°_Àn
, "len");

173 
	gba£_li°
["joö"] = 
CµFun˘i⁄
(
li°_joö
, {"chars"}, "join");

175 
	gTokíM≠
& 
	gba£_°r
 = 
ˇlcuœt‹
::
ty≥_©åibuã_m≠
()[
STR
];

176 
	gba£_°r
["Àn"] = 
CµFun˘i⁄
(&
°rög_Àn
, "len");

177 
	gba£_°r
["lowî"] = 
CµFun˘i⁄
(&
°rög_lowî
, "lower");

178 
	gba£_°r
["uµî"] = 
CµFun˘i⁄
(&
°rög_uµî
, "upper");

179 
	gba£_°r
["°rù"] = 
CµFun˘i⁄
(&
°rög_°rù
, "strip");

180 
	gba£_°r
["•lô"] = 
CµFun˘i⁄
(&
°rög_•lô
, {"chars"}, "split");

182 
	gTokíM≠
& 
	gba£_m≠
 = 
TokíM≠
::
ba£_m≠
();

183 
	gba£_m≠
["p›"] = 
CµFun˘i⁄
(
m≠_p›
, 
m≠_p›_¨gs
, "pop");

184 
	gba£_m≠
["Àn"] = 
CµFun˘i⁄
(
m≠_Àn
, "len");

185 
	gba£_m≠
["ö°™˚of"] = 
CµFun˘i⁄
(&
deÁu…_ö°™˚of
,

188 } 
	g__CPARSE_STARTUP
;

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@
1
.
1
/usr/include
31
658
builtin-features.cpp
catch.cpp
catch.hpp
containers.cpp
containers.h
functions.cpp
functions.h
packToken.cpp
packToken.h
shunting-yard-exceptions.h
shunting-yard.cpp
shunting-yard.h
test-shunting-yard.cpp
/usr/include/assert.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdlib.h
/usr/include/unistd.h
builtin-features.inc
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/time.h
/usr/include/xlocale.h
builtin-features/functions.inc
builtin-features/operations.inc
builtin-features/reservedWords.inc
builtin-features/typeSpecificFunctions.inc
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/endian.h
